
Wireless_Communications.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b39c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ed4  0800b584  0800b584  0001b584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d458  0800d458  00020590  2**0
                  CONTENTS
  4 .ARM          00000000  0800d458  0800d458  00020590  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d458  0800d458  00020590  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d458  0800d458  0001d458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d45c  0800d45c  0001d45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000590  20000000  0800d460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ba4  20000590  0800d9f0  00020590  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001134  0800d9f0  00021134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020590  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d192  00000000  00000000  000205b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000246b  00000000  00000000  0002d74b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b68  00000000  00000000  0002fbb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a88  00000000  00000000  00030720  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b02d  00000000  00000000  000311a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b4e7  00000000  00000000  0004c1d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000941f0  00000000  00000000  000576bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eb8ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003944  00000000  00000000  000eb928  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000590 	.word	0x20000590
 8000204:	00000000 	.word	0x00000000
 8000208:	0800b56c 	.word	0x0800b56c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000594 	.word	0x20000594
 8000224:	0800b56c 	.word	0x0800b56c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000376:	f1a4 0401 	sub.w	r4, r4, #1
 800037a:	d1e9      	bne.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__aeabi_d2uiz>:
 80009d4:	004a      	lsls	r2, r1, #1
 80009d6:	d211      	bcs.n	80009fc <__aeabi_d2uiz+0x28>
 80009d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009dc:	d211      	bcs.n	8000a02 <__aeabi_d2uiz+0x2e>
 80009de:	d50d      	bpl.n	80009fc <__aeabi_d2uiz+0x28>
 80009e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e8:	d40e      	bmi.n	8000a08 <__aeabi_d2uiz+0x34>
 80009ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009f6:	fa23 f002 	lsr.w	r0, r3, r2
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a06:	d102      	bne.n	8000a0e <__aeabi_d2uiz+0x3a>
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295
 8000a0c:	4770      	bx	lr
 8000a0e:	f04f 0000 	mov.w	r0, #0
 8000a12:	4770      	bx	lr

08000a14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	f107 0310 	add.w	r3, r7, #16
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a28:	4b4f      	ldr	r3, [pc, #316]	; (8000b68 <MX_GPIO_Init+0x154>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	4a4e      	ldr	r2, [pc, #312]	; (8000b68 <MX_GPIO_Init+0x154>)
 8000a2e:	f043 0320 	orr.w	r3, r3, #32
 8000a32:	6193      	str	r3, [r2, #24]
 8000a34:	4b4c      	ldr	r3, [pc, #304]	; (8000b68 <MX_GPIO_Init+0x154>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	f003 0320 	and.w	r3, r3, #32
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a40:	4b49      	ldr	r3, [pc, #292]	; (8000b68 <MX_GPIO_Init+0x154>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	4a48      	ldr	r2, [pc, #288]	; (8000b68 <MX_GPIO_Init+0x154>)
 8000a46:	f043 0304 	orr.w	r3, r3, #4
 8000a4a:	6193      	str	r3, [r2, #24]
 8000a4c:	4b46      	ldr	r3, [pc, #280]	; (8000b68 <MX_GPIO_Init+0x154>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	f003 0304 	and.w	r3, r3, #4
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a58:	4b43      	ldr	r3, [pc, #268]	; (8000b68 <MX_GPIO_Init+0x154>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	4a42      	ldr	r2, [pc, #264]	; (8000b68 <MX_GPIO_Init+0x154>)
 8000a5e:	f043 0310 	orr.w	r3, r3, #16
 8000a62:	6193      	str	r3, [r2, #24]
 8000a64:	4b40      	ldr	r3, [pc, #256]	; (8000b68 <MX_GPIO_Init+0x154>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	f003 0310 	and.w	r3, r3, #16
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CE_Pin|LED0_Pin, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000a76:	483d      	ldr	r0, [pc, #244]	; (8000b6c <MX_GPIO_Init+0x158>)
 8000a78:	f007 feb9 	bl	80087ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2110      	movs	r1, #16
 8000a80:	483b      	ldr	r0, [pc, #236]	; (8000b70 <MX_GPIO_Init+0x15c>)
 8000a82:	f007 feb4 	bl	80087ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2104      	movs	r1, #4
 8000a8a:	483a      	ldr	r0, [pc, #232]	; (8000b74 <MX_GPIO_Init+0x160>)
 8000a8c:	f007 feaf 	bl	80087ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_WK_Pin;
 8000a90:	2301      	movs	r3, #1
 8000a92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a94:	4b38      	ldr	r3, [pc, #224]	; (8000b78 <MX_GPIO_Init+0x164>)
 8000a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_WK_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 0310 	add.w	r3, r7, #16
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4832      	ldr	r0, [pc, #200]	; (8000b6c <MX_GPIO_Init+0x158>)
 8000aa4:	f007 fd22 	bl	80084ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI_CE_Pin|LED0_Pin;
 8000aa8:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000aac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0310 	add.w	r3, r7, #16
 8000abe:	4619      	mov	r1, r3
 8000ac0:	482a      	ldr	r0, [pc, #168]	; (8000b6c <MX_GPIO_Init+0x158>)
 8000ac2:	f007 fd13 	bl	80084ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000ac6:	2310      	movs	r3, #16
 8000ac8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 0310 	add.w	r3, r7, #16
 8000ada:	4619      	mov	r1, r3
 8000adc:	4824      	ldr	r0, [pc, #144]	; (8000b70 <MX_GPIO_Init+0x15c>)
 8000ade:	f007 fd05 	bl	80084ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_UP_Pin;
 8000ae2:	2320      	movs	r3, #32
 8000ae4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae6:	4b24      	ldr	r3, [pc, #144]	; (8000b78 <MX_GPIO_Init+0x164>)
 8000ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_UP_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 0310 	add.w	r3, r7, #16
 8000af2:	4619      	mov	r1, r3
 8000af4:	481e      	ldr	r0, [pc, #120]	; (8000b70 <MX_GPIO_Init+0x15c>)
 8000af6:	f007 fcf9 	bl	80084ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_DOWN_Pin;
 8000afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000afe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b00:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <MX_GPIO_Init+0x164>)
 8000b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_DOWN_GPIO_Port, &GPIO_InitStruct);
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4817      	ldr	r0, [pc, #92]	; (8000b6c <MX_GPIO_Init+0x158>)
 8000b10:	f007 fcec 	bl	80084ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000b14:	2304      	movs	r3, #4
 8000b16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2302      	movs	r3, #2
 8000b22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4812      	ldr	r0, [pc, #72]	; (8000b74 <MX_GPIO_Init+0x160>)
 8000b2c:	f007 fcde 	bl	80084ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2101      	movs	r1, #1
 8000b34:	2006      	movs	r0, #6
 8000b36:	f007 fb9a 	bl	800826e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b3a:	2006      	movs	r0, #6
 8000b3c:	f007 fbb3 	bl	80082a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 1);
 8000b40:	2201      	movs	r2, #1
 8000b42:	2101      	movs	r1, #1
 8000b44:	2017      	movs	r0, #23
 8000b46:	f007 fb92 	bl	800826e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b4a:	2017      	movs	r0, #23
 8000b4c:	f007 fbab 	bl	80082a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 2);
 8000b50:	2202      	movs	r2, #2
 8000b52:	2101      	movs	r1, #1
 8000b54:	2028      	movs	r0, #40	; 0x28
 8000b56:	f007 fb8a 	bl	800826e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b5a:	2028      	movs	r0, #40	; 0x28
 8000b5c:	f007 fba3 	bl	80082a6 <HAL_NVIC_EnableIRQ>

}
 8000b60:	bf00      	nop
 8000b62:	3720      	adds	r7, #32
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40010800 	.word	0x40010800
 8000b70:	40011000 	.word	0x40011000
 8000b74:	40011400 	.word	0x40011400
 8000b78:	10110000 	.word	0x10110000

08000b7c <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 8000b86:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <LCD_WR_REG+0x40>)
 8000b88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b8c:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <LCD_WR_REG+0x40>)
 8000b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b94:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000b96:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <LCD_WR_REG+0x44>)
 8000b98:	88fb      	ldrh	r3, [r7, #6]
 8000b9a:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000b9c:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <LCD_WR_REG+0x40>)
 8000b9e:	2280      	movs	r2, #128	; 0x80
 8000ba0:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <LCD_WR_REG+0x40>)
 8000ba4:	2280      	movs	r2, #128	; 0x80
 8000ba6:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <LCD_WR_REG+0x40>)
 8000baa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bae:	611a      	str	r2, [r3, #16]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40011000 	.word	0x40011000
 8000bc0:	40010c00 	.word	0x40010c00

08000bc4 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 8000bce:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <LCD_WR_DATAX+0x40>)
 8000bd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bd4:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <LCD_WR_DATAX+0x40>)
 8000bd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bdc:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000bde:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <LCD_WR_DATAX+0x44>)
 8000be0:	88fb      	ldrh	r3, [r7, #6]
 8000be2:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000be4:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <LCD_WR_DATAX+0x40>)
 8000be6:	2280      	movs	r2, #128	; 0x80
 8000be8:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <LCD_WR_DATAX+0x40>)
 8000bec:	2280      	movs	r2, #128	; 0x80
 8000bee:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <LCD_WR_DATAX+0x40>)
 8000bf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf6:	611a      	str	r2, [r3, #16]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40011000 	.word	0x40011000
 8000c08:	40010c00 	.word	0x40010c00

08000c0c <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 8000c12:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <LCD_RD_DATA+0x7c>)
 8000c14:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000c18:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 8000c1a:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <LCD_RD_DATA+0x7c>)
 8000c1c:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000c20:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8000c22:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <LCD_RD_DATA+0x7c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8000c28:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <LCD_RD_DATA+0x80>)
 8000c2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c2e:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000c30:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <LCD_RD_DATA+0x80>)
 8000c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c36:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8000c38:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <LCD_RD_DATA+0x80>)
 8000c3a:	2240      	movs	r2, #64	; 0x40
 8000c3c:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 8000c3e:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <LCD_RD_DATA+0x84>)
 8000c40:	889b      	ldrh	r3, [r3, #4]
 8000c42:	f648 1289 	movw	r2, #35209	; 0x8989
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d102      	bne.n	8000c50 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f007 fa16 	bl	800807c <HAL_Delay>
	t = DATAIN
 8000c50:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <LCD_RD_DATA+0x7c>)
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8000c56:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <LCD_RD_DATA+0x80>)
 8000c58:	2240      	movs	r2, #64	; 0x40
 8000c5a:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <LCD_RD_DATA+0x80>)
 8000c5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c62:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <LCD_RD_DATA+0x7c>)
 8000c66:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000c6a:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <LCD_RD_DATA+0x7c>)
 8000c6e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000c72:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <LCD_RD_DATA+0x7c>)
 8000c76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c7a:	60da      	str	r2, [r3, #12]
	return t;
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40010c00 	.word	0x40010c00
 8000c8c:	40011000 	.word	0x40011000
 8000c90:	200005d4 	.word	0x200005d4

08000c94 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	460a      	mov	r2, r1
 8000c9e:	80fb      	strh	r3, [r7, #6]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8000ca4:	88fb      	ldrh	r3, [r7, #6]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff ff68 	bl	8000b7c <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <LCD_WriteReg+0x4c>)
 8000cae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cb2:	611a      	str	r2, [r3, #16]
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <LCD_WriteReg+0x4c>)
 8000cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cba:	615a      	str	r2, [r3, #20]
 8000cbc:	4a09      	ldr	r2, [pc, #36]	; (8000ce4 <LCD_WriteReg+0x50>)
 8000cbe:	88bb      	ldrh	r3, [r7, #4]
 8000cc0:	60d3      	str	r3, [r2, #12]
 8000cc2:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <LCD_WriteReg+0x4c>)
 8000cc4:	2280      	movs	r2, #128	; 0x80
 8000cc6:	615a      	str	r2, [r3, #20]
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <LCD_WriteReg+0x4c>)
 8000cca:	2280      	movs	r2, #128	; 0x80
 8000ccc:	611a      	str	r2, [r3, #16]
 8000cce:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <LCD_WriteReg+0x4c>)
 8000cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cd4:	611a      	str	r2, [r3, #16]
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40011000 	.word	0x40011000
 8000ce4:	40010c00 	.word	0x40010c00

08000ce8 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff41 	bl	8000b7c <LCD_WR_REG>
	return LCD_RD_DATA();
 8000cfa:	f7ff ff87 	bl	8000c0c <LCD_RD_DATA>
 8000cfe:	4603      	mov	r3, r0
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <LCD_WriteRAM_Prepare+0x14>)
 8000d0e:	891b      	ldrh	r3, [r3, #8]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff33 	bl	8000b7c <LCD_WR_REG>
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200005d4 	.word	0x200005d4

08000d20 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	460a      	mov	r2, r1
 8000d2a:	80fb      	strh	r3, [r7, #6]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8000d30:	4b73      	ldr	r3, [pc, #460]	; (8000f00 <LCD_SetCursor+0x1e0>)
 8000d32:	889b      	ldrh	r3, [r3, #4]
 8000d34:	f249 3241 	movw	r2, #37697	; 0x9341
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d005      	beq.n	8000d48 <LCD_SetCursor+0x28>
 8000d3c:	4b70      	ldr	r3, [pc, #448]	; (8000f00 <LCD_SetCursor+0x1e0>)
 8000d3e:	889b      	ldrh	r3, [r3, #4]
 8000d40:	f245 3210 	movw	r2, #21264	; 0x5310
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d164      	bne.n	8000e12 <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8000d48:	4b6d      	ldr	r3, [pc, #436]	; (8000f00 <LCD_SetCursor+0x1e0>)
 8000d4a:	895b      	ldrh	r3, [r3, #10]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ff15 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000d52:	4b6c      	ldr	r3, [pc, #432]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000d54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d58:	611a      	str	r2, [r3, #16]
 8000d5a:	4b6a      	ldr	r3, [pc, #424]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d60:	615a      	str	r2, [r3, #20]
 8000d62:	88fb      	ldrh	r3, [r7, #6]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	4b67      	ldr	r3, [pc, #412]	; (8000f08 <LCD_SetCursor+0x1e8>)
 8000d6a:	60da      	str	r2, [r3, #12]
 8000d6c:	4b65      	ldr	r3, [pc, #404]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000d6e:	2280      	movs	r2, #128	; 0x80
 8000d70:	615a      	str	r2, [r3, #20]
 8000d72:	4b64      	ldr	r3, [pc, #400]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000d74:	2280      	movs	r2, #128	; 0x80
 8000d76:	611a      	str	r2, [r3, #16]
 8000d78:	4b62      	ldr	r3, [pc, #392]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d7e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000d80:	4b60      	ldr	r3, [pc, #384]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000d82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d86:	611a      	str	r2, [r3, #16]
 8000d88:	4b5e      	ldr	r3, [pc, #376]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d8e:	615a      	str	r2, [r3, #20]
 8000d90:	88fb      	ldrh	r3, [r7, #6]
 8000d92:	4a5d      	ldr	r2, [pc, #372]	; (8000f08 <LCD_SetCursor+0x1e8>)
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	60d3      	str	r3, [r2, #12]
 8000d98:	4b5a      	ldr	r3, [pc, #360]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000d9a:	2280      	movs	r2, #128	; 0x80
 8000d9c:	615a      	str	r2, [r3, #20]
 8000d9e:	4b59      	ldr	r3, [pc, #356]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000da0:	2280      	movs	r2, #128	; 0x80
 8000da2:	611a      	str	r2, [r3, #16]
 8000da4:	4b57      	ldr	r3, [pc, #348]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000da6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000daa:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000dac:	4b54      	ldr	r3, [pc, #336]	; (8000f00 <LCD_SetCursor+0x1e0>)
 8000dae:	899b      	ldrh	r3, [r3, #12]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fee3 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000db6:	4b53      	ldr	r3, [pc, #332]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000db8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dbc:	611a      	str	r2, [r3, #16]
 8000dbe:	4b51      	ldr	r3, [pc, #324]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dc4:	615a      	str	r2, [r3, #20]
 8000dc6:	88bb      	ldrh	r3, [r7, #4]
 8000dc8:	0a1b      	lsrs	r3, r3, #8
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	4b4e      	ldr	r3, [pc, #312]	; (8000f08 <LCD_SetCursor+0x1e8>)
 8000dce:	60da      	str	r2, [r3, #12]
 8000dd0:	4b4c      	ldr	r3, [pc, #304]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000dd2:	2280      	movs	r2, #128	; 0x80
 8000dd4:	615a      	str	r2, [r3, #20]
 8000dd6:	4b4b      	ldr	r3, [pc, #300]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000dd8:	2280      	movs	r2, #128	; 0x80
 8000dda:	611a      	str	r2, [r3, #16]
 8000ddc:	4b49      	ldr	r3, [pc, #292]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000dde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000de2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000de4:	4b47      	ldr	r3, [pc, #284]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000de6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dea:	611a      	str	r2, [r3, #16]
 8000dec:	4b45      	ldr	r3, [pc, #276]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000dee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000df2:	615a      	str	r2, [r3, #20]
 8000df4:	88bb      	ldrh	r3, [r7, #4]
 8000df6:	4a44      	ldr	r2, [pc, #272]	; (8000f08 <LCD_SetCursor+0x1e8>)
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	60d3      	str	r3, [r2, #12]
 8000dfc:	4b41      	ldr	r3, [pc, #260]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000dfe:	2280      	movs	r2, #128	; 0x80
 8000e00:	615a      	str	r2, [r3, #20]
 8000e02:	4b40      	ldr	r3, [pc, #256]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000e04:	2280      	movs	r2, #128	; 0x80
 8000e06:	611a      	str	r2, [r3, #16]
 8000e08:	4b3e      	ldr	r3, [pc, #248]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e0e:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8000e10:	e248      	b.n	80012a4 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8000e12:	4b3b      	ldr	r3, [pc, #236]	; (8000f00 <LCD_SetCursor+0x1e0>)
 8000e14:	889b      	ldrh	r3, [r3, #4]
 8000e16:	f646 0204 	movw	r2, #26628	; 0x6804
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d176      	bne.n	8000f0c <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8000e1e:	4b38      	ldr	r3, [pc, #224]	; (8000f00 <LCD_SetCursor+0x1e0>)
 8000e20:	799b      	ldrb	r3, [r3, #6]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d106      	bne.n	8000e34 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8000e26:	4b36      	ldr	r3, [pc, #216]	; (8000f00 <LCD_SetCursor+0x1e0>)
 8000e28:	881a      	ldrh	r2, [r3, #0]
 8000e2a:	88fb      	ldrh	r3, [r7, #6]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	3b01      	subs	r3, #1
 8000e32:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8000e34:	4b32      	ldr	r3, [pc, #200]	; (8000f00 <LCD_SetCursor+0x1e0>)
 8000e36:	895b      	ldrh	r3, [r3, #10]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fe9f 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000e3e:	4b31      	ldr	r3, [pc, #196]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000e40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e44:	611a      	str	r2, [r3, #16]
 8000e46:	4b2f      	ldr	r3, [pc, #188]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000e48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e4c:	615a      	str	r2, [r3, #20]
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	4b2c      	ldr	r3, [pc, #176]	; (8000f08 <LCD_SetCursor+0x1e8>)
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	4b2a      	ldr	r3, [pc, #168]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000e5a:	2280      	movs	r2, #128	; 0x80
 8000e5c:	615a      	str	r2, [r3, #20]
 8000e5e:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000e60:	2280      	movs	r2, #128	; 0x80
 8000e62:	611a      	str	r2, [r3, #16]
 8000e64:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000e66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e6a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000e6c:	4b25      	ldr	r3, [pc, #148]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000e6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e72:	611a      	str	r2, [r3, #16]
 8000e74:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000e76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e7a:	615a      	str	r2, [r3, #20]
 8000e7c:	88fb      	ldrh	r3, [r7, #6]
 8000e7e:	4a22      	ldr	r2, [pc, #136]	; (8000f08 <LCD_SetCursor+0x1e8>)
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	60d3      	str	r3, [r2, #12]
 8000e84:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000e86:	2280      	movs	r2, #128	; 0x80
 8000e88:	615a      	str	r2, [r3, #20]
 8000e8a:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000e8c:	2280      	movs	r2, #128	; 0x80
 8000e8e:	611a      	str	r2, [r3, #16]
 8000e90:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e96:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000e98:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <LCD_SetCursor+0x1e0>)
 8000e9a:	899b      	ldrh	r3, [r3, #12]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fe6d 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000ea4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ea8:	611a      	str	r2, [r3, #16]
 8000eaa:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000eac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb0:	615a      	str	r2, [r3, #20]
 8000eb2:	88bb      	ldrh	r3, [r7, #4]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <LCD_SetCursor+0x1e8>)
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000ebe:	2280      	movs	r2, #128	; 0x80
 8000ec0:	615a      	str	r2, [r3, #20]
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000ec4:	2280      	movs	r2, #128	; 0x80
 8000ec6:	611a      	str	r2, [r3, #16]
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000eca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ece:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000ed2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ed6:	611a      	str	r2, [r3, #16]
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000eda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ede:	615a      	str	r2, [r3, #20]
 8000ee0:	88bb      	ldrh	r3, [r7, #4]
 8000ee2:	4a09      	ldr	r2, [pc, #36]	; (8000f08 <LCD_SetCursor+0x1e8>)
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	60d3      	str	r3, [r2, #12]
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000eea:	2280      	movs	r2, #128	; 0x80
 8000eec:	615a      	str	r2, [r3, #20]
 8000eee:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000ef0:	2280      	movs	r2, #128	; 0x80
 8000ef2:	611a      	str	r2, [r3, #16]
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <LCD_SetCursor+0x1e4>)
 8000ef6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000efa:	611a      	str	r2, [r3, #16]
}
 8000efc:	e1d2      	b.n	80012a4 <LCD_SetCursor+0x584>
 8000efe:	bf00      	nop
 8000f00:	200005d4 	.word	0x200005d4
 8000f04:	40011000 	.word	0x40011000
 8000f08:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8000f0c:	4b99      	ldr	r3, [pc, #612]	; (8001174 <LCD_SetCursor+0x454>)
 8000f0e:	889b      	ldrh	r3, [r3, #4]
 8000f10:	f641 1263 	movw	r2, #6499	; 0x1963
 8000f14:	4293      	cmp	r3, r2
 8000f16:	f040 8133 	bne.w	8001180 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8000f1a:	4b96      	ldr	r3, [pc, #600]	; (8001174 <LCD_SetCursor+0x454>)
 8000f1c:	799b      	ldrb	r3, [r3, #6]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d163      	bne.n	8000fea <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8000f22:	4b94      	ldr	r3, [pc, #592]	; (8001174 <LCD_SetCursor+0x454>)
 8000f24:	881a      	ldrh	r2, [r3, #0]
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8000f30:	4b90      	ldr	r3, [pc, #576]	; (8001174 <LCD_SetCursor+0x454>)
 8000f32:	895b      	ldrh	r3, [r3, #10]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fe21 	bl	8000b7c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8000f3a:	4b8f      	ldr	r3, [pc, #572]	; (8001178 <LCD_SetCursor+0x458>)
 8000f3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f40:	611a      	str	r2, [r3, #16]
 8000f42:	4b8d      	ldr	r3, [pc, #564]	; (8001178 <LCD_SetCursor+0x458>)
 8000f44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f48:	615a      	str	r2, [r3, #20]
 8000f4a:	4b8c      	ldr	r3, [pc, #560]	; (800117c <LCD_SetCursor+0x45c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	4b89      	ldr	r3, [pc, #548]	; (8001178 <LCD_SetCursor+0x458>)
 8000f52:	2280      	movs	r2, #128	; 0x80
 8000f54:	615a      	str	r2, [r3, #20]
 8000f56:	4b88      	ldr	r3, [pc, #544]	; (8001178 <LCD_SetCursor+0x458>)
 8000f58:	2280      	movs	r2, #128	; 0x80
 8000f5a:	611a      	str	r2, [r3, #16]
 8000f5c:	4b86      	ldr	r3, [pc, #536]	; (8001178 <LCD_SetCursor+0x458>)
 8000f5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f62:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8000f64:	4b84      	ldr	r3, [pc, #528]	; (8001178 <LCD_SetCursor+0x458>)
 8000f66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f6a:	611a      	str	r2, [r3, #16]
 8000f6c:	4b82      	ldr	r3, [pc, #520]	; (8001178 <LCD_SetCursor+0x458>)
 8000f6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f72:	615a      	str	r2, [r3, #20]
 8000f74:	4b81      	ldr	r3, [pc, #516]	; (800117c <LCD_SetCursor+0x45c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	4b7f      	ldr	r3, [pc, #508]	; (8001178 <LCD_SetCursor+0x458>)
 8000f7c:	2280      	movs	r2, #128	; 0x80
 8000f7e:	615a      	str	r2, [r3, #20]
 8000f80:	4b7d      	ldr	r3, [pc, #500]	; (8001178 <LCD_SetCursor+0x458>)
 8000f82:	2280      	movs	r2, #128	; 0x80
 8000f84:	611a      	str	r2, [r3, #16]
 8000f86:	4b7c      	ldr	r3, [pc, #496]	; (8001178 <LCD_SetCursor+0x458>)
 8000f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f8c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8000f8e:	4b7a      	ldr	r3, [pc, #488]	; (8001178 <LCD_SetCursor+0x458>)
 8000f90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f94:	611a      	str	r2, [r3, #16]
 8000f96:	4b78      	ldr	r3, [pc, #480]	; (8001178 <LCD_SetCursor+0x458>)
 8000f98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f9c:	615a      	str	r2, [r3, #20]
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	4b75      	ldr	r3, [pc, #468]	; (800117c <LCD_SetCursor+0x45c>)
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	4b73      	ldr	r3, [pc, #460]	; (8001178 <LCD_SetCursor+0x458>)
 8000faa:	2280      	movs	r2, #128	; 0x80
 8000fac:	615a      	str	r2, [r3, #20]
 8000fae:	4b72      	ldr	r3, [pc, #456]	; (8001178 <LCD_SetCursor+0x458>)
 8000fb0:	2280      	movs	r2, #128	; 0x80
 8000fb2:	611a      	str	r2, [r3, #16]
 8000fb4:	4b70      	ldr	r3, [pc, #448]	; (8001178 <LCD_SetCursor+0x458>)
 8000fb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fba:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000fbc:	4b6e      	ldr	r3, [pc, #440]	; (8001178 <LCD_SetCursor+0x458>)
 8000fbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc2:	611a      	str	r2, [r3, #16]
 8000fc4:	4b6c      	ldr	r3, [pc, #432]	; (8001178 <LCD_SetCursor+0x458>)
 8000fc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fca:	615a      	str	r2, [r3, #20]
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	4a6b      	ldr	r2, [pc, #428]	; (800117c <LCD_SetCursor+0x45c>)
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	60d3      	str	r3, [r2, #12]
 8000fd4:	4b68      	ldr	r3, [pc, #416]	; (8001178 <LCD_SetCursor+0x458>)
 8000fd6:	2280      	movs	r2, #128	; 0x80
 8000fd8:	615a      	str	r2, [r3, #20]
 8000fda:	4b67      	ldr	r3, [pc, #412]	; (8001178 <LCD_SetCursor+0x458>)
 8000fdc:	2280      	movs	r2, #128	; 0x80
 8000fde:	611a      	str	r2, [r3, #16]
 8000fe0:	4b65      	ldr	r3, [pc, #404]	; (8001178 <LCD_SetCursor+0x458>)
 8000fe2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fe6:	611a      	str	r2, [r3, #16]
 8000fe8:	e061      	b.n	80010ae <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 8000fea:	4b62      	ldr	r3, [pc, #392]	; (8001174 <LCD_SetCursor+0x454>)
 8000fec:	895b      	ldrh	r3, [r3, #10]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fdc4 	bl	8000b7c <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8000ff4:	4b60      	ldr	r3, [pc, #384]	; (8001178 <LCD_SetCursor+0x458>)
 8000ff6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ffa:	611a      	str	r2, [r3, #16]
 8000ffc:	4b5e      	ldr	r3, [pc, #376]	; (8001178 <LCD_SetCursor+0x458>)
 8000ffe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001002:	615a      	str	r2, [r3, #20]
 8001004:	88fb      	ldrh	r3, [r7, #6]
 8001006:	0a1b      	lsrs	r3, r3, #8
 8001008:	b29a      	uxth	r2, r3
 800100a:	4b5c      	ldr	r3, [pc, #368]	; (800117c <LCD_SetCursor+0x45c>)
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	4b5a      	ldr	r3, [pc, #360]	; (8001178 <LCD_SetCursor+0x458>)
 8001010:	2280      	movs	r2, #128	; 0x80
 8001012:	615a      	str	r2, [r3, #20]
 8001014:	4b58      	ldr	r3, [pc, #352]	; (8001178 <LCD_SetCursor+0x458>)
 8001016:	2280      	movs	r2, #128	; 0x80
 8001018:	611a      	str	r2, [r3, #16]
 800101a:	4b57      	ldr	r3, [pc, #348]	; (8001178 <LCD_SetCursor+0x458>)
 800101c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001020:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8001022:	4b55      	ldr	r3, [pc, #340]	; (8001178 <LCD_SetCursor+0x458>)
 8001024:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001028:	611a      	str	r2, [r3, #16]
 800102a:	4b53      	ldr	r3, [pc, #332]	; (8001178 <LCD_SetCursor+0x458>)
 800102c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001030:	615a      	str	r2, [r3, #20]
 8001032:	88fb      	ldrh	r3, [r7, #6]
 8001034:	4a51      	ldr	r2, [pc, #324]	; (800117c <LCD_SetCursor+0x45c>)
 8001036:	b2db      	uxtb	r3, r3
 8001038:	60d3      	str	r3, [r2, #12]
 800103a:	4b4f      	ldr	r3, [pc, #316]	; (8001178 <LCD_SetCursor+0x458>)
 800103c:	2280      	movs	r2, #128	; 0x80
 800103e:	615a      	str	r2, [r3, #20]
 8001040:	4b4d      	ldr	r3, [pc, #308]	; (8001178 <LCD_SetCursor+0x458>)
 8001042:	2280      	movs	r2, #128	; 0x80
 8001044:	611a      	str	r2, [r3, #16]
 8001046:	4b4c      	ldr	r3, [pc, #304]	; (8001178 <LCD_SetCursor+0x458>)
 8001048:	f44f 7200 	mov.w	r2, #512	; 0x200
 800104c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 800104e:	4b4a      	ldr	r3, [pc, #296]	; (8001178 <LCD_SetCursor+0x458>)
 8001050:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001054:	611a      	str	r2, [r3, #16]
 8001056:	4b48      	ldr	r3, [pc, #288]	; (8001178 <LCD_SetCursor+0x458>)
 8001058:	f44f 7200 	mov.w	r2, #512	; 0x200
 800105c:	615a      	str	r2, [r3, #20]
 800105e:	4b45      	ldr	r3, [pc, #276]	; (8001174 <LCD_SetCursor+0x454>)
 8001060:	881b      	ldrh	r3, [r3, #0]
 8001062:	3b01      	subs	r3, #1
 8001064:	121a      	asrs	r2, r3, #8
 8001066:	4b45      	ldr	r3, [pc, #276]	; (800117c <LCD_SetCursor+0x45c>)
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	4b43      	ldr	r3, [pc, #268]	; (8001178 <LCD_SetCursor+0x458>)
 800106c:	2280      	movs	r2, #128	; 0x80
 800106e:	615a      	str	r2, [r3, #20]
 8001070:	4b41      	ldr	r3, [pc, #260]	; (8001178 <LCD_SetCursor+0x458>)
 8001072:	2280      	movs	r2, #128	; 0x80
 8001074:	611a      	str	r2, [r3, #16]
 8001076:	4b40      	ldr	r3, [pc, #256]	; (8001178 <LCD_SetCursor+0x458>)
 8001078:	f44f 7200 	mov.w	r2, #512	; 0x200
 800107c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800107e:	4b3e      	ldr	r3, [pc, #248]	; (8001178 <LCD_SetCursor+0x458>)
 8001080:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001084:	611a      	str	r2, [r3, #16]
 8001086:	4b3c      	ldr	r3, [pc, #240]	; (8001178 <LCD_SetCursor+0x458>)
 8001088:	f44f 7200 	mov.w	r2, #512	; 0x200
 800108c:	615a      	str	r2, [r3, #20]
 800108e:	4b39      	ldr	r3, [pc, #228]	; (8001174 <LCD_SetCursor+0x454>)
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	3b01      	subs	r3, #1
 8001094:	4a39      	ldr	r2, [pc, #228]	; (800117c <LCD_SetCursor+0x45c>)
 8001096:	b2db      	uxtb	r3, r3
 8001098:	60d3      	str	r3, [r2, #12]
 800109a:	4b37      	ldr	r3, [pc, #220]	; (8001178 <LCD_SetCursor+0x458>)
 800109c:	2280      	movs	r2, #128	; 0x80
 800109e:	615a      	str	r2, [r3, #20]
 80010a0:	4b35      	ldr	r3, [pc, #212]	; (8001178 <LCD_SetCursor+0x458>)
 80010a2:	2280      	movs	r2, #128	; 0x80
 80010a4:	611a      	str	r2, [r3, #16]
 80010a6:	4b34      	ldr	r3, [pc, #208]	; (8001178 <LCD_SetCursor+0x458>)
 80010a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ac:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80010ae:	4b31      	ldr	r3, [pc, #196]	; (8001174 <LCD_SetCursor+0x454>)
 80010b0:	899b      	ldrh	r3, [r3, #12]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fd62 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 80010b8:	4b2f      	ldr	r3, [pc, #188]	; (8001178 <LCD_SetCursor+0x458>)
 80010ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010be:	611a      	str	r2, [r3, #16]
 80010c0:	4b2d      	ldr	r3, [pc, #180]	; (8001178 <LCD_SetCursor+0x458>)
 80010c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c6:	615a      	str	r2, [r3, #20]
 80010c8:	88bb      	ldrh	r3, [r7, #4]
 80010ca:	0a1b      	lsrs	r3, r3, #8
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	4b2b      	ldr	r3, [pc, #172]	; (800117c <LCD_SetCursor+0x45c>)
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	4b29      	ldr	r3, [pc, #164]	; (8001178 <LCD_SetCursor+0x458>)
 80010d4:	2280      	movs	r2, #128	; 0x80
 80010d6:	615a      	str	r2, [r3, #20]
 80010d8:	4b27      	ldr	r3, [pc, #156]	; (8001178 <LCD_SetCursor+0x458>)
 80010da:	2280      	movs	r2, #128	; 0x80
 80010dc:	611a      	str	r2, [r3, #16]
 80010de:	4b26      	ldr	r3, [pc, #152]	; (8001178 <LCD_SetCursor+0x458>)
 80010e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010e4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 80010e6:	4b24      	ldr	r3, [pc, #144]	; (8001178 <LCD_SetCursor+0x458>)
 80010e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010ec:	611a      	str	r2, [r3, #16]
 80010ee:	4b22      	ldr	r3, [pc, #136]	; (8001178 <LCD_SetCursor+0x458>)
 80010f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f4:	615a      	str	r2, [r3, #20]
 80010f6:	88bb      	ldrh	r3, [r7, #4]
 80010f8:	4a20      	ldr	r2, [pc, #128]	; (800117c <LCD_SetCursor+0x45c>)
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	60d3      	str	r3, [r2, #12]
 80010fe:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <LCD_SetCursor+0x458>)
 8001100:	2280      	movs	r2, #128	; 0x80
 8001102:	615a      	str	r2, [r3, #20]
 8001104:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <LCD_SetCursor+0x458>)
 8001106:	2280      	movs	r2, #128	; 0x80
 8001108:	611a      	str	r2, [r3, #16]
 800110a:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <LCD_SetCursor+0x458>)
 800110c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001110:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001112:	4b19      	ldr	r3, [pc, #100]	; (8001178 <LCD_SetCursor+0x458>)
 8001114:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001118:	611a      	str	r2, [r3, #16]
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <LCD_SetCursor+0x458>)
 800111c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001120:	615a      	str	r2, [r3, #20]
 8001122:	4b14      	ldr	r3, [pc, #80]	; (8001174 <LCD_SetCursor+0x454>)
 8001124:	885b      	ldrh	r3, [r3, #2]
 8001126:	3b01      	subs	r3, #1
 8001128:	121a      	asrs	r2, r3, #8
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <LCD_SetCursor+0x45c>)
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	4b12      	ldr	r3, [pc, #72]	; (8001178 <LCD_SetCursor+0x458>)
 8001130:	2280      	movs	r2, #128	; 0x80
 8001132:	615a      	str	r2, [r3, #20]
 8001134:	4b10      	ldr	r3, [pc, #64]	; (8001178 <LCD_SetCursor+0x458>)
 8001136:	2280      	movs	r2, #128	; 0x80
 8001138:	611a      	str	r2, [r3, #16]
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <LCD_SetCursor+0x458>)
 800113c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001140:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001142:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <LCD_SetCursor+0x458>)
 8001144:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001148:	611a      	str	r2, [r3, #16]
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <LCD_SetCursor+0x458>)
 800114c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001150:	615a      	str	r2, [r3, #20]
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <LCD_SetCursor+0x454>)
 8001154:	885b      	ldrh	r3, [r3, #2]
 8001156:	3b01      	subs	r3, #1
 8001158:	4a08      	ldr	r2, [pc, #32]	; (800117c <LCD_SetCursor+0x45c>)
 800115a:	b2db      	uxtb	r3, r3
 800115c:	60d3      	str	r3, [r2, #12]
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <LCD_SetCursor+0x458>)
 8001160:	2280      	movs	r2, #128	; 0x80
 8001162:	615a      	str	r2, [r3, #20]
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <LCD_SetCursor+0x458>)
 8001166:	2280      	movs	r2, #128	; 0x80
 8001168:	611a      	str	r2, [r3, #16]
 800116a:	4b03      	ldr	r3, [pc, #12]	; (8001178 <LCD_SetCursor+0x458>)
 800116c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001170:	611a      	str	r2, [r3, #16]
}
 8001172:	e097      	b.n	80012a4 <LCD_SetCursor+0x584>
 8001174:	200005d4 	.word	0x200005d4
 8001178:	40011000 	.word	0x40011000
 800117c:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8001180:	4b4a      	ldr	r3, [pc, #296]	; (80012ac <LCD_SetCursor+0x58c>)
 8001182:	889b      	ldrh	r3, [r3, #4]
 8001184:	f245 5210 	movw	r2, #21776	; 0x5510
 8001188:	4293      	cmp	r3, r2
 800118a:	d172      	bne.n	8001272 <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 800118c:	4b47      	ldr	r3, [pc, #284]	; (80012ac <LCD_SetCursor+0x58c>)
 800118e:	895b      	ldrh	r3, [r3, #10]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fcf3 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8001196:	4b46      	ldr	r3, [pc, #280]	; (80012b0 <LCD_SetCursor+0x590>)
 8001198:	f44f 7280 	mov.w	r2, #256	; 0x100
 800119c:	611a      	str	r2, [r3, #16]
 800119e:	4b44      	ldr	r3, [pc, #272]	; (80012b0 <LCD_SetCursor+0x590>)
 80011a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011a4:	615a      	str	r2, [r3, #20]
 80011a6:	88fb      	ldrh	r3, [r7, #6]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	4b41      	ldr	r3, [pc, #260]	; (80012b4 <LCD_SetCursor+0x594>)
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	4b3f      	ldr	r3, [pc, #252]	; (80012b0 <LCD_SetCursor+0x590>)
 80011b2:	2280      	movs	r2, #128	; 0x80
 80011b4:	615a      	str	r2, [r3, #20]
 80011b6:	4b3e      	ldr	r3, [pc, #248]	; (80012b0 <LCD_SetCursor+0x590>)
 80011b8:	2280      	movs	r2, #128	; 0x80
 80011ba:	611a      	str	r2, [r3, #16]
 80011bc:	4b3c      	ldr	r3, [pc, #240]	; (80012b0 <LCD_SetCursor+0x590>)
 80011be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c2:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 80011c4:	4b39      	ldr	r3, [pc, #228]	; (80012ac <LCD_SetCursor+0x58c>)
 80011c6:	895b      	ldrh	r3, [r3, #10]
 80011c8:	3301      	adds	r3, #1
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fcd5 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 80011d2:	4b37      	ldr	r3, [pc, #220]	; (80012b0 <LCD_SetCursor+0x590>)
 80011d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011d8:	611a      	str	r2, [r3, #16]
 80011da:	4b35      	ldr	r3, [pc, #212]	; (80012b0 <LCD_SetCursor+0x590>)
 80011dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e0:	615a      	str	r2, [r3, #20]
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	4a33      	ldr	r2, [pc, #204]	; (80012b4 <LCD_SetCursor+0x594>)
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	60d3      	str	r3, [r2, #12]
 80011ea:	4b31      	ldr	r3, [pc, #196]	; (80012b0 <LCD_SetCursor+0x590>)
 80011ec:	2280      	movs	r2, #128	; 0x80
 80011ee:	615a      	str	r2, [r3, #20]
 80011f0:	4b2f      	ldr	r3, [pc, #188]	; (80012b0 <LCD_SetCursor+0x590>)
 80011f2:	2280      	movs	r2, #128	; 0x80
 80011f4:	611a      	str	r2, [r3, #16]
 80011f6:	4b2e      	ldr	r3, [pc, #184]	; (80012b0 <LCD_SetCursor+0x590>)
 80011f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011fc:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80011fe:	4b2b      	ldr	r3, [pc, #172]	; (80012ac <LCD_SetCursor+0x58c>)
 8001200:	899b      	ldrh	r3, [r3, #12]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff fcba 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8001208:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <LCD_SetCursor+0x590>)
 800120a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800120e:	611a      	str	r2, [r3, #16]
 8001210:	4b27      	ldr	r3, [pc, #156]	; (80012b0 <LCD_SetCursor+0x590>)
 8001212:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001216:	615a      	str	r2, [r3, #20]
 8001218:	88bb      	ldrh	r3, [r7, #4]
 800121a:	0a1b      	lsrs	r3, r3, #8
 800121c:	b29a      	uxth	r2, r3
 800121e:	4b25      	ldr	r3, [pc, #148]	; (80012b4 <LCD_SetCursor+0x594>)
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	4b23      	ldr	r3, [pc, #140]	; (80012b0 <LCD_SetCursor+0x590>)
 8001224:	2280      	movs	r2, #128	; 0x80
 8001226:	615a      	str	r2, [r3, #20]
 8001228:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <LCD_SetCursor+0x590>)
 800122a:	2280      	movs	r2, #128	; 0x80
 800122c:	611a      	str	r2, [r3, #16]
 800122e:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <LCD_SetCursor+0x590>)
 8001230:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001234:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8001236:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <LCD_SetCursor+0x58c>)
 8001238:	899b      	ldrh	r3, [r3, #12]
 800123a:	3301      	adds	r3, #1
 800123c:	b29b      	uxth	r3, r3
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fc9c 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 8001244:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <LCD_SetCursor+0x590>)
 8001246:	f44f 7280 	mov.w	r2, #256	; 0x100
 800124a:	611a      	str	r2, [r3, #16]
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <LCD_SetCursor+0x590>)
 800124e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001252:	615a      	str	r2, [r3, #20]
 8001254:	88bb      	ldrh	r3, [r7, #4]
 8001256:	4a17      	ldr	r2, [pc, #92]	; (80012b4 <LCD_SetCursor+0x594>)
 8001258:	b2db      	uxtb	r3, r3
 800125a:	60d3      	str	r3, [r2, #12]
 800125c:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <LCD_SetCursor+0x590>)
 800125e:	2280      	movs	r2, #128	; 0x80
 8001260:	615a      	str	r2, [r3, #20]
 8001262:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <LCD_SetCursor+0x590>)
 8001264:	2280      	movs	r2, #128	; 0x80
 8001266:	611a      	str	r2, [r3, #16]
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <LCD_SetCursor+0x590>)
 800126a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800126e:	611a      	str	r2, [r3, #16]
}
 8001270:	e018      	b.n	80012a4 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <LCD_SetCursor+0x58c>)
 8001274:	799b      	ldrb	r3, [r3, #6]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d106      	bne.n	8001288 <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <LCD_SetCursor+0x58c>)
 800127c:	881a      	ldrh	r2, [r3, #0]
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	b29b      	uxth	r3, r3
 8001284:	3b01      	subs	r3, #1
 8001286:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <LCD_SetCursor+0x58c>)
 800128a:	895b      	ldrh	r3, [r3, #10]
 800128c:	88fa      	ldrh	r2, [r7, #6]
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fcff 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8001296:	4b05      	ldr	r3, [pc, #20]	; (80012ac <LCD_SetCursor+0x58c>)
 8001298:	899b      	ldrh	r3, [r3, #12]
 800129a:	88ba      	ldrh	r2, [r7, #4]
 800129c:	4611      	mov	r1, r2
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fcf8 	bl	8000c94 <LCD_WriteReg>
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	200005d4 	.word	0x200005d4
 80012b0:	40011000 	.word	0x40011000
 80012b4:	40010c00 	.word	0x40010c00

080012b8 <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 80012ca:	4b78      	ldr	r3, [pc, #480]	; (80014ac <LCD_Scan_Dir+0x1f4>)
 80012cc:	799b      	ldrb	r3, [r3, #6]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d10b      	bne.n	80012ea <LCD_Scan_Dir+0x32>
 80012d2:	4b76      	ldr	r3, [pc, #472]	; (80014ac <LCD_Scan_Dir+0x1f4>)
 80012d4:	889b      	ldrh	r3, [r3, #4]
 80012d6:	f646 0204 	movw	r2, #26628	; 0x6804
 80012da:	4293      	cmp	r3, r2
 80012dc:	d005      	beq.n	80012ea <LCD_Scan_Dir+0x32>
 80012de:	4b73      	ldr	r3, [pc, #460]	; (80014ac <LCD_Scan_Dir+0x1f4>)
 80012e0:	889b      	ldrh	r3, [r3, #4]
 80012e2:	f641 1263 	movw	r2, #6499	; 0x1963
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d109      	bne.n	80012fe <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 80012ea:	4b70      	ldr	r3, [pc, #448]	; (80014ac <LCD_Scan_Dir+0x1f4>)
 80012ec:	799b      	ldrb	r3, [r3, #6]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d134      	bne.n	800135c <LCD_Scan_Dir+0xa4>
 80012f2:	4b6e      	ldr	r3, [pc, #440]	; (80014ac <LCD_Scan_Dir+0x1f4>)
 80012f4:	889b      	ldrh	r3, [r3, #4]
 80012f6:	f641 1263 	movw	r2, #6499	; 0x1963
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d12e      	bne.n	800135c <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	2b07      	cmp	r3, #7
 8001302:	d82b      	bhi.n	800135c <LCD_Scan_Dir+0xa4>
 8001304:	a201      	add	r2, pc, #4	; (adr r2, 800130c <LCD_Scan_Dir+0x54>)
 8001306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130a:	bf00      	nop
 800130c:	0800132d 	.word	0x0800132d
 8001310:	08001333 	.word	0x08001333
 8001314:	08001339 	.word	0x08001339
 8001318:	0800133f 	.word	0x0800133f
 800131c:	08001345 	.word	0x08001345
 8001320:	0800134b 	.word	0x0800134b
 8001324:	08001351 	.word	0x08001351
 8001328:	08001357 	.word	0x08001357
		{
		case 0:
			dir = 6;
 800132c:	2306      	movs	r3, #6
 800132e:	71fb      	strb	r3, [r7, #7]
			break;
 8001330:	e014      	b.n	800135c <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 8001332:	2307      	movs	r3, #7
 8001334:	71fb      	strb	r3, [r7, #7]
			break;
 8001336:	e011      	b.n	800135c <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 8001338:	2304      	movs	r3, #4
 800133a:	71fb      	strb	r3, [r7, #7]
			break;
 800133c:	e00e      	b.n	800135c <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 800133e:	2305      	movs	r3, #5
 8001340:	71fb      	strb	r3, [r7, #7]
			break;
 8001342:	e00b      	b.n	800135c <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 8001344:	2301      	movs	r3, #1
 8001346:	71fb      	strb	r3, [r7, #7]
			break;
 8001348:	e008      	b.n	800135c <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	71fb      	strb	r3, [r7, #7]
			break;
 800134e:	e005      	b.n	800135c <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 8001350:	2303      	movs	r3, #3
 8001352:	71fb      	strb	r3, [r7, #7]
			break;
 8001354:	e002      	b.n	800135c <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 8001356:	2302      	movs	r3, #2
 8001358:	71fb      	strb	r3, [r7, #7]
			break;
 800135a:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 800135c:	4b53      	ldr	r3, [pc, #332]	; (80014ac <LCD_Scan_Dir+0x1f4>)
 800135e:	889b      	ldrh	r3, [r3, #4]
 8001360:	f249 3241 	movw	r2, #37697	; 0x9341
 8001364:	4293      	cmp	r3, r2
 8001366:	d018      	beq.n	800139a <LCD_Scan_Dir+0xe2>
 8001368:	4b50      	ldr	r3, [pc, #320]	; (80014ac <LCD_Scan_Dir+0x1f4>)
 800136a:	889b      	ldrh	r3, [r3, #4]
 800136c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001370:	4293      	cmp	r3, r2
 8001372:	d012      	beq.n	800139a <LCD_Scan_Dir+0xe2>
 8001374:	4b4d      	ldr	r3, [pc, #308]	; (80014ac <LCD_Scan_Dir+0x1f4>)
 8001376:	889b      	ldrh	r3, [r3, #4]
 8001378:	f245 3210 	movw	r2, #21264	; 0x5310
 800137c:	4293      	cmp	r3, r2
 800137e:	d00c      	beq.n	800139a <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 8001380:	4b4a      	ldr	r3, [pc, #296]	; (80014ac <LCD_Scan_Dir+0x1f4>)
 8001382:	889b      	ldrh	r3, [r3, #4]
 8001384:	f245 5210 	movw	r2, #21776	; 0x5510
 8001388:	4293      	cmp	r3, r2
 800138a:	d006      	beq.n	800139a <LCD_Scan_Dir+0xe2>
 800138c:	4b47      	ldr	r3, [pc, #284]	; (80014ac <LCD_Scan_Dir+0x1f4>)
 800138e:	889b      	ldrh	r3, [r3, #4]
 8001390:	f641 1263 	movw	r2, #6499	; 0x1963
 8001394:	4293      	cmp	r3, r2
 8001396:	f040 8250 	bne.w	800183a <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	2b07      	cmp	r3, #7
 800139e:	d836      	bhi.n	800140e <LCD_Scan_Dir+0x156>
 80013a0:	a201      	add	r2, pc, #4	; (adr r2, 80013a8 <LCD_Scan_Dir+0xf0>)
 80013a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a6:	bf00      	nop
 80013a8:	0800140f 	.word	0x0800140f
 80013ac:	080013c9 	.word	0x080013c9
 80013b0:	080013d3 	.word	0x080013d3
 80013b4:	080013dd 	.word	0x080013dd
 80013b8:	080013e7 	.word	0x080013e7
 80013bc:	080013f1 	.word	0x080013f1
 80013c0:	080013fb 	.word	0x080013fb
 80013c4:	08001405 	.word	0x08001405
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 80013c8:	89fb      	ldrh	r3, [r7, #14]
 80013ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013ce:	81fb      	strh	r3, [r7, #14]
			break;
 80013d0:	e01d      	b.n	800140e <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 80013d2:	89fb      	ldrh	r3, [r7, #14]
 80013d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013d8:	81fb      	strh	r3, [r7, #14]
			break;
 80013da:	e018      	b.n	800140e <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 80013dc:	89fb      	ldrh	r3, [r7, #14]
 80013de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80013e2:	81fb      	strh	r3, [r7, #14]
			break;
 80013e4:	e013      	b.n	800140e <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 80013e6:	89fb      	ldrh	r3, [r7, #14]
 80013e8:	f043 0320 	orr.w	r3, r3, #32
 80013ec:	81fb      	strh	r3, [r7, #14]
			break;
 80013ee:	e00e      	b.n	800140e <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 80013f0:	89fb      	ldrh	r3, [r7, #14]
 80013f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013f6:	81fb      	strh	r3, [r7, #14]
			break;
 80013f8:	e009      	b.n	800140e <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 80013fa:	89fb      	ldrh	r3, [r7, #14]
 80013fc:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001400:	81fb      	strh	r3, [r7, #14]
			break;
 8001402:	e004      	b.n	800140e <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8001404:	89fb      	ldrh	r3, [r7, #14]
 8001406:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800140a:	81fb      	strh	r3, [r7, #14]
			break;
 800140c:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 800140e:	4b27      	ldr	r3, [pc, #156]	; (80014ac <LCD_Scan_Dir+0x1f4>)
 8001410:	889b      	ldrh	r3, [r3, #4]
 8001412:	f245 5210 	movw	r2, #21776	; 0x5510
 8001416:	4293      	cmp	r3, r2
 8001418:	d103      	bne.n	8001422 <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 800141a:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 800141e:	81bb      	strh	r3, [r7, #12]
 8001420:	e001      	b.n	8001426 <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 8001422:	2336      	movs	r3, #54	; 0x36
 8001424:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 8001426:	4b21      	ldr	r3, [pc, #132]	; (80014ac <LCD_Scan_Dir+0x1f4>)
 8001428:	889b      	ldrh	r3, [r3, #4]
 800142a:	f245 3210 	movw	r2, #21264	; 0x5310
 800142e:	4293      	cmp	r3, r2
 8001430:	d00f      	beq.n	8001452 <LCD_Scan_Dir+0x19a>
 8001432:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <LCD_Scan_Dir+0x1f4>)
 8001434:	889b      	ldrh	r3, [r3, #4]
 8001436:	f245 5210 	movw	r2, #21776	; 0x5510
 800143a:	4293      	cmp	r3, r2
 800143c:	d009      	beq.n	8001452 <LCD_Scan_Dir+0x19a>
 800143e:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <LCD_Scan_Dir+0x1f4>)
 8001440:	889b      	ldrh	r3, [r3, #4]
 8001442:	f641 1263 	movw	r2, #6499	; 0x1963
 8001446:	4293      	cmp	r3, r2
 8001448:	d003      	beq.n	8001452 <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 800144a:	89fb      	ldrh	r3, [r7, #14]
 800144c:	f043 0308 	orr.w	r3, r3, #8
 8001450:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 8001452:	4b16      	ldr	r3, [pc, #88]	; (80014ac <LCD_Scan_Dir+0x1f4>)
 8001454:	889b      	ldrh	r3, [r3, #4]
 8001456:	f646 0204 	movw	r2, #26628	; 0x6804
 800145a:	4293      	cmp	r3, r2
 800145c:	d103      	bne.n	8001466 <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 800145e:	89fb      	ldrh	r3, [r7, #14]
 8001460:	f043 0302 	orr.w	r3, r3, #2
 8001464:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8001466:	89fa      	ldrh	r2, [r7, #14]
 8001468:	89bb      	ldrh	r3, [r7, #12]
 800146a:	4611      	mov	r1, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fc11 	bl	8000c94 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <LCD_Scan_Dir+0x1f4>)
 8001474:	889b      	ldrh	r3, [r3, #4]
 8001476:	f641 1263 	movw	r2, #6499	; 0x1963
 800147a:	4293      	cmp	r3, r2
 800147c:	d028      	beq.n	80014d0 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 800147e:	89fb      	ldrh	r3, [r7, #14]
 8001480:	f003 0320 	and.w	r3, r3, #32
 8001484:	2b00      	cmp	r3, #0
 8001486:	d013      	beq.n	80014b0 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <LCD_Scan_Dir+0x1f4>)
 800148a:	881a      	ldrh	r2, [r3, #0]
 800148c:	4b07      	ldr	r3, [pc, #28]	; (80014ac <LCD_Scan_Dir+0x1f4>)
 800148e:	885b      	ldrh	r3, [r3, #2]
 8001490:	429a      	cmp	r2, r3
 8001492:	d21d      	bcs.n	80014d0 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <LCD_Scan_Dir+0x1f4>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 800149a:	4b04      	ldr	r3, [pc, #16]	; (80014ac <LCD_Scan_Dir+0x1f4>)
 800149c:	885a      	ldrh	r2, [r3, #2]
 800149e:	4b03      	ldr	r3, [pc, #12]	; (80014ac <LCD_Scan_Dir+0x1f4>)
 80014a0:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 80014a2:	4a02      	ldr	r2, [pc, #8]	; (80014ac <LCD_Scan_Dir+0x1f4>)
 80014a4:	897b      	ldrh	r3, [r7, #10]
 80014a6:	8053      	strh	r3, [r2, #2]
 80014a8:	e012      	b.n	80014d0 <LCD_Scan_Dir+0x218>
 80014aa:	bf00      	nop
 80014ac:	200005d4 	.word	0x200005d4
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 80014b0:	4b7f      	ldr	r3, [pc, #508]	; (80016b0 <LCD_Scan_Dir+0x3f8>)
 80014b2:	881a      	ldrh	r2, [r3, #0]
 80014b4:	4b7e      	ldr	r3, [pc, #504]	; (80016b0 <LCD_Scan_Dir+0x3f8>)
 80014b6:	885b      	ldrh	r3, [r3, #2]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d909      	bls.n	80014d0 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 80014bc:	4b7c      	ldr	r3, [pc, #496]	; (80016b0 <LCD_Scan_Dir+0x3f8>)
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 80014c2:	4b7b      	ldr	r3, [pc, #492]	; (80016b0 <LCD_Scan_Dir+0x3f8>)
 80014c4:	885a      	ldrh	r2, [r3, #2]
 80014c6:	4b7a      	ldr	r3, [pc, #488]	; (80016b0 <LCD_Scan_Dir+0x3f8>)
 80014c8:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 80014ca:	4a79      	ldr	r2, [pc, #484]	; (80016b0 <LCD_Scan_Dir+0x3f8>)
 80014cc:	897b      	ldrh	r3, [r7, #10]
 80014ce:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 80014d0:	4b77      	ldr	r3, [pc, #476]	; (80016b0 <LCD_Scan_Dir+0x3f8>)
 80014d2:	889b      	ldrh	r3, [r3, #4]
 80014d4:	f245 5210 	movw	r2, #21776	; 0x5510
 80014d8:	4293      	cmp	r3, r2
 80014da:	f040 80ef 	bne.w	80016bc <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 80014de:	4b74      	ldr	r3, [pc, #464]	; (80016b0 <LCD_Scan_Dir+0x3f8>)
 80014e0:	895b      	ldrh	r3, [r3, #10]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff fb4a 	bl	8000b7c <LCD_WR_REG>
			LCD_WR_DATA(0);
 80014e8:	4b72      	ldr	r3, [pc, #456]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 80014ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ee:	611a      	str	r2, [r3, #16]
 80014f0:	4b70      	ldr	r3, [pc, #448]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 80014f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014f6:	615a      	str	r2, [r3, #20]
 80014f8:	4b6f      	ldr	r3, [pc, #444]	; (80016b8 <LCD_Scan_Dir+0x400>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	4b6d      	ldr	r3, [pc, #436]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 8001500:	2280      	movs	r2, #128	; 0x80
 8001502:	615a      	str	r2, [r3, #20]
 8001504:	4b6b      	ldr	r3, [pc, #428]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 8001506:	2280      	movs	r2, #128	; 0x80
 8001508:	611a      	str	r2, [r3, #16]
 800150a:	4b6a      	ldr	r3, [pc, #424]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 800150c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001510:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 8001512:	4b67      	ldr	r3, [pc, #412]	; (80016b0 <LCD_Scan_Dir+0x3f8>)
 8001514:	895b      	ldrh	r3, [r3, #10]
 8001516:	3301      	adds	r3, #1
 8001518:	b29b      	uxth	r3, r3
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fb2e 	bl	8000b7c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001520:	4b64      	ldr	r3, [pc, #400]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 8001522:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001526:	611a      	str	r2, [r3, #16]
 8001528:	4b62      	ldr	r3, [pc, #392]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 800152a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800152e:	615a      	str	r2, [r3, #20]
 8001530:	4b61      	ldr	r3, [pc, #388]	; (80016b8 <LCD_Scan_Dir+0x400>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	4b5f      	ldr	r3, [pc, #380]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 8001538:	2280      	movs	r2, #128	; 0x80
 800153a:	615a      	str	r2, [r3, #20]
 800153c:	4b5d      	ldr	r3, [pc, #372]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 800153e:	2280      	movs	r2, #128	; 0x80
 8001540:	611a      	str	r2, [r3, #16]
 8001542:	4b5c      	ldr	r3, [pc, #368]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 8001544:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001548:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 800154a:	4b59      	ldr	r3, [pc, #356]	; (80016b0 <LCD_Scan_Dir+0x3f8>)
 800154c:	895b      	ldrh	r3, [r3, #10]
 800154e:	3302      	adds	r3, #2
 8001550:	b29b      	uxth	r3, r3
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fb12 	bl	8000b7c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001558:	4b56      	ldr	r3, [pc, #344]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 800155a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800155e:	611a      	str	r2, [r3, #16]
 8001560:	4b54      	ldr	r3, [pc, #336]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 8001562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001566:	615a      	str	r2, [r3, #20]
 8001568:	4b51      	ldr	r3, [pc, #324]	; (80016b0 <LCD_Scan_Dir+0x3f8>)
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	3b01      	subs	r3, #1
 800156e:	121a      	asrs	r2, r3, #8
 8001570:	4b51      	ldr	r3, [pc, #324]	; (80016b8 <LCD_Scan_Dir+0x400>)
 8001572:	60da      	str	r2, [r3, #12]
 8001574:	4b4f      	ldr	r3, [pc, #316]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 8001576:	2280      	movs	r2, #128	; 0x80
 8001578:	615a      	str	r2, [r3, #20]
 800157a:	4b4e      	ldr	r3, [pc, #312]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 800157c:	2280      	movs	r2, #128	; 0x80
 800157e:	611a      	str	r2, [r3, #16]
 8001580:	4b4c      	ldr	r3, [pc, #304]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 8001582:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001586:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 8001588:	4b49      	ldr	r3, [pc, #292]	; (80016b0 <LCD_Scan_Dir+0x3f8>)
 800158a:	895b      	ldrh	r3, [r3, #10]
 800158c:	3303      	adds	r3, #3
 800158e:	b29b      	uxth	r3, r3
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff faf3 	bl	8000b7c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8001596:	4b47      	ldr	r3, [pc, #284]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 8001598:	f44f 7280 	mov.w	r2, #256	; 0x100
 800159c:	611a      	str	r2, [r3, #16]
 800159e:	4b45      	ldr	r3, [pc, #276]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 80015a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015a4:	615a      	str	r2, [r3, #20]
 80015a6:	4b42      	ldr	r3, [pc, #264]	; (80016b0 <LCD_Scan_Dir+0x3f8>)
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	4a42      	ldr	r2, [pc, #264]	; (80016b8 <LCD_Scan_Dir+0x400>)
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	60d3      	str	r3, [r2, #12]
 80015b2:	4b40      	ldr	r3, [pc, #256]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 80015b4:	2280      	movs	r2, #128	; 0x80
 80015b6:	615a      	str	r2, [r3, #20]
 80015b8:	4b3e      	ldr	r3, [pc, #248]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 80015ba:	2280      	movs	r2, #128	; 0x80
 80015bc:	611a      	str	r2, [r3, #16]
 80015be:	4b3d      	ldr	r3, [pc, #244]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 80015c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c4:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 80015c6:	4b3a      	ldr	r3, [pc, #232]	; (80016b0 <LCD_Scan_Dir+0x3f8>)
 80015c8:	899b      	ldrh	r3, [r3, #12]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fad6 	bl	8000b7c <LCD_WR_REG>
			LCD_WR_DATA(0);
 80015d0:	4b38      	ldr	r3, [pc, #224]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 80015d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015d6:	611a      	str	r2, [r3, #16]
 80015d8:	4b36      	ldr	r3, [pc, #216]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 80015da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015de:	615a      	str	r2, [r3, #20]
 80015e0:	4b35      	ldr	r3, [pc, #212]	; (80016b8 <LCD_Scan_Dir+0x400>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	4b33      	ldr	r3, [pc, #204]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 80015e8:	2280      	movs	r2, #128	; 0x80
 80015ea:	615a      	str	r2, [r3, #20]
 80015ec:	4b31      	ldr	r3, [pc, #196]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 80015ee:	2280      	movs	r2, #128	; 0x80
 80015f0:	611a      	str	r2, [r3, #16]
 80015f2:	4b30      	ldr	r3, [pc, #192]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 80015f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f8:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 80015fa:	4b2d      	ldr	r3, [pc, #180]	; (80016b0 <LCD_Scan_Dir+0x3f8>)
 80015fc:	899b      	ldrh	r3, [r3, #12]
 80015fe:	3301      	adds	r3, #1
 8001600:	b29b      	uxth	r3, r3
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff faba 	bl	8000b7c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001608:	4b2a      	ldr	r3, [pc, #168]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 800160a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800160e:	611a      	str	r2, [r3, #16]
 8001610:	4b28      	ldr	r3, [pc, #160]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 8001612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001616:	615a      	str	r2, [r3, #20]
 8001618:	4b27      	ldr	r3, [pc, #156]	; (80016b8 <LCD_Scan_Dir+0x400>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	4b25      	ldr	r3, [pc, #148]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 8001620:	2280      	movs	r2, #128	; 0x80
 8001622:	615a      	str	r2, [r3, #20]
 8001624:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 8001626:	2280      	movs	r2, #128	; 0x80
 8001628:	611a      	str	r2, [r3, #16]
 800162a:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 800162c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001630:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 8001632:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <LCD_Scan_Dir+0x3f8>)
 8001634:	899b      	ldrh	r3, [r3, #12]
 8001636:	3302      	adds	r3, #2
 8001638:	b29b      	uxth	r3, r3
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fa9e 	bl	8000b7c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001640:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 8001642:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001646:	611a      	str	r2, [r3, #16]
 8001648:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 800164a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800164e:	615a      	str	r2, [r3, #20]
 8001650:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <LCD_Scan_Dir+0x3f8>)
 8001652:	885b      	ldrh	r3, [r3, #2]
 8001654:	3b01      	subs	r3, #1
 8001656:	121a      	asrs	r2, r3, #8
 8001658:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <LCD_Scan_Dir+0x400>)
 800165a:	60da      	str	r2, [r3, #12]
 800165c:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 800165e:	2280      	movs	r2, #128	; 0x80
 8001660:	615a      	str	r2, [r3, #20]
 8001662:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 8001664:	2280      	movs	r2, #128	; 0x80
 8001666:	611a      	str	r2, [r3, #16]
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 800166a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800166e:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <LCD_Scan_Dir+0x3f8>)
 8001672:	899b      	ldrh	r3, [r3, #12]
 8001674:	3303      	adds	r3, #3
 8001676:	b29b      	uxth	r3, r3
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fa7f 	bl	8000b7c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 800167e:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 8001680:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001684:	611a      	str	r2, [r3, #16]
 8001686:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 8001688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800168c:	615a      	str	r2, [r3, #20]
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <LCD_Scan_Dir+0x3f8>)
 8001690:	885b      	ldrh	r3, [r3, #2]
 8001692:	3b01      	subs	r3, #1
 8001694:	4a08      	ldr	r2, [pc, #32]	; (80016b8 <LCD_Scan_Dir+0x400>)
 8001696:	b2db      	uxtb	r3, r3
 8001698:	60d3      	str	r3, [r2, #12]
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 800169c:	2280      	movs	r2, #128	; 0x80
 800169e:	615a      	str	r2, [r3, #20]
 80016a0:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	611a      	str	r2, [r3, #16]
 80016a6:	4b03      	ldr	r3, [pc, #12]	; (80016b4 <LCD_Scan_Dir+0x3fc>)
 80016a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ac:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 80016ae:	e10a      	b.n	80018c6 <LCD_Scan_Dir+0x60e>
 80016b0:	200005d4 	.word	0x200005d4
 80016b4:	40011000 	.word	0x40011000
 80016b8:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 80016bc:	4b84      	ldr	r3, [pc, #528]	; (80018d0 <LCD_Scan_Dir+0x618>)
 80016be:	895b      	ldrh	r3, [r3, #10]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fa5b 	bl	8000b7c <LCD_WR_REG>
			LCD_WR_DATA(0);
 80016c6:	4b83      	ldr	r3, [pc, #524]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 80016c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016cc:	611a      	str	r2, [r3, #16]
 80016ce:	4b81      	ldr	r3, [pc, #516]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 80016d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016d4:	615a      	str	r2, [r3, #20]
 80016d6:	4b80      	ldr	r3, [pc, #512]	; (80018d8 <LCD_Scan_Dir+0x620>)
 80016d8:	2200      	movs	r2, #0
 80016da:	60da      	str	r2, [r3, #12]
 80016dc:	4b7d      	ldr	r3, [pc, #500]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 80016de:	2280      	movs	r2, #128	; 0x80
 80016e0:	615a      	str	r2, [r3, #20]
 80016e2:	4b7c      	ldr	r3, [pc, #496]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 80016e4:	2280      	movs	r2, #128	; 0x80
 80016e6:	611a      	str	r2, [r3, #16]
 80016e8:	4b7a      	ldr	r3, [pc, #488]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 80016ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ee:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80016f0:	4b78      	ldr	r3, [pc, #480]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 80016f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016f6:	611a      	str	r2, [r3, #16]
 80016f8:	4b76      	ldr	r3, [pc, #472]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 80016fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016fe:	615a      	str	r2, [r3, #20]
 8001700:	4b75      	ldr	r3, [pc, #468]	; (80018d8 <LCD_Scan_Dir+0x620>)
 8001702:	2200      	movs	r2, #0
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	4b73      	ldr	r3, [pc, #460]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 8001708:	2280      	movs	r2, #128	; 0x80
 800170a:	615a      	str	r2, [r3, #20]
 800170c:	4b71      	ldr	r3, [pc, #452]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 800170e:	2280      	movs	r2, #128	; 0x80
 8001710:	611a      	str	r2, [r3, #16]
 8001712:	4b70      	ldr	r3, [pc, #448]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 8001714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001718:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 800171a:	4b6e      	ldr	r3, [pc, #440]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 800171c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001720:	611a      	str	r2, [r3, #16]
 8001722:	4b6c      	ldr	r3, [pc, #432]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 8001724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001728:	615a      	str	r2, [r3, #20]
 800172a:	4b69      	ldr	r3, [pc, #420]	; (80018d0 <LCD_Scan_Dir+0x618>)
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	3b01      	subs	r3, #1
 8001730:	121a      	asrs	r2, r3, #8
 8001732:	4b69      	ldr	r3, [pc, #420]	; (80018d8 <LCD_Scan_Dir+0x620>)
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	4b67      	ldr	r3, [pc, #412]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 8001738:	2280      	movs	r2, #128	; 0x80
 800173a:	615a      	str	r2, [r3, #20]
 800173c:	4b65      	ldr	r3, [pc, #404]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 800173e:	2280      	movs	r2, #128	; 0x80
 8001740:	611a      	str	r2, [r3, #16]
 8001742:	4b64      	ldr	r3, [pc, #400]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 8001744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001748:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800174a:	4b62      	ldr	r3, [pc, #392]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 800174c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001750:	611a      	str	r2, [r3, #16]
 8001752:	4b60      	ldr	r3, [pc, #384]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 8001754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001758:	615a      	str	r2, [r3, #20]
 800175a:	4b5d      	ldr	r3, [pc, #372]	; (80018d0 <LCD_Scan_Dir+0x618>)
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	3b01      	subs	r3, #1
 8001760:	4a5d      	ldr	r2, [pc, #372]	; (80018d8 <LCD_Scan_Dir+0x620>)
 8001762:	b2db      	uxtb	r3, r3
 8001764:	60d3      	str	r3, [r2, #12]
 8001766:	4b5b      	ldr	r3, [pc, #364]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 8001768:	2280      	movs	r2, #128	; 0x80
 800176a:	615a      	str	r2, [r3, #20]
 800176c:	4b59      	ldr	r3, [pc, #356]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 800176e:	2280      	movs	r2, #128	; 0x80
 8001770:	611a      	str	r2, [r3, #16]
 8001772:	4b58      	ldr	r3, [pc, #352]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 8001774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001778:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 800177a:	4b55      	ldr	r3, [pc, #340]	; (80018d0 <LCD_Scan_Dir+0x618>)
 800177c:	899b      	ldrh	r3, [r3, #12]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff f9fc 	bl	8000b7c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001784:	4b53      	ldr	r3, [pc, #332]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 8001786:	f44f 7280 	mov.w	r2, #256	; 0x100
 800178a:	611a      	str	r2, [r3, #16]
 800178c:	4b51      	ldr	r3, [pc, #324]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 800178e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001792:	615a      	str	r2, [r3, #20]
 8001794:	4b50      	ldr	r3, [pc, #320]	; (80018d8 <LCD_Scan_Dir+0x620>)
 8001796:	2200      	movs	r2, #0
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	4b4e      	ldr	r3, [pc, #312]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 800179c:	2280      	movs	r2, #128	; 0x80
 800179e:	615a      	str	r2, [r3, #20]
 80017a0:	4b4c      	ldr	r3, [pc, #304]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 80017a2:	2280      	movs	r2, #128	; 0x80
 80017a4:	611a      	str	r2, [r3, #16]
 80017a6:	4b4b      	ldr	r3, [pc, #300]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 80017a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ac:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80017ae:	4b49      	ldr	r3, [pc, #292]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 80017b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017b4:	611a      	str	r2, [r3, #16]
 80017b6:	4b47      	ldr	r3, [pc, #284]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 80017b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017bc:	615a      	str	r2, [r3, #20]
 80017be:	4b46      	ldr	r3, [pc, #280]	; (80018d8 <LCD_Scan_Dir+0x620>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	60da      	str	r2, [r3, #12]
 80017c4:	4b43      	ldr	r3, [pc, #268]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 80017c6:	2280      	movs	r2, #128	; 0x80
 80017c8:	615a      	str	r2, [r3, #20]
 80017ca:	4b42      	ldr	r3, [pc, #264]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 80017cc:	2280      	movs	r2, #128	; 0x80
 80017ce:	611a      	str	r2, [r3, #16]
 80017d0:	4b40      	ldr	r3, [pc, #256]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 80017d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017d6:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 80017d8:	4b3e      	ldr	r3, [pc, #248]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 80017da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017de:	611a      	str	r2, [r3, #16]
 80017e0:	4b3c      	ldr	r3, [pc, #240]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 80017e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e6:	615a      	str	r2, [r3, #20]
 80017e8:	4b39      	ldr	r3, [pc, #228]	; (80018d0 <LCD_Scan_Dir+0x618>)
 80017ea:	885b      	ldrh	r3, [r3, #2]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	121a      	asrs	r2, r3, #8
 80017f0:	4b39      	ldr	r3, [pc, #228]	; (80018d8 <LCD_Scan_Dir+0x620>)
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	4b37      	ldr	r3, [pc, #220]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 80017f6:	2280      	movs	r2, #128	; 0x80
 80017f8:	615a      	str	r2, [r3, #20]
 80017fa:	4b36      	ldr	r3, [pc, #216]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 80017fc:	2280      	movs	r2, #128	; 0x80
 80017fe:	611a      	str	r2, [r3, #16]
 8001800:	4b34      	ldr	r3, [pc, #208]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 8001802:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001806:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001808:	4b32      	ldr	r3, [pc, #200]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 800180a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800180e:	611a      	str	r2, [r3, #16]
 8001810:	4b30      	ldr	r3, [pc, #192]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 8001812:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001816:	615a      	str	r2, [r3, #20]
 8001818:	4b2d      	ldr	r3, [pc, #180]	; (80018d0 <LCD_Scan_Dir+0x618>)
 800181a:	885b      	ldrh	r3, [r3, #2]
 800181c:	3b01      	subs	r3, #1
 800181e:	4a2e      	ldr	r2, [pc, #184]	; (80018d8 <LCD_Scan_Dir+0x620>)
 8001820:	b2db      	uxtb	r3, r3
 8001822:	60d3      	str	r3, [r2, #12]
 8001824:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 8001826:	2280      	movs	r2, #128	; 0x80
 8001828:	615a      	str	r2, [r3, #20]
 800182a:	4b2a      	ldr	r3, [pc, #168]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 800182c:	2280      	movs	r2, #128	; 0x80
 800182e:	611a      	str	r2, [r3, #16]
 8001830:	4b28      	ldr	r3, [pc, #160]	; (80018d4 <LCD_Scan_Dir+0x61c>)
 8001832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001836:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8001838:	e045      	b.n	80018c6 <LCD_Scan_Dir+0x60e>
		}
	} else {
		switch (dir) {
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	2b07      	cmp	r3, #7
 800183e:	d836      	bhi.n	80018ae <LCD_Scan_Dir+0x5f6>
 8001840:	a201      	add	r2, pc, #4	; (adr r2, 8001848 <LCD_Scan_Dir+0x590>)
 8001842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001846:	bf00      	nop
 8001848:	08001869 	.word	0x08001869
 800184c:	08001873 	.word	0x08001873
 8001850:	0800187d 	.word	0x0800187d
 8001854:	080018af 	.word	0x080018af
 8001858:	08001887 	.word	0x08001887
 800185c:	08001891 	.word	0x08001891
 8001860:	0800189b 	.word	0x0800189b
 8001864:	080018a5 	.word	0x080018a5
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 8001868:	89fb      	ldrh	r3, [r7, #14]
 800186a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800186e:	81fb      	strh	r3, [r7, #14]
			break;
 8001870:	e01d      	b.n	80018ae <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 8001872:	89fb      	ldrh	r3, [r7, #14]
 8001874:	f043 0310 	orr.w	r3, r3, #16
 8001878:	81fb      	strh	r3, [r7, #14]
			break;
 800187a:	e018      	b.n	80018ae <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 800187c:	89fb      	ldrh	r3, [r7, #14]
 800187e:	f043 0320 	orr.w	r3, r3, #32
 8001882:	81fb      	strh	r3, [r7, #14]
			break;
 8001884:	e013      	b.n	80018ae <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 8001886:	89fb      	ldrh	r3, [r7, #14]
 8001888:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800188c:	81fb      	strh	r3, [r7, #14]
			break;
 800188e:	e00e      	b.n	80018ae <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 8001890:	89fb      	ldrh	r3, [r7, #14]
 8001892:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001896:	81fb      	strh	r3, [r7, #14]
			break;
 8001898:	e009      	b.n	80018ae <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 800189a:	89fb      	ldrh	r3, [r7, #14]
 800189c:	f043 0318 	orr.w	r3, r3, #24
 80018a0:	81fb      	strh	r3, [r7, #14]
			break;
 80018a2:	e004      	b.n	80018ae <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 80018a4:	89fb      	ldrh	r3, [r7, #14]
 80018a6:	f043 0308 	orr.w	r3, r3, #8
 80018aa:	81fb      	strh	r3, [r7, #14]
			break;
 80018ac:	bf00      	nop
		}
		dirreg = 0X03;
 80018ae:	2303      	movs	r3, #3
 80018b0:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 80018b2:	89fb      	ldrh	r3, [r7, #14]
 80018b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018b8:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 80018ba:	89fa      	ldrh	r2, [r7, #14]
 80018bc:	89bb      	ldrh	r3, [r7, #12]
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff f9e7 	bl	8000c94 <LCD_WriteReg>
	}
}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200005d4 	.word	0x200005d4
 80018d4:	40011000 	.word	0x40011000
 80018d8:	40010c00 	.word	0x40010c00

080018dc <LCD_Fast_DrawPoint>:
	LCD_WriteRAM_Prepare();
	LCD_WR_DATA(POINT_COLOR); //POINT_COLOR: Color of this point
}
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	80fb      	strh	r3, [r7, #6]
 80018e6:	460b      	mov	r3, r1
 80018e8:	80bb      	strh	r3, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	807b      	strh	r3, [r7, #2]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 80018ee:	4b75      	ldr	r3, [pc, #468]	; (8001ac4 <LCD_Fast_DrawPoint+0x1e8>)
 80018f0:	889b      	ldrh	r3, [r3, #4]
 80018f2:	f249 3241 	movw	r2, #37697	; 0x9341
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d005      	beq.n	8001906 <LCD_Fast_DrawPoint+0x2a>
 80018fa:	4b72      	ldr	r3, [pc, #456]	; (8001ac4 <LCD_Fast_DrawPoint+0x1e8>)
 80018fc:	889b      	ldrh	r3, [r3, #4]
 80018fe:	f245 3210 	movw	r2, #21264	; 0x5310
 8001902:	4293      	cmp	r3, r2
 8001904:	d164      	bne.n	80019d0 <LCD_Fast_DrawPoint+0xf4>
		LCD_WR_REG(lcddev.setxcmd);
 8001906:	4b6f      	ldr	r3, [pc, #444]	; (8001ac4 <LCD_Fast_DrawPoint+0x1e8>)
 8001908:	895b      	ldrh	r3, [r3, #10]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff f936 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001910:	4b6d      	ldr	r3, [pc, #436]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 8001912:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001916:	611a      	str	r2, [r3, #16]
 8001918:	4b6b      	ldr	r3, [pc, #428]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 800191a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800191e:	615a      	str	r2, [r3, #20]
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	0a1b      	lsrs	r3, r3, #8
 8001924:	b29a      	uxth	r2, r3
 8001926:	4b69      	ldr	r3, [pc, #420]	; (8001acc <LCD_Fast_DrawPoint+0x1f0>)
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	4b67      	ldr	r3, [pc, #412]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 800192c:	2280      	movs	r2, #128	; 0x80
 800192e:	615a      	str	r2, [r3, #20]
 8001930:	4b65      	ldr	r3, [pc, #404]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 8001932:	2280      	movs	r2, #128	; 0x80
 8001934:	611a      	str	r2, [r3, #16]
 8001936:	4b64      	ldr	r3, [pc, #400]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 8001938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800193c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 800193e:	4b62      	ldr	r3, [pc, #392]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 8001940:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001944:	611a      	str	r2, [r3, #16]
 8001946:	4b60      	ldr	r3, [pc, #384]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 8001948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800194c:	615a      	str	r2, [r3, #20]
 800194e:	88fb      	ldrh	r3, [r7, #6]
 8001950:	4a5e      	ldr	r2, [pc, #376]	; (8001acc <LCD_Fast_DrawPoint+0x1f0>)
 8001952:	b2db      	uxtb	r3, r3
 8001954:	60d3      	str	r3, [r2, #12]
 8001956:	4b5c      	ldr	r3, [pc, #368]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 8001958:	2280      	movs	r2, #128	; 0x80
 800195a:	615a      	str	r2, [r3, #20]
 800195c:	4b5a      	ldr	r3, [pc, #360]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 800195e:	2280      	movs	r2, #128	; 0x80
 8001960:	611a      	str	r2, [r3, #16]
 8001962:	4b59      	ldr	r3, [pc, #356]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 8001964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001968:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800196a:	4b56      	ldr	r3, [pc, #344]	; (8001ac4 <LCD_Fast_DrawPoint+0x1e8>)
 800196c:	899b      	ldrh	r3, [r3, #12]
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff f904 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001974:	4b54      	ldr	r3, [pc, #336]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 8001976:	f44f 7280 	mov.w	r2, #256	; 0x100
 800197a:	611a      	str	r2, [r3, #16]
 800197c:	4b52      	ldr	r3, [pc, #328]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 800197e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001982:	615a      	str	r2, [r3, #20]
 8001984:	88bb      	ldrh	r3, [r7, #4]
 8001986:	0a1b      	lsrs	r3, r3, #8
 8001988:	b29a      	uxth	r2, r3
 800198a:	4b50      	ldr	r3, [pc, #320]	; (8001acc <LCD_Fast_DrawPoint+0x1f0>)
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	4b4e      	ldr	r3, [pc, #312]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 8001990:	2280      	movs	r2, #128	; 0x80
 8001992:	615a      	str	r2, [r3, #20]
 8001994:	4b4c      	ldr	r3, [pc, #304]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 8001996:	2280      	movs	r2, #128	; 0x80
 8001998:	611a      	str	r2, [r3, #16]
 800199a:	4b4b      	ldr	r3, [pc, #300]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 800199c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019a0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 80019a2:	4b49      	ldr	r3, [pc, #292]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 80019a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019a8:	611a      	str	r2, [r3, #16]
 80019aa:	4b47      	ldr	r3, [pc, #284]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 80019ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019b0:	615a      	str	r2, [r3, #20]
 80019b2:	88bb      	ldrh	r3, [r7, #4]
 80019b4:	4a45      	ldr	r2, [pc, #276]	; (8001acc <LCD_Fast_DrawPoint+0x1f0>)
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	60d3      	str	r3, [r2, #12]
 80019ba:	4b43      	ldr	r3, [pc, #268]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 80019bc:	2280      	movs	r2, #128	; 0x80
 80019be:	615a      	str	r2, [r3, #20]
 80019c0:	4b41      	ldr	r3, [pc, #260]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 80019c2:	2280      	movs	r2, #128	; 0x80
 80019c4:	611a      	str	r2, [r3, #16]
 80019c6:	4b40      	ldr	r3, [pc, #256]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 80019c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019cc:	611a      	str	r2, [r3, #16]
 80019ce:	e1e6      	b.n	8001d9e <LCD_Fast_DrawPoint+0x4c2>
	} else if (lcddev.id == 0X5510) {
 80019d0:	4b3c      	ldr	r3, [pc, #240]	; (8001ac4 <LCD_Fast_DrawPoint+0x1e8>)
 80019d2:	889b      	ldrh	r3, [r3, #4]
 80019d4:	f245 5210 	movw	r2, #21776	; 0x5510
 80019d8:	4293      	cmp	r3, r2
 80019da:	d179      	bne.n	8001ad0 <LCD_Fast_DrawPoint+0x1f4>
		LCD_WR_REG(lcddev.setxcmd);
 80019dc:	4b39      	ldr	r3, [pc, #228]	; (8001ac4 <LCD_Fast_DrawPoint+0x1e8>)
 80019de:	895b      	ldrh	r3, [r3, #10]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff f8cb 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80019e6:	4b38      	ldr	r3, [pc, #224]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 80019e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019ec:	611a      	str	r2, [r3, #16]
 80019ee:	4b36      	ldr	r3, [pc, #216]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 80019f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019f4:	615a      	str	r2, [r3, #20]
 80019f6:	88fb      	ldrh	r3, [r7, #6]
 80019f8:	0a1b      	lsrs	r3, r3, #8
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	4b33      	ldr	r3, [pc, #204]	; (8001acc <LCD_Fast_DrawPoint+0x1f0>)
 80019fe:	60da      	str	r2, [r3, #12]
 8001a00:	4b31      	ldr	r3, [pc, #196]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 8001a02:	2280      	movs	r2, #128	; 0x80
 8001a04:	615a      	str	r2, [r3, #20]
 8001a06:	4b30      	ldr	r3, [pc, #192]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 8001a08:	2280      	movs	r2, #128	; 0x80
 8001a0a:	611a      	str	r2, [r3, #16]
 8001a0c:	4b2e      	ldr	r3, [pc, #184]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 8001a0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a12:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8001a14:	4b2b      	ldr	r3, [pc, #172]	; (8001ac4 <LCD_Fast_DrawPoint+0x1e8>)
 8001a16:	895b      	ldrh	r3, [r3, #10]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff f8ad 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATA(x & 0XFF);
 8001a22:	4b29      	ldr	r3, [pc, #164]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 8001a24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a28:	611a      	str	r2, [r3, #16]
 8001a2a:	4b27      	ldr	r3, [pc, #156]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 8001a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a30:	615a      	str	r2, [r3, #20]
 8001a32:	88fb      	ldrh	r3, [r7, #6]
 8001a34:	4a25      	ldr	r2, [pc, #148]	; (8001acc <LCD_Fast_DrawPoint+0x1f0>)
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	60d3      	str	r3, [r2, #12]
 8001a3a:	4b23      	ldr	r3, [pc, #140]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 8001a3c:	2280      	movs	r2, #128	; 0x80
 8001a3e:	615a      	str	r2, [r3, #20]
 8001a40:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 8001a42:	2280      	movs	r2, #128	; 0x80
 8001a44:	611a      	str	r2, [r3, #16]
 8001a46:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 8001a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a4c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001a4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <LCD_Fast_DrawPoint+0x1e8>)
 8001a50:	899b      	ldrh	r3, [r3, #12]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff f892 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001a58:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 8001a5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a5e:	611a      	str	r2, [r3, #16]
 8001a60:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 8001a62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a66:	615a      	str	r2, [r3, #20]
 8001a68:	88bb      	ldrh	r3, [r7, #4]
 8001a6a:	0a1b      	lsrs	r3, r3, #8
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <LCD_Fast_DrawPoint+0x1f0>)
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 8001a74:	2280      	movs	r2, #128	; 0x80
 8001a76:	615a      	str	r2, [r3, #20]
 8001a78:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 8001a7a:	2280      	movs	r2, #128	; 0x80
 8001a7c:	611a      	str	r2, [r3, #16]
 8001a7e:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 8001a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a84:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8001a86:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <LCD_Fast_DrawPoint+0x1e8>)
 8001a88:	899b      	ldrh	r3, [r3, #12]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff f874 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATA(y & 0XFF);
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 8001a96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a9a:	611a      	str	r2, [r3, #16]
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 8001a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aa2:	615a      	str	r2, [r3, #20]
 8001aa4:	88bb      	ldrh	r3, [r7, #4]
 8001aa6:	4a09      	ldr	r2, [pc, #36]	; (8001acc <LCD_Fast_DrawPoint+0x1f0>)
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	60d3      	str	r3, [r2, #12]
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 8001aae:	2280      	movs	r2, #128	; 0x80
 8001ab0:	615a      	str	r2, [r3, #20]
 8001ab2:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 8001ab4:	2280      	movs	r2, #128	; 0x80
 8001ab6:	611a      	str	r2, [r3, #16]
 8001ab8:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <LCD_Fast_DrawPoint+0x1ec>)
 8001aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001abe:	611a      	str	r2, [r3, #16]
 8001ac0:	e16d      	b.n	8001d9e <LCD_Fast_DrawPoint+0x4c2>
 8001ac2:	bf00      	nop
 8001ac4:	200005d4 	.word	0x200005d4
 8001ac8:	40011000 	.word	0x40011000
 8001acc:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8001ad0:	4b68      	ldr	r3, [pc, #416]	; (8001c74 <LCD_Fast_DrawPoint+0x398>)
 8001ad2:	889b      	ldrh	r3, [r3, #4]
 8001ad4:	f641 1263 	movw	r2, #6499	; 0x1963
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	f040 80d1 	bne.w	8001c80 <LCD_Fast_DrawPoint+0x3a4>
		if (lcddev.dir == 0)
 8001ade:	4b65      	ldr	r3, [pc, #404]	; (8001c74 <LCD_Fast_DrawPoint+0x398>)
 8001ae0:	799b      	ldrb	r3, [r3, #6]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d106      	bne.n	8001af4 <LCD_Fast_DrawPoint+0x218>
			x = lcddev.width - 1 - x;
 8001ae6:	4b63      	ldr	r3, [pc, #396]	; (8001c74 <LCD_Fast_DrawPoint+0x398>)
 8001ae8:	881a      	ldrh	r2, [r3, #0]
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	3b01      	subs	r3, #1
 8001af2:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001af4:	4b5f      	ldr	r3, [pc, #380]	; (8001c74 <LCD_Fast_DrawPoint+0x398>)
 8001af6:	895b      	ldrh	r3, [r3, #10]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff f83f 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001afe:	4b5e      	ldr	r3, [pc, #376]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001b00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b04:	611a      	str	r2, [r3, #16]
 8001b06:	4b5c      	ldr	r3, [pc, #368]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001b08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b0c:	615a      	str	r2, [r3, #20]
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	0a1b      	lsrs	r3, r3, #8
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	4b59      	ldr	r3, [pc, #356]	; (8001c7c <LCD_Fast_DrawPoint+0x3a0>)
 8001b16:	60da      	str	r2, [r3, #12]
 8001b18:	4b57      	ldr	r3, [pc, #348]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001b1a:	2280      	movs	r2, #128	; 0x80
 8001b1c:	615a      	str	r2, [r3, #20]
 8001b1e:	4b56      	ldr	r3, [pc, #344]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001b20:	2280      	movs	r2, #128	; 0x80
 8001b22:	611a      	str	r2, [r3, #16]
 8001b24:	4b54      	ldr	r3, [pc, #336]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b2a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001b2c:	4b52      	ldr	r3, [pc, #328]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001b2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b32:	611a      	str	r2, [r3, #16]
 8001b34:	4b50      	ldr	r3, [pc, #320]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b3a:	615a      	str	r2, [r3, #20]
 8001b3c:	88fb      	ldrh	r3, [r7, #6]
 8001b3e:	4a4f      	ldr	r2, [pc, #316]	; (8001c7c <LCD_Fast_DrawPoint+0x3a0>)
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	60d3      	str	r3, [r2, #12]
 8001b44:	4b4c      	ldr	r3, [pc, #304]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001b46:	2280      	movs	r2, #128	; 0x80
 8001b48:	615a      	str	r2, [r3, #20]
 8001b4a:	4b4b      	ldr	r3, [pc, #300]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001b4c:	2280      	movs	r2, #128	; 0x80
 8001b4e:	611a      	str	r2, [r3, #16]
 8001b50:	4b49      	ldr	r3, [pc, #292]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b56:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x >> 8);
 8001b58:	4b47      	ldr	r3, [pc, #284]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001b5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b5e:	611a      	str	r2, [r3, #16]
 8001b60:	4b45      	ldr	r3, [pc, #276]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b66:	615a      	str	r2, [r3, #20]
 8001b68:	88fb      	ldrh	r3, [r7, #6]
 8001b6a:	0a1b      	lsrs	r3, r3, #8
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	4b43      	ldr	r3, [pc, #268]	; (8001c7c <LCD_Fast_DrawPoint+0x3a0>)
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	4b41      	ldr	r3, [pc, #260]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001b74:	2280      	movs	r2, #128	; 0x80
 8001b76:	615a      	str	r2, [r3, #20]
 8001b78:	4b3f      	ldr	r3, [pc, #252]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001b7a:	2280      	movs	r2, #128	; 0x80
 8001b7c:	611a      	str	r2, [r3, #16]
 8001b7e:	4b3e      	ldr	r3, [pc, #248]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b84:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001b86:	4b3c      	ldr	r3, [pc, #240]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001b88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b8c:	611a      	str	r2, [r3, #16]
 8001b8e:	4b3a      	ldr	r3, [pc, #232]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b94:	615a      	str	r2, [r3, #20]
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	4a38      	ldr	r2, [pc, #224]	; (8001c7c <LCD_Fast_DrawPoint+0x3a0>)
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	60d3      	str	r3, [r2, #12]
 8001b9e:	4b36      	ldr	r3, [pc, #216]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001ba0:	2280      	movs	r2, #128	; 0x80
 8001ba2:	615a      	str	r2, [r3, #20]
 8001ba4:	4b34      	ldr	r3, [pc, #208]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001ba6:	2280      	movs	r2, #128	; 0x80
 8001ba8:	611a      	str	r2, [r3, #16]
 8001baa:	4b33      	ldr	r3, [pc, #204]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb0:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001bb2:	4b30      	ldr	r3, [pc, #192]	; (8001c74 <LCD_Fast_DrawPoint+0x398>)
 8001bb4:	899b      	ldrh	r3, [r3, #12]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe ffe0 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001bbc:	4b2e      	ldr	r3, [pc, #184]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001bbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bc2:	611a      	str	r2, [r3, #16]
 8001bc4:	4b2c      	ldr	r3, [pc, #176]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001bc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bca:	615a      	str	r2, [r3, #20]
 8001bcc:	88bb      	ldrh	r3, [r7, #4]
 8001bce:	0a1b      	lsrs	r3, r3, #8
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	4b2a      	ldr	r3, [pc, #168]	; (8001c7c <LCD_Fast_DrawPoint+0x3a0>)
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	4b28      	ldr	r3, [pc, #160]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001bd8:	2280      	movs	r2, #128	; 0x80
 8001bda:	615a      	str	r2, [r3, #20]
 8001bdc:	4b26      	ldr	r3, [pc, #152]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001bde:	2280      	movs	r2, #128	; 0x80
 8001be0:	611a      	str	r2, [r3, #16]
 8001be2:	4b25      	ldr	r3, [pc, #148]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001bea:	4b23      	ldr	r3, [pc, #140]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001bec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bf0:	611a      	str	r2, [r3, #16]
 8001bf2:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bf8:	615a      	str	r2, [r3, #20]
 8001bfa:	88bb      	ldrh	r3, [r7, #4]
 8001bfc:	4a1f      	ldr	r2, [pc, #124]	; (8001c7c <LCD_Fast_DrawPoint+0x3a0>)
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	60d3      	str	r3, [r2, #12]
 8001c02:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001c04:	2280      	movs	r2, #128	; 0x80
 8001c06:	615a      	str	r2, [r3, #20]
 8001c08:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001c0a:	2280      	movs	r2, #128	; 0x80
 8001c0c:	611a      	str	r2, [r3, #16]
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001c10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c14:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y >> 8);
 8001c16:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001c18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c1c:	611a      	str	r2, [r3, #16]
 8001c1e:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001c20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c24:	615a      	str	r2, [r3, #20]
 8001c26:	88bb      	ldrh	r3, [r7, #4]
 8001c28:	0a1b      	lsrs	r3, r3, #8
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <LCD_Fast_DrawPoint+0x3a0>)
 8001c2e:	60da      	str	r2, [r3, #12]
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001c32:	2280      	movs	r2, #128	; 0x80
 8001c34:	615a      	str	r2, [r3, #20]
 8001c36:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001c38:	2280      	movs	r2, #128	; 0x80
 8001c3a:	611a      	str	r2, [r3, #16]
 8001c3c:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c42:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001c46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c4a:	611a      	str	r2, [r3, #16]
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001c4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c52:	615a      	str	r2, [r3, #20]
 8001c54:	88bb      	ldrh	r3, [r7, #4]
 8001c56:	4a09      	ldr	r2, [pc, #36]	; (8001c7c <LCD_Fast_DrawPoint+0x3a0>)
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	60d3      	str	r3, [r2, #12]
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001c5e:	2280      	movs	r2, #128	; 0x80
 8001c60:	615a      	str	r2, [r3, #20]
 8001c62:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001c64:	2280      	movs	r2, #128	; 0x80
 8001c66:	611a      	str	r2, [r3, #16]
 8001c68:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <LCD_Fast_DrawPoint+0x39c>)
 8001c6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c6e:	611a      	str	r2, [r3, #16]
 8001c70:	e095      	b.n	8001d9e <LCD_Fast_DrawPoint+0x4c2>
 8001c72:	bf00      	nop
 8001c74:	200005d4 	.word	0x200005d4
 8001c78:	40011000 	.word	0x40011000
 8001c7c:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X6804) {
 8001c80:	4b5e      	ldr	r3, [pc, #376]	; (8001dfc <LCD_Fast_DrawPoint+0x520>)
 8001c82:	889b      	ldrh	r3, [r3, #4]
 8001c84:	f646 0204 	movw	r2, #26628	; 0x6804
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d16f      	bne.n	8001d6c <LCD_Fast_DrawPoint+0x490>
		if (lcddev.dir == 1)
 8001c8c:	4b5b      	ldr	r3, [pc, #364]	; (8001dfc <LCD_Fast_DrawPoint+0x520>)
 8001c8e:	799b      	ldrb	r3, [r3, #6]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d106      	bne.n	8001ca2 <LCD_Fast_DrawPoint+0x3c6>
			x = lcddev.width - 1 - x;	//横屏时处理
 8001c94:	4b59      	ldr	r3, [pc, #356]	; (8001dfc <LCD_Fast_DrawPoint+0x520>)
 8001c96:	881a      	ldrh	r2, [r3, #0]
 8001c98:	88fb      	ldrh	r3, [r7, #6]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001ca2:	4b56      	ldr	r3, [pc, #344]	; (8001dfc <LCD_Fast_DrawPoint+0x520>)
 8001ca4:	895b      	ldrh	r3, [r3, #10]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe ff68 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001cac:	4b54      	ldr	r3, [pc, #336]	; (8001e00 <LCD_Fast_DrawPoint+0x524>)
 8001cae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cb2:	611a      	str	r2, [r3, #16]
 8001cb4:	4b52      	ldr	r3, [pc, #328]	; (8001e00 <LCD_Fast_DrawPoint+0x524>)
 8001cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cba:	615a      	str	r2, [r3, #20]
 8001cbc:	88fb      	ldrh	r3, [r7, #6]
 8001cbe:	0a1b      	lsrs	r3, r3, #8
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	4b50      	ldr	r3, [pc, #320]	; (8001e04 <LCD_Fast_DrawPoint+0x528>)
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	4b4e      	ldr	r3, [pc, #312]	; (8001e00 <LCD_Fast_DrawPoint+0x524>)
 8001cc8:	2280      	movs	r2, #128	; 0x80
 8001cca:	615a      	str	r2, [r3, #20]
 8001ccc:	4b4c      	ldr	r3, [pc, #304]	; (8001e00 <LCD_Fast_DrawPoint+0x524>)
 8001cce:	2280      	movs	r2, #128	; 0x80
 8001cd0:	611a      	str	r2, [r3, #16]
 8001cd2:	4b4b      	ldr	r3, [pc, #300]	; (8001e00 <LCD_Fast_DrawPoint+0x524>)
 8001cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001cda:	4b49      	ldr	r3, [pc, #292]	; (8001e00 <LCD_Fast_DrawPoint+0x524>)
 8001cdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ce0:	611a      	str	r2, [r3, #16]
 8001ce2:	4b47      	ldr	r3, [pc, #284]	; (8001e00 <LCD_Fast_DrawPoint+0x524>)
 8001ce4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ce8:	615a      	str	r2, [r3, #20]
 8001cea:	88fb      	ldrh	r3, [r7, #6]
 8001cec:	4a45      	ldr	r2, [pc, #276]	; (8001e04 <LCD_Fast_DrawPoint+0x528>)
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	60d3      	str	r3, [r2, #12]
 8001cf2:	4b43      	ldr	r3, [pc, #268]	; (8001e00 <LCD_Fast_DrawPoint+0x524>)
 8001cf4:	2280      	movs	r2, #128	; 0x80
 8001cf6:	615a      	str	r2, [r3, #20]
 8001cf8:	4b41      	ldr	r3, [pc, #260]	; (8001e00 <LCD_Fast_DrawPoint+0x524>)
 8001cfa:	2280      	movs	r2, #128	; 0x80
 8001cfc:	611a      	str	r2, [r3, #16]
 8001cfe:	4b40      	ldr	r3, [pc, #256]	; (8001e00 <LCD_Fast_DrawPoint+0x524>)
 8001d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d04:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001d06:	4b3d      	ldr	r3, [pc, #244]	; (8001dfc <LCD_Fast_DrawPoint+0x520>)
 8001d08:	899b      	ldrh	r3, [r3, #12]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe ff36 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001d10:	4b3b      	ldr	r3, [pc, #236]	; (8001e00 <LCD_Fast_DrawPoint+0x524>)
 8001d12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d16:	611a      	str	r2, [r3, #16]
 8001d18:	4b39      	ldr	r3, [pc, #228]	; (8001e00 <LCD_Fast_DrawPoint+0x524>)
 8001d1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d1e:	615a      	str	r2, [r3, #20]
 8001d20:	88bb      	ldrh	r3, [r7, #4]
 8001d22:	0a1b      	lsrs	r3, r3, #8
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	4b37      	ldr	r3, [pc, #220]	; (8001e04 <LCD_Fast_DrawPoint+0x528>)
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	4b35      	ldr	r3, [pc, #212]	; (8001e00 <LCD_Fast_DrawPoint+0x524>)
 8001d2c:	2280      	movs	r2, #128	; 0x80
 8001d2e:	615a      	str	r2, [r3, #20]
 8001d30:	4b33      	ldr	r3, [pc, #204]	; (8001e00 <LCD_Fast_DrawPoint+0x524>)
 8001d32:	2280      	movs	r2, #128	; 0x80
 8001d34:	611a      	str	r2, [r3, #16]
 8001d36:	4b32      	ldr	r3, [pc, #200]	; (8001e00 <LCD_Fast_DrawPoint+0x524>)
 8001d38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d3c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001d3e:	4b30      	ldr	r3, [pc, #192]	; (8001e00 <LCD_Fast_DrawPoint+0x524>)
 8001d40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d44:	611a      	str	r2, [r3, #16]
 8001d46:	4b2e      	ldr	r3, [pc, #184]	; (8001e00 <LCD_Fast_DrawPoint+0x524>)
 8001d48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d4c:	615a      	str	r2, [r3, #20]
 8001d4e:	88bb      	ldrh	r3, [r7, #4]
 8001d50:	4a2c      	ldr	r2, [pc, #176]	; (8001e04 <LCD_Fast_DrawPoint+0x528>)
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	60d3      	str	r3, [r2, #12]
 8001d56:	4b2a      	ldr	r3, [pc, #168]	; (8001e00 <LCD_Fast_DrawPoint+0x524>)
 8001d58:	2280      	movs	r2, #128	; 0x80
 8001d5a:	615a      	str	r2, [r3, #20]
 8001d5c:	4b28      	ldr	r3, [pc, #160]	; (8001e00 <LCD_Fast_DrawPoint+0x524>)
 8001d5e:	2280      	movs	r2, #128	; 0x80
 8001d60:	611a      	str	r2, [r3, #16]
 8001d62:	4b27      	ldr	r3, [pc, #156]	; (8001e00 <LCD_Fast_DrawPoint+0x524>)
 8001d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d68:	611a      	str	r2, [r3, #16]
 8001d6a:	e018      	b.n	8001d9e <LCD_Fast_DrawPoint+0x4c2>
	} else {
		if (lcddev.dir == 1)
 8001d6c:	4b23      	ldr	r3, [pc, #140]	; (8001dfc <LCD_Fast_DrawPoint+0x520>)
 8001d6e:	799b      	ldrb	r3, [r3, #6]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d106      	bne.n	8001d82 <LCD_Fast_DrawPoint+0x4a6>
			x = lcddev.width - 1 - x;	//横屏其实就是调转x,y坐标
 8001d74:	4b21      	ldr	r3, [pc, #132]	; (8001dfc <LCD_Fast_DrawPoint+0x520>)
 8001d76:	881a      	ldrh	r2, [r3, #0]
 8001d78:	88fb      	ldrh	r3, [r7, #6]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, x);
 8001d82:	4b1e      	ldr	r3, [pc, #120]	; (8001dfc <LCD_Fast_DrawPoint+0x520>)
 8001d84:	895b      	ldrh	r3, [r3, #10]
 8001d86:	88fa      	ldrh	r2, [r7, #6]
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe ff82 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, y);
 8001d90:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <LCD_Fast_DrawPoint+0x520>)
 8001d92:	899b      	ldrh	r3, [r3, #12]
 8001d94:	88ba      	ldrh	r2, [r7, #4]
 8001d96:	4611      	mov	r1, r2
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe ff7b 	bl	8000c94 <LCD_WriteReg>
	}
	LCD_RS_CLR;
 8001d9e:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <LCD_Fast_DrawPoint+0x524>)
 8001da0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001da4:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8001da6:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <LCD_Fast_DrawPoint+0x524>)
 8001da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dac:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);	//写指令
 8001dae:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <LCD_Fast_DrawPoint+0x520>)
 8001db0:	891a      	ldrh	r2, [r3, #8]
 8001db2:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <LCD_Fast_DrawPoint+0x528>)
 8001db4:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR;
 8001db6:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <LCD_Fast_DrawPoint+0x524>)
 8001db8:	2280      	movs	r2, #128	; 0x80
 8001dba:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8001dbc:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <LCD_Fast_DrawPoint+0x524>)
 8001dbe:	2280      	movs	r2, #128	; 0x80
 8001dc0:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <LCD_Fast_DrawPoint+0x524>)
 8001dc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dc8:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//写数据
 8001dca:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <LCD_Fast_DrawPoint+0x524>)
 8001dcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dd0:	611a      	str	r2, [r3, #16]
 8001dd2:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <LCD_Fast_DrawPoint+0x524>)
 8001dd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd8:	615a      	str	r2, [r3, #20]
 8001dda:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <LCD_Fast_DrawPoint+0x528>)
 8001ddc:	887b      	ldrh	r3, [r7, #2]
 8001dde:	60d3      	str	r3, [r2, #12]
 8001de0:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <LCD_Fast_DrawPoint+0x524>)
 8001de2:	2280      	movs	r2, #128	; 0x80
 8001de4:	615a      	str	r2, [r3, #20]
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <LCD_Fast_DrawPoint+0x524>)
 8001de8:	2280      	movs	r2, #128	; 0x80
 8001dea:	611a      	str	r2, [r3, #16]
 8001dec:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <LCD_Fast_DrawPoint+0x524>)
 8001dee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001df2:	611a      	str	r2, [r3, #16]
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	200005d4 	.word	0x200005d4
 8001e00:	40011000 	.word	0x40011000
 8001e04:	40010c00 	.word	0x40010c00

08001e08 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8001e08:	b590      	push	{r4, r7, lr}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8001e12:	20be      	movs	r0, #190	; 0xbe
 8001e14:	f7fe feb2 	bl	8000b7c <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8001e18:	4b4b      	ldr	r3, [pc, #300]	; (8001f48 <LCD_SSD_BackLightSet+0x140>)
 8001e1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e1e:	611a      	str	r2, [r3, #16]
 8001e20:	4b49      	ldr	r3, [pc, #292]	; (8001f48 <LCD_SSD_BackLightSet+0x140>)
 8001e22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e26:	615a      	str	r2, [r3, #20]
 8001e28:	4b48      	ldr	r3, [pc, #288]	; (8001f4c <LCD_SSD_BackLightSet+0x144>)
 8001e2a:	2205      	movs	r2, #5
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	4b46      	ldr	r3, [pc, #280]	; (8001f48 <LCD_SSD_BackLightSet+0x140>)
 8001e30:	2280      	movs	r2, #128	; 0x80
 8001e32:	615a      	str	r2, [r3, #20]
 8001e34:	4b44      	ldr	r3, [pc, #272]	; (8001f48 <LCD_SSD_BackLightSet+0x140>)
 8001e36:	2280      	movs	r2, #128	; 0x80
 8001e38:	611a      	str	r2, [r3, #16]
 8001e3a:	4b43      	ldr	r3, [pc, #268]	; (8001f48 <LCD_SSD_BackLightSet+0x140>)
 8001e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e40:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 8001e42:	4b41      	ldr	r3, [pc, #260]	; (8001f48 <LCD_SSD_BackLightSet+0x140>)
 8001e44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e48:	611a      	str	r2, [r3, #16]
 8001e4a:	4b3f      	ldr	r3, [pc, #252]	; (8001f48 <LCD_SSD_BackLightSet+0x140>)
 8001e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e50:	615a      	str	r2, [r3, #20]
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fb41 	bl	80004dc <__aeabi_i2d>
 8001e5a:	a339      	add	r3, pc, #228	; (adr r3, 8001f40 <LCD_SSD_BackLightSet+0x138>)
 8001e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e60:	f7fe fba6 	bl	80005b0 <__aeabi_dmul>
 8001e64:	4603      	mov	r3, r0
 8001e66:	460c      	mov	r4, r1
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4623      	mov	r3, r4
 8001e6c:	4c37      	ldr	r4, [pc, #220]	; (8001f4c <LCD_SSD_BackLightSet+0x144>)
 8001e6e:	4610      	mov	r0, r2
 8001e70:	4619      	mov	r1, r3
 8001e72:	f7fe fdaf 	bl	80009d4 <__aeabi_d2uiz>
 8001e76:	4603      	mov	r3, r0
 8001e78:	60e3      	str	r3, [r4, #12]
 8001e7a:	4b33      	ldr	r3, [pc, #204]	; (8001f48 <LCD_SSD_BackLightSet+0x140>)
 8001e7c:	2280      	movs	r2, #128	; 0x80
 8001e7e:	615a      	str	r2, [r3, #20]
 8001e80:	4b31      	ldr	r3, [pc, #196]	; (8001f48 <LCD_SSD_BackLightSet+0x140>)
 8001e82:	2280      	movs	r2, #128	; 0x80
 8001e84:	611a      	str	r2, [r3, #16]
 8001e86:	4b30      	ldr	r3, [pc, #192]	; (8001f48 <LCD_SSD_BackLightSet+0x140>)
 8001e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e8c:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 8001e8e:	4b2e      	ldr	r3, [pc, #184]	; (8001f48 <LCD_SSD_BackLightSet+0x140>)
 8001e90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e94:	611a      	str	r2, [r3, #16]
 8001e96:	4b2c      	ldr	r3, [pc, #176]	; (8001f48 <LCD_SSD_BackLightSet+0x140>)
 8001e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e9c:	615a      	str	r2, [r3, #20]
 8001e9e:	4b2b      	ldr	r3, [pc, #172]	; (8001f4c <LCD_SSD_BackLightSet+0x144>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	60da      	str	r2, [r3, #12]
 8001ea4:	4b28      	ldr	r3, [pc, #160]	; (8001f48 <LCD_SSD_BackLightSet+0x140>)
 8001ea6:	2280      	movs	r2, #128	; 0x80
 8001ea8:	615a      	str	r2, [r3, #20]
 8001eaa:	4b27      	ldr	r3, [pc, #156]	; (8001f48 <LCD_SSD_BackLightSet+0x140>)
 8001eac:	2280      	movs	r2, #128	; 0x80
 8001eae:	611a      	str	r2, [r3, #16]
 8001eb0:	4b25      	ldr	r3, [pc, #148]	; (8001f48 <LCD_SSD_BackLightSet+0x140>)
 8001eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eb6:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8001eb8:	4b23      	ldr	r3, [pc, #140]	; (8001f48 <LCD_SSD_BackLightSet+0x140>)
 8001eba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ebe:	611a      	str	r2, [r3, #16]
 8001ec0:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <LCD_SSD_BackLightSet+0x140>)
 8001ec2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ec6:	615a      	str	r2, [r3, #20]
 8001ec8:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <LCD_SSD_BackLightSet+0x144>)
 8001eca:	22ff      	movs	r2, #255	; 0xff
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	4b1e      	ldr	r3, [pc, #120]	; (8001f48 <LCD_SSD_BackLightSet+0x140>)
 8001ed0:	2280      	movs	r2, #128	; 0x80
 8001ed2:	615a      	str	r2, [r3, #20]
 8001ed4:	4b1c      	ldr	r3, [pc, #112]	; (8001f48 <LCD_SSD_BackLightSet+0x140>)
 8001ed6:	2280      	movs	r2, #128	; 0x80
 8001ed8:	611a      	str	r2, [r3, #16]
 8001eda:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <LCD_SSD_BackLightSet+0x140>)
 8001edc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ee0:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 8001ee2:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <LCD_SSD_BackLightSet+0x140>)
 8001ee4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ee8:	611a      	str	r2, [r3, #16]
 8001eea:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <LCD_SSD_BackLightSet+0x140>)
 8001eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ef0:	615a      	str	r2, [r3, #20]
 8001ef2:	4b16      	ldr	r3, [pc, #88]	; (8001f4c <LCD_SSD_BackLightSet+0x144>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	60da      	str	r2, [r3, #12]
 8001ef8:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <LCD_SSD_BackLightSet+0x140>)
 8001efa:	2280      	movs	r2, #128	; 0x80
 8001efc:	615a      	str	r2, [r3, #20]
 8001efe:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <LCD_SSD_BackLightSet+0x140>)
 8001f00:	2280      	movs	r2, #128	; 0x80
 8001f02:	611a      	str	r2, [r3, #16]
 8001f04:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <LCD_SSD_BackLightSet+0x140>)
 8001f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f0a:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 8001f0c:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <LCD_SSD_BackLightSet+0x140>)
 8001f0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f12:	611a      	str	r2, [r3, #16]
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <LCD_SSD_BackLightSet+0x140>)
 8001f16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f1a:	615a      	str	r2, [r3, #20]
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <LCD_SSD_BackLightSet+0x144>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <LCD_SSD_BackLightSet+0x140>)
 8001f24:	2280      	movs	r2, #128	; 0x80
 8001f26:	615a      	str	r2, [r3, #20]
 8001f28:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <LCD_SSD_BackLightSet+0x140>)
 8001f2a:	2280      	movs	r2, #128	; 0x80
 8001f2c:	611a      	str	r2, [r3, #16]
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <LCD_SSD_BackLightSet+0x140>)
 8001f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f34:	611a      	str	r2, [r3, #16]
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd90      	pop	{r4, r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	66666666 	.word	0x66666666
 8001f44:	40046666 	.word	0x40046666
 8001f48:	40011000 	.word	0x40011000
 8001f4c:	40010c00 	.word	0x40010c00

08001f50 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d177      	bne.n	8002050 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8001f60:	4b80      	ldr	r3, [pc, #512]	; (8002164 <LCD_Display_Dir+0x214>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 8001f66:	4b7f      	ldr	r3, [pc, #508]	; (8002164 <LCD_Display_Dir+0x214>)
 8001f68:	22f0      	movs	r2, #240	; 0xf0
 8001f6a:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001f6c:	4b7d      	ldr	r3, [pc, #500]	; (8002164 <LCD_Display_Dir+0x214>)
 8001f6e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f72:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001f74:	4b7b      	ldr	r3, [pc, #492]	; (8002164 <LCD_Display_Dir+0x214>)
 8001f76:	889b      	ldrh	r3, [r3, #4]
 8001f78:	f249 3241 	movw	r2, #37697	; 0x9341
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d00b      	beq.n	8001f98 <LCD_Display_Dir+0x48>
 8001f80:	4b78      	ldr	r3, [pc, #480]	; (8002164 <LCD_Display_Dir+0x214>)
 8001f82:	889b      	ldrh	r3, [r3, #4]
 8001f84:	f646 0204 	movw	r2, #26628	; 0x6804
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d005      	beq.n	8001f98 <LCD_Display_Dir+0x48>
 8001f8c:	4b75      	ldr	r3, [pc, #468]	; (8002164 <LCD_Display_Dir+0x214>)
 8001f8e:	889b      	ldrh	r3, [r3, #4]
 8001f90:	f245 3210 	movw	r2, #21264	; 0x5310
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d11e      	bne.n	8001fd6 <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8001f98:	4b72      	ldr	r3, [pc, #456]	; (8002164 <LCD_Display_Dir+0x214>)
 8001f9a:	222c      	movs	r2, #44	; 0x2c
 8001f9c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001f9e:	4b71      	ldr	r3, [pc, #452]	; (8002164 <LCD_Display_Dir+0x214>)
 8001fa0:	222a      	movs	r2, #42	; 0x2a
 8001fa2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001fa4:	4b6f      	ldr	r3, [pc, #444]	; (8002164 <LCD_Display_Dir+0x214>)
 8001fa6:	222b      	movs	r2, #43	; 0x2b
 8001fa8:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001faa:	4b6e      	ldr	r3, [pc, #440]	; (8002164 <LCD_Display_Dir+0x214>)
 8001fac:	889b      	ldrh	r3, [r3, #4]
 8001fae:	f646 0204 	movw	r2, #26628	; 0x6804
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d006      	beq.n	8001fc4 <LCD_Display_Dir+0x74>
 8001fb6:	4b6b      	ldr	r3, [pc, #428]	; (8002164 <LCD_Display_Dir+0x214>)
 8001fb8:	889b      	ldrh	r3, [r3, #4]
 8001fba:	f245 3210 	movw	r2, #21264	; 0x5310
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	f040 80c7 	bne.w	8002152 <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8001fc4:	4b67      	ldr	r3, [pc, #412]	; (8002164 <LCD_Display_Dir+0x214>)
 8001fc6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001fca:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 8001fcc:	4b65      	ldr	r3, [pc, #404]	; (8002164 <LCD_Display_Dir+0x214>)
 8001fce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001fd2:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001fd4:	e0bd      	b.n	8002152 <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 8001fd6:	4b63      	ldr	r3, [pc, #396]	; (8002164 <LCD_Display_Dir+0x214>)
 8001fd8:	889b      	ldrh	r3, [r3, #4]
 8001fda:	f245 5210 	movw	r2, #21776	; 0x5510
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d114      	bne.n	800200c <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 8001fe2:	4b60      	ldr	r3, [pc, #384]	; (8002164 <LCD_Display_Dir+0x214>)
 8001fe4:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001fe8:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001fea:	4b5e      	ldr	r3, [pc, #376]	; (8002164 <LCD_Display_Dir+0x214>)
 8001fec:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001ff0:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001ff2:	4b5c      	ldr	r3, [pc, #368]	; (8002164 <LCD_Display_Dir+0x214>)
 8001ff4:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001ff8:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 8001ffa:	4b5a      	ldr	r3, [pc, #360]	; (8002164 <LCD_Display_Dir+0x214>)
 8001ffc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002000:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 8002002:	4b58      	ldr	r3, [pc, #352]	; (8002164 <LCD_Display_Dir+0x214>)
 8002004:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002008:	805a      	strh	r2, [r3, #2]
 800200a:	e0a3      	b.n	8002154 <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 800200c:	4b55      	ldr	r3, [pc, #340]	; (8002164 <LCD_Display_Dir+0x214>)
 800200e:	889b      	ldrh	r3, [r3, #4]
 8002010:	f641 1263 	movw	r2, #6499	; 0x1963
 8002014:	4293      	cmp	r3, r2
 8002016:	d111      	bne.n	800203c <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8002018:	4b52      	ldr	r3, [pc, #328]	; (8002164 <LCD_Display_Dir+0x214>)
 800201a:	222c      	movs	r2, #44	; 0x2c
 800201c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 800201e:	4b51      	ldr	r3, [pc, #324]	; (8002164 <LCD_Display_Dir+0x214>)
 8002020:	222b      	movs	r2, #43	; 0x2b
 8002022:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 8002024:	4b4f      	ldr	r3, [pc, #316]	; (8002164 <LCD_Display_Dir+0x214>)
 8002026:	222a      	movs	r2, #42	; 0x2a
 8002028:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 800202a:	4b4e      	ldr	r3, [pc, #312]	; (8002164 <LCD_Display_Dir+0x214>)
 800202c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002030:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 8002032:	4b4c      	ldr	r3, [pc, #304]	; (8002164 <LCD_Display_Dir+0x214>)
 8002034:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002038:	805a      	strh	r2, [r3, #2]
 800203a:	e08b      	b.n	8002154 <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 800203c:	4b49      	ldr	r3, [pc, #292]	; (8002164 <LCD_Display_Dir+0x214>)
 800203e:	2222      	movs	r2, #34	; 0x22
 8002040:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 8002042:	4b48      	ldr	r3, [pc, #288]	; (8002164 <LCD_Display_Dir+0x214>)
 8002044:	2220      	movs	r2, #32
 8002046:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8002048:	4b46      	ldr	r3, [pc, #280]	; (8002164 <LCD_Display_Dir+0x214>)
 800204a:	2221      	movs	r2, #33	; 0x21
 800204c:	819a      	strh	r2, [r3, #12]
 800204e:	e081      	b.n	8002154 <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8002050:	4b44      	ldr	r3, [pc, #272]	; (8002164 <LCD_Display_Dir+0x214>)
 8002052:	2201      	movs	r2, #1
 8002054:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 8002056:	4b43      	ldr	r3, [pc, #268]	; (8002164 <LCD_Display_Dir+0x214>)
 8002058:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800205c:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 800205e:	4b41      	ldr	r3, [pc, #260]	; (8002164 <LCD_Display_Dir+0x214>)
 8002060:	22f0      	movs	r2, #240	; 0xf0
 8002062:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8002064:	4b3f      	ldr	r3, [pc, #252]	; (8002164 <LCD_Display_Dir+0x214>)
 8002066:	889b      	ldrh	r3, [r3, #4]
 8002068:	f249 3241 	movw	r2, #37697	; 0x9341
 800206c:	4293      	cmp	r3, r2
 800206e:	d005      	beq.n	800207c <LCD_Display_Dir+0x12c>
 8002070:	4b3c      	ldr	r3, [pc, #240]	; (8002164 <LCD_Display_Dir+0x214>)
 8002072:	889b      	ldrh	r3, [r3, #4]
 8002074:	f245 3210 	movw	r2, #21264	; 0x5310
 8002078:	4293      	cmp	r3, r2
 800207a:	d109      	bne.n	8002090 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 800207c:	4b39      	ldr	r3, [pc, #228]	; (8002164 <LCD_Display_Dir+0x214>)
 800207e:	222c      	movs	r2, #44	; 0x2c
 8002080:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8002082:	4b38      	ldr	r3, [pc, #224]	; (8002164 <LCD_Display_Dir+0x214>)
 8002084:	222a      	movs	r2, #42	; 0x2a
 8002086:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8002088:	4b36      	ldr	r3, [pc, #216]	; (8002164 <LCD_Display_Dir+0x214>)
 800208a:	222b      	movs	r2, #43	; 0x2b
 800208c:	819a      	strh	r2, [r3, #12]
 800208e:	e04b      	b.n	8002128 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8002090:	4b34      	ldr	r3, [pc, #208]	; (8002164 <LCD_Display_Dir+0x214>)
 8002092:	889b      	ldrh	r3, [r3, #4]
 8002094:	f646 0204 	movw	r2, #26628	; 0x6804
 8002098:	4293      	cmp	r3, r2
 800209a:	d109      	bne.n	80020b0 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 800209c:	4b31      	ldr	r3, [pc, #196]	; (8002164 <LCD_Display_Dir+0x214>)
 800209e:	222c      	movs	r2, #44	; 0x2c
 80020a0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 80020a2:	4b30      	ldr	r3, [pc, #192]	; (8002164 <LCD_Display_Dir+0x214>)
 80020a4:	222b      	movs	r2, #43	; 0x2b
 80020a6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 80020a8:	4b2e      	ldr	r3, [pc, #184]	; (8002164 <LCD_Display_Dir+0x214>)
 80020aa:	222a      	movs	r2, #42	; 0x2a
 80020ac:	819a      	strh	r2, [r3, #12]
 80020ae:	e03b      	b.n	8002128 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 80020b0:	4b2c      	ldr	r3, [pc, #176]	; (8002164 <LCD_Display_Dir+0x214>)
 80020b2:	889b      	ldrh	r3, [r3, #4]
 80020b4:	f245 5210 	movw	r2, #21776	; 0x5510
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d114      	bne.n	80020e6 <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 80020bc:	4b29      	ldr	r3, [pc, #164]	; (8002164 <LCD_Display_Dir+0x214>)
 80020be:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80020c2:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 80020c4:	4b27      	ldr	r3, [pc, #156]	; (8002164 <LCD_Display_Dir+0x214>)
 80020c6:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 80020ca:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 80020cc:	4b25      	ldr	r3, [pc, #148]	; (8002164 <LCD_Display_Dir+0x214>)
 80020ce:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 80020d2:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 80020d4:	4b23      	ldr	r3, [pc, #140]	; (8002164 <LCD_Display_Dir+0x214>)
 80020d6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80020da:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 80020dc:	4b21      	ldr	r3, [pc, #132]	; (8002164 <LCD_Display_Dir+0x214>)
 80020de:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80020e2:	805a      	strh	r2, [r3, #2]
 80020e4:	e020      	b.n	8002128 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 80020e6:	4b1f      	ldr	r3, [pc, #124]	; (8002164 <LCD_Display_Dir+0x214>)
 80020e8:	889b      	ldrh	r3, [r3, #4]
 80020ea:	f641 1263 	movw	r2, #6499	; 0x1963
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d111      	bne.n	8002116 <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 80020f2:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <LCD_Display_Dir+0x214>)
 80020f4:	222c      	movs	r2, #44	; 0x2c
 80020f6:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 80020f8:	4b1a      	ldr	r3, [pc, #104]	; (8002164 <LCD_Display_Dir+0x214>)
 80020fa:	222a      	movs	r2, #42	; 0x2a
 80020fc:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 80020fe:	4b19      	ldr	r3, [pc, #100]	; (8002164 <LCD_Display_Dir+0x214>)
 8002100:	222b      	movs	r2, #43	; 0x2b
 8002102:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 8002104:	4b17      	ldr	r3, [pc, #92]	; (8002164 <LCD_Display_Dir+0x214>)
 8002106:	f44f 7248 	mov.w	r2, #800	; 0x320
 800210a:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 800210c:	4b15      	ldr	r3, [pc, #84]	; (8002164 <LCD_Display_Dir+0x214>)
 800210e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002112:	805a      	strh	r2, [r3, #2]
 8002114:	e008      	b.n	8002128 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 8002116:	4b13      	ldr	r3, [pc, #76]	; (8002164 <LCD_Display_Dir+0x214>)
 8002118:	2222      	movs	r2, #34	; 0x22
 800211a:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 800211c:	4b11      	ldr	r3, [pc, #68]	; (8002164 <LCD_Display_Dir+0x214>)
 800211e:	2221      	movs	r2, #33	; 0x21
 8002120:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 8002122:	4b10      	ldr	r3, [pc, #64]	; (8002164 <LCD_Display_Dir+0x214>)
 8002124:	2220      	movs	r2, #32
 8002126:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8002128:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <LCD_Display_Dir+0x214>)
 800212a:	889b      	ldrh	r3, [r3, #4]
 800212c:	f646 0204 	movw	r2, #26628	; 0x6804
 8002130:	4293      	cmp	r3, r2
 8002132:	d005      	beq.n	8002140 <LCD_Display_Dir+0x1f0>
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <LCD_Display_Dir+0x214>)
 8002136:	889b      	ldrh	r3, [r3, #4]
 8002138:	f245 3210 	movw	r2, #21264	; 0x5310
 800213c:	4293      	cmp	r3, r2
 800213e:	d109      	bne.n	8002154 <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8002140:	4b08      	ldr	r3, [pc, #32]	; (8002164 <LCD_Display_Dir+0x214>)
 8002142:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002146:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <LCD_Display_Dir+0x214>)
 800214a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800214e:	805a      	strh	r2, [r3, #2]
 8002150:	e000      	b.n	8002154 <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8002152:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8002154:	2000      	movs	r0, #0
 8002156:	f7ff f8af 	bl	80012b8 <LCD_Scan_Dir>
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	200005d4 	.word	0x200005d4

08002168 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 800216e:	4b90      	ldr	r3, [pc, #576]	; (80023b0 <LCD_Init+0x248>)
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	4a8f      	ldr	r2, [pc, #572]	; (80023b0 <LCD_Init+0x248>)
 8002174:	f043 0308 	orr.w	r3, r3, #8
 8002178:	6193      	str	r3, [r2, #24]
 800217a:	4b8d      	ldr	r3, [pc, #564]	; (80023b0 <LCD_Init+0x248>)
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	607b      	str	r3, [r7, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 8002186:	4b8a      	ldr	r3, [pc, #552]	; (80023b0 <LCD_Init+0x248>)
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	4a89      	ldr	r2, [pc, #548]	; (80023b0 <LCD_Init+0x248>)
 800218c:	f043 0310 	orr.w	r3, r3, #16
 8002190:	6193      	str	r3, [r2, #24]
 8002192:	4b87      	ldr	r3, [pc, #540]	; (80023b0 <LCD_Init+0x248>)
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	f003 0310 	and.w	r3, r3, #16
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 800219e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80021a2:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 80021a4:	2301      	movs	r3, #1
 80021a6:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 80021a8:	2301      	movs	r3, #1
 80021aa:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 80021ac:	2303      	movs	r3, #3
 80021ae:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 80021b0:	f107 0308 	add.w	r3, r7, #8
 80021b4:	4619      	mov	r1, r3
 80021b6:	487f      	ldr	r0, [pc, #508]	; (80023b4 <LCD_Init+0x24c>)
 80021b8:	f006 f998 	bl	80084ec <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 80021bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021c0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 80021c2:	f107 0308 	add.w	r3, r7, #8
 80021c6:	4619      	mov	r1, r3
 80021c8:	487b      	ldr	r0, [pc, #492]	; (80023b8 <LCD_Init+0x250>)
 80021ca:	f006 f98f 	bl	80084ec <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 80021ce:	2032      	movs	r0, #50	; 0x32
 80021d0:	f005 ff54 	bl	800807c <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 80021d4:	2101      	movs	r1, #1
 80021d6:	2000      	movs	r0, #0
 80021d8:	f7fe fd5c 	bl	8000c94 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 80021dc:	2032      	movs	r0, #50	; 0x32
 80021de:	f005 ff4d 	bl	800807c <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 80021e2:	2000      	movs	r0, #0
 80021e4:	f7fe fd80 	bl	8000ce8 <LCD_ReadReg>
 80021e8:	4603      	mov	r3, r0
 80021ea:	461a      	mov	r2, r3
 80021ec:	4b73      	ldr	r3, [pc, #460]	; (80023bc <LCD_Init+0x254>)
 80021ee:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 80021f0:	4b72      	ldr	r3, [pc, #456]	; (80023bc <LCD_Init+0x254>)
 80021f2:	889b      	ldrh	r3, [r3, #4]
 80021f4:	2bfe      	cmp	r3, #254	; 0xfe
 80021f6:	d90b      	bls.n	8002210 <LCD_Init+0xa8>
 80021f8:	4b70      	ldr	r3, [pc, #448]	; (80023bc <LCD_Init+0x254>)
 80021fa:	889b      	ldrh	r3, [r3, #4]
 80021fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002200:	4293      	cmp	r3, r2
 8002202:	d005      	beq.n	8002210 <LCD_Init+0xa8>
 8002204:	4b6d      	ldr	r3, [pc, #436]	; (80023bc <LCD_Init+0x254>)
 8002206:	889b      	ldrh	r3, [r3, #4]
 8002208:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 800220c:	f040 80c8 	bne.w	80023a0 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8002210:	20d3      	movs	r0, #211	; 0xd3
 8002212:	f7fe fcb3 	bl	8000b7c <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 8002216:	f7fe fcf9 	bl	8000c0c <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 800221a:	f7fe fcf7 	bl	8000c0c <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 800221e:	f7fe fcf5 	bl	8000c0c <LCD_RD_DATA>
 8002222:	4603      	mov	r3, r0
 8002224:	461a      	mov	r2, r3
 8002226:	4b65      	ldr	r3, [pc, #404]	; (80023bc <LCD_Init+0x254>)
 8002228:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 800222a:	4b64      	ldr	r3, [pc, #400]	; (80023bc <LCD_Init+0x254>)
 800222c:	889b      	ldrh	r3, [r3, #4]
 800222e:	021b      	lsls	r3, r3, #8
 8002230:	b29a      	uxth	r2, r3
 8002232:	4b62      	ldr	r3, [pc, #392]	; (80023bc <LCD_Init+0x254>)
 8002234:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 8002236:	f7fe fce9 	bl	8000c0c <LCD_RD_DATA>
 800223a:	4603      	mov	r3, r0
 800223c:	461a      	mov	r2, r3
 800223e:	4b5f      	ldr	r3, [pc, #380]	; (80023bc <LCD_Init+0x254>)
 8002240:	889b      	ldrh	r3, [r3, #4]
 8002242:	4313      	orrs	r3, r2
 8002244:	b29a      	uxth	r2, r3
 8002246:	4b5d      	ldr	r3, [pc, #372]	; (80023bc <LCD_Init+0x254>)
 8002248:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 800224a:	4b5c      	ldr	r3, [pc, #368]	; (80023bc <LCD_Init+0x254>)
 800224c:	889b      	ldrh	r3, [r3, #4]
 800224e:	f249 3241 	movw	r2, #37697	; 0x9341
 8002252:	4293      	cmp	r3, r2
 8002254:	f000 80a4 	beq.w	80023a0 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8002258:	20bf      	movs	r0, #191	; 0xbf
 800225a:	f7fe fc8f 	bl	8000b7c <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 800225e:	f7fe fcd5 	bl	8000c0c <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 8002262:	f7fe fcd3 	bl	8000c0c <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 8002266:	f7fe fcd1 	bl	8000c0c <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 800226a:	f7fe fccf 	bl	8000c0c <LCD_RD_DATA>
 800226e:	4603      	mov	r3, r0
 8002270:	461a      	mov	r2, r3
 8002272:	4b52      	ldr	r3, [pc, #328]	; (80023bc <LCD_Init+0x254>)
 8002274:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 8002276:	4b51      	ldr	r3, [pc, #324]	; (80023bc <LCD_Init+0x254>)
 8002278:	889b      	ldrh	r3, [r3, #4]
 800227a:	021b      	lsls	r3, r3, #8
 800227c:	b29a      	uxth	r2, r3
 800227e:	4b4f      	ldr	r3, [pc, #316]	; (80023bc <LCD_Init+0x254>)
 8002280:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 8002282:	f7fe fcc3 	bl	8000c0c <LCD_RD_DATA>
 8002286:	4603      	mov	r3, r0
 8002288:	461a      	mov	r2, r3
 800228a:	4b4c      	ldr	r3, [pc, #304]	; (80023bc <LCD_Init+0x254>)
 800228c:	889b      	ldrh	r3, [r3, #4]
 800228e:	4313      	orrs	r3, r2
 8002290:	b29a      	uxth	r2, r3
 8002292:	4b4a      	ldr	r3, [pc, #296]	; (80023bc <LCD_Init+0x254>)
 8002294:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 8002296:	4b49      	ldr	r3, [pc, #292]	; (80023bc <LCD_Init+0x254>)
 8002298:	889b      	ldrh	r3, [r3, #4]
 800229a:	f646 0204 	movw	r2, #26628	; 0x6804
 800229e:	4293      	cmp	r3, r2
 80022a0:	d07e      	beq.n	80023a0 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 80022a2:	20d4      	movs	r0, #212	; 0xd4
 80022a4:	f7fe fc6a 	bl	8000b7c <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 80022a8:	f7fe fcb0 	bl	8000c0c <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 80022ac:	f7fe fcae 	bl	8000c0c <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 80022b0:	f7fe fcac 	bl	8000c0c <LCD_RD_DATA>
 80022b4:	4603      	mov	r3, r0
 80022b6:	461a      	mov	r2, r3
 80022b8:	4b40      	ldr	r3, [pc, #256]	; (80023bc <LCD_Init+0x254>)
 80022ba:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 80022bc:	4b3f      	ldr	r3, [pc, #252]	; (80023bc <LCD_Init+0x254>)
 80022be:	889b      	ldrh	r3, [r3, #4]
 80022c0:	021b      	lsls	r3, r3, #8
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	4b3d      	ldr	r3, [pc, #244]	; (80023bc <LCD_Init+0x254>)
 80022c6:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 80022c8:	f7fe fca0 	bl	8000c0c <LCD_RD_DATA>
 80022cc:	4603      	mov	r3, r0
 80022ce:	461a      	mov	r2, r3
 80022d0:	4b3a      	ldr	r3, [pc, #232]	; (80023bc <LCD_Init+0x254>)
 80022d2:	889b      	ldrh	r3, [r3, #4]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	4b38      	ldr	r3, [pc, #224]	; (80023bc <LCD_Init+0x254>)
 80022da:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 80022dc:	4b37      	ldr	r3, [pc, #220]	; (80023bc <LCD_Init+0x254>)
 80022de:	889b      	ldrh	r3, [r3, #4]
 80022e0:	f245 3210 	movw	r2, #21264	; 0x5310
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d05b      	beq.n	80023a0 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 80022e8:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 80022ec:	f7fe fc46 	bl	8000b7c <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 80022f0:	f7fe fc8c 	bl	8000c0c <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 80022f4:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 80022f8:	f7fe fc40 	bl	8000b7c <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 80022fc:	f7fe fc86 	bl	8000c0c <LCD_RD_DATA>
 8002300:	4603      	mov	r3, r0
 8002302:	461a      	mov	r2, r3
 8002304:	4b2d      	ldr	r3, [pc, #180]	; (80023bc <LCD_Init+0x254>)
 8002306:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8002308:	4b2c      	ldr	r3, [pc, #176]	; (80023bc <LCD_Init+0x254>)
 800230a:	889b      	ldrh	r3, [r3, #4]
 800230c:	021b      	lsls	r3, r3, #8
 800230e:	b29a      	uxth	r2, r3
 8002310:	4b2a      	ldr	r3, [pc, #168]	; (80023bc <LCD_Init+0x254>)
 8002312:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8002314:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8002318:	f7fe fc30 	bl	8000b7c <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 800231c:	f7fe fc76 	bl	8000c0c <LCD_RD_DATA>
 8002320:	4603      	mov	r3, r0
 8002322:	461a      	mov	r2, r3
 8002324:	4b25      	ldr	r3, [pc, #148]	; (80023bc <LCD_Init+0x254>)
 8002326:	889b      	ldrh	r3, [r3, #4]
 8002328:	4313      	orrs	r3, r2
 800232a:	b29a      	uxth	r2, r3
 800232c:	4b23      	ldr	r3, [pc, #140]	; (80023bc <LCD_Init+0x254>)
 800232e:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8002330:	4b22      	ldr	r3, [pc, #136]	; (80023bc <LCD_Init+0x254>)
 8002332:	889b      	ldrh	r3, [r3, #4]
 8002334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002338:	d103      	bne.n	8002342 <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 800233a:	4b20      	ldr	r3, [pc, #128]	; (80023bc <LCD_Init+0x254>)
 800233c:	f245 5210 	movw	r2, #21776	; 0x5510
 8002340:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8002342:	4b1e      	ldr	r3, [pc, #120]	; (80023bc <LCD_Init+0x254>)
 8002344:	889b      	ldrh	r3, [r3, #4]
 8002346:	f245 5210 	movw	r2, #21776	; 0x5510
 800234a:	4293      	cmp	r3, r2
 800234c:	d028      	beq.n	80023a0 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 800234e:	20a1      	movs	r0, #161	; 0xa1
 8002350:	f7fe fc14 	bl	8000b7c <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 8002354:	f7fe fc5a 	bl	8000c0c <LCD_RD_DATA>
 8002358:	4603      	mov	r3, r0
 800235a:	461a      	mov	r2, r3
 800235c:	4b17      	ldr	r3, [pc, #92]	; (80023bc <LCD_Init+0x254>)
 800235e:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8002360:	f7fe fc54 	bl	8000c0c <LCD_RD_DATA>
 8002364:	4603      	mov	r3, r0
 8002366:	461a      	mov	r2, r3
 8002368:	4b14      	ldr	r3, [pc, #80]	; (80023bc <LCD_Init+0x254>)
 800236a:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 800236c:	4b13      	ldr	r3, [pc, #76]	; (80023bc <LCD_Init+0x254>)
 800236e:	889b      	ldrh	r3, [r3, #4]
 8002370:	021b      	lsls	r3, r3, #8
 8002372:	b29a      	uxth	r2, r3
 8002374:	4b11      	ldr	r3, [pc, #68]	; (80023bc <LCD_Init+0x254>)
 8002376:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8002378:	f7fe fc48 	bl	8000c0c <LCD_RD_DATA>
 800237c:	4603      	mov	r3, r0
 800237e:	461a      	mov	r2, r3
 8002380:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <LCD_Init+0x254>)
 8002382:	889b      	ldrh	r3, [r3, #4]
 8002384:	4313      	orrs	r3, r2
 8002386:	b29a      	uxth	r2, r3
 8002388:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <LCD_Init+0x254>)
 800238a:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <LCD_Init+0x254>)
 800238e:	889b      	ldrh	r3, [r3, #4]
 8002390:	f245 7261 	movw	r2, #22369	; 0x5761
 8002394:	4293      	cmp	r3, r2
 8002396:	d103      	bne.n	80023a0 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8002398:	4b08      	ldr	r3, [pc, #32]	; (80023bc <LCD_Init+0x254>)
 800239a:	f641 1263 	movw	r2, #6499	; 0x1963
 800239e:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <LCD_Init+0x254>)
 80023a2:	889b      	ldrh	r3, [r3, #4]
 80023a4:	f249 3241 	movw	r2, #37697	; 0x9341
 80023a8:	4293      	cmp	r3, r2
 80023aa:	f040 811f 	bne.w	80025ec <LCD_Init+0x484>
 80023ae:	e007      	b.n	80023c0 <LCD_Init+0x258>
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40011000 	.word	0x40011000
 80023b8:	40010c00 	.word	0x40010c00
 80023bc:	200005d4 	.word	0x200005d4
			{
		LCD_WR_REG(0xCF);
 80023c0:	20cf      	movs	r0, #207	; 0xcf
 80023c2:	f7fe fbdb 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80023c6:	2000      	movs	r0, #0
 80023c8:	f7fe fbfc 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 80023cc:	20c1      	movs	r0, #193	; 0xc1
 80023ce:	f7fe fbf9 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 80023d2:	2030      	movs	r0, #48	; 0x30
 80023d4:	f7fe fbf6 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 80023d8:	20ed      	movs	r0, #237	; 0xed
 80023da:	f7fe fbcf 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 80023de:	2064      	movs	r0, #100	; 0x64
 80023e0:	f7fe fbf0 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80023e4:	2003      	movs	r0, #3
 80023e6:	f7fe fbed 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 80023ea:	2012      	movs	r0, #18
 80023ec:	f7fe fbea 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 80023f0:	2081      	movs	r0, #129	; 0x81
 80023f2:	f7fe fbe7 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 80023f6:	20e8      	movs	r0, #232	; 0xe8
 80023f8:	f7fe fbc0 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 80023fc:	2085      	movs	r0, #133	; 0x85
 80023fe:	f7fe fbe1 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8002402:	2010      	movs	r0, #16
 8002404:	f7fe fbde 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002408:	207a      	movs	r0, #122	; 0x7a
 800240a:	f7fe fbdb 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 800240e:	20cb      	movs	r0, #203	; 0xcb
 8002410:	f7fe fbb4 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 8002414:	2039      	movs	r0, #57	; 0x39
 8002416:	f7fe fbd5 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 800241a:	202c      	movs	r0, #44	; 0x2c
 800241c:	f7fe fbd2 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002420:	2000      	movs	r0, #0
 8002422:	f7fe fbcf 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002426:	2034      	movs	r0, #52	; 0x34
 8002428:	f7fe fbcc 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 800242c:	2002      	movs	r0, #2
 800242e:	f7fe fbc9 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 8002432:	20f7      	movs	r0, #247	; 0xf7
 8002434:	f7fe fba2 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002438:	2020      	movs	r0, #32
 800243a:	f7fe fbc3 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 800243e:	20ea      	movs	r0, #234	; 0xea
 8002440:	f7fe fb9c 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002444:	2000      	movs	r0, #0
 8002446:	f7fe fbbd 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800244a:	2000      	movs	r0, #0
 800244c:	f7fe fbba 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8002450:	20c0      	movs	r0, #192	; 0xc0
 8002452:	f7fe fb93 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 8002456:	201b      	movs	r0, #27
 8002458:	f7fe fbb4 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 800245c:	20c1      	movs	r0, #193	; 0xc1
 800245e:	f7fe fb8d 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 8002462:	2001      	movs	r0, #1
 8002464:	f7fe fbae 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8002468:	20c5      	movs	r0, #197	; 0xc5
 800246a:	f7fe fb87 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 800246e:	2030      	movs	r0, #48	; 0x30
 8002470:	f7fe fba8 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 8002474:	2030      	movs	r0, #48	; 0x30
 8002476:	f7fe fba5 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 800247a:	20c7      	movs	r0, #199	; 0xc7
 800247c:	f7fe fb7e 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8002480:	20b7      	movs	r0, #183	; 0xb7
 8002482:	f7fe fb9f 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 8002486:	2036      	movs	r0, #54	; 0x36
 8002488:	f7fe fb78 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 800248c:	2048      	movs	r0, #72	; 0x48
 800248e:	f7fe fb99 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 8002492:	203a      	movs	r0, #58	; 0x3a
 8002494:	f7fe fb72 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 8002498:	2055      	movs	r0, #85	; 0x55
 800249a:	f7fe fb93 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 800249e:	20b1      	movs	r0, #177	; 0xb1
 80024a0:	f7fe fb6c 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80024a4:	2000      	movs	r0, #0
 80024a6:	f7fe fb8d 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 80024aa:	201a      	movs	r0, #26
 80024ac:	f7fe fb8a 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 80024b0:	20b6      	movs	r0, #182	; 0xb6
 80024b2:	f7fe fb63 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 80024b6:	200a      	movs	r0, #10
 80024b8:	f7fe fb84 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 80024bc:	20a2      	movs	r0, #162	; 0xa2
 80024be:	f7fe fb81 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 80024c2:	20f2      	movs	r0, #242	; 0xf2
 80024c4:	f7fe fb5a 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80024c8:	2000      	movs	r0, #0
 80024ca:	f7fe fb7b 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 80024ce:	2026      	movs	r0, #38	; 0x26
 80024d0:	f7fe fb54 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80024d4:	2001      	movs	r0, #1
 80024d6:	f7fe fb75 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 80024da:	20e0      	movs	r0, #224	; 0xe0
 80024dc:	f7fe fb4e 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 80024e0:	200f      	movs	r0, #15
 80024e2:	f7fe fb6f 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 80024e6:	202a      	movs	r0, #42	; 0x2a
 80024e8:	f7fe fb6c 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 80024ec:	2028      	movs	r0, #40	; 0x28
 80024ee:	f7fe fb69 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 80024f2:	2008      	movs	r0, #8
 80024f4:	f7fe fb66 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 80024f8:	200e      	movs	r0, #14
 80024fa:	f7fe fb63 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 80024fe:	2008      	movs	r0, #8
 8002500:	f7fe fb60 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8002504:	2054      	movs	r0, #84	; 0x54
 8002506:	f7fe fb5d 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 800250a:	20a9      	movs	r0, #169	; 0xa9
 800250c:	f7fe fb5a 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8002510:	2043      	movs	r0, #67	; 0x43
 8002512:	f7fe fb57 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 8002516:	200a      	movs	r0, #10
 8002518:	f7fe fb54 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 800251c:	200f      	movs	r0, #15
 800251e:	f7fe fb51 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002522:	2000      	movs	r0, #0
 8002524:	f7fe fb4e 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002528:	2000      	movs	r0, #0
 800252a:	f7fe fb4b 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800252e:	2000      	movs	r0, #0
 8002530:	f7fe fb48 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002534:	2000      	movs	r0, #0
 8002536:	f7fe fb45 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 800253a:	20e1      	movs	r0, #225	; 0xe1
 800253c:	f7fe fb1e 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002540:	2000      	movs	r0, #0
 8002542:	f7fe fb3f 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 8002546:	2015      	movs	r0, #21
 8002548:	f7fe fb3c 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 800254c:	2017      	movs	r0, #23
 800254e:	f7fe fb39 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 8002552:	2007      	movs	r0, #7
 8002554:	f7fe fb36 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002558:	2011      	movs	r0, #17
 800255a:	f7fe fb33 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 800255e:	2006      	movs	r0, #6
 8002560:	f7fe fb30 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 8002564:	202b      	movs	r0, #43	; 0x2b
 8002566:	f7fe fb2d 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 800256a:	2056      	movs	r0, #86	; 0x56
 800256c:	f7fe fb2a 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002570:	203c      	movs	r0, #60	; 0x3c
 8002572:	f7fe fb27 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8002576:	2005      	movs	r0, #5
 8002578:	f7fe fb24 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 800257c:	2010      	movs	r0, #16
 800257e:	f7fe fb21 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8002582:	200f      	movs	r0, #15
 8002584:	f7fe fb1e 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002588:	203f      	movs	r0, #63	; 0x3f
 800258a:	f7fe fb1b 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 800258e:	203f      	movs	r0, #63	; 0x3f
 8002590:	f7fe fb18 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8002594:	200f      	movs	r0, #15
 8002596:	f7fe fb15 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 800259a:	202b      	movs	r0, #43	; 0x2b
 800259c:	f7fe faee 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80025a0:	2000      	movs	r0, #0
 80025a2:	f7fe fb0f 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025a6:	2000      	movs	r0, #0
 80025a8:	f7fe fb0c 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80025ac:	2001      	movs	r0, #1
 80025ae:	f7fe fb09 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 80025b2:	203f      	movs	r0, #63	; 0x3f
 80025b4:	f7fe fb06 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 80025b8:	202a      	movs	r0, #42	; 0x2a
 80025ba:	f7fe fadf 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80025be:	2000      	movs	r0, #0
 80025c0:	f7fe fb00 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025c4:	2000      	movs	r0, #0
 80025c6:	f7fe fafd 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025ca:	2000      	movs	r0, #0
 80025cc:	f7fe fafa 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 80025d0:	20ef      	movs	r0, #239	; 0xef
 80025d2:	f7fe faf7 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 80025d6:	2011      	movs	r0, #17
 80025d8:	f7fe fad0 	bl	8000b7c <LCD_WR_REG>
		HAL_Delay(120);
 80025dc:	2078      	movs	r0, #120	; 0x78
 80025de:	f005 fd4d 	bl	800807c <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 80025e2:	2029      	movs	r0, #41	; 0x29
 80025e4:	f7fe faca 	bl	8000b7c <LCD_WR_REG>
 80025e8:	f003 bcd8 	b.w	8005f9c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 80025ec:	4b58      	ldr	r3, [pc, #352]	; (8002750 <LCD_Init+0x5e8>)
 80025ee:	889b      	ldrh	r3, [r3, #4]
 80025f0:	f646 0204 	movw	r2, #26628	; 0x6804
 80025f4:	4293      	cmp	r3, r2
 80025f6:	f040 80ad 	bne.w	8002754 <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 80025fa:	2011      	movs	r0, #17
 80025fc:	f7fe fabe 	bl	8000b7c <LCD_WR_REG>
		HAL_Delay(20);
 8002600:	2014      	movs	r0, #20
 8002602:	f005 fd3b 	bl	800807c <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8002606:	20d0      	movs	r0, #208	; 0xd0
 8002608:	f7fe fab8 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 800260c:	2007      	movs	r0, #7
 800260e:	f7fe fad9 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 8002612:	2042      	movs	r0, #66	; 0x42
 8002614:	f7fe fad6 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 8002618:	201d      	movs	r0, #29
 800261a:	f7fe fad3 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 800261e:	20d1      	movs	r0, #209	; 0xd1
 8002620:	f7fe faac 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002624:	2000      	movs	r0, #0
 8002626:	f7fe facd 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 800262a:	201a      	movs	r0, #26
 800262c:	f7fe faca 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8002630:	2009      	movs	r0, #9
 8002632:	f7fe fac7 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8002636:	20d2      	movs	r0, #210	; 0xd2
 8002638:	f7fe faa0 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 800263c:	2001      	movs	r0, #1
 800263e:	f7fe fac1 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 8002642:	2022      	movs	r0, #34	; 0x22
 8002644:	f7fe fabe 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8002648:	20c0      	movs	r0, #192	; 0xc0
 800264a:	f7fe fa97 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 800264e:	2010      	movs	r0, #16
 8002650:	f7fe fab8 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 8002654:	203b      	movs	r0, #59	; 0x3b
 8002656:	f7fe fab5 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800265a:	2000      	movs	r0, #0
 800265c:	f7fe fab2 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8002660:	2002      	movs	r0, #2
 8002662:	f7fe faaf 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 8002666:	2011      	movs	r0, #17
 8002668:	f7fe faac 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 800266c:	20c5      	movs	r0, #197	; 0xc5
 800266e:	f7fe fa85 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 8002672:	2003      	movs	r0, #3
 8002674:	f7fe faa6 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 8002678:	20c8      	movs	r0, #200	; 0xc8
 800267a:	f7fe fa7f 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 800267e:	2000      	movs	r0, #0
 8002680:	f7fe faa0 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8002684:	2025      	movs	r0, #37	; 0x25
 8002686:	f7fe fa9d 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 800268a:	2021      	movs	r0, #33	; 0x21
 800268c:	f7fe fa9a 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 8002690:	2005      	movs	r0, #5
 8002692:	f7fe fa97 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002696:	2000      	movs	r0, #0
 8002698:	f7fe fa94 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 800269c:	200a      	movs	r0, #10
 800269e:	f7fe fa91 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 80026a2:	2065      	movs	r0, #101	; 0x65
 80026a4:	f7fe fa8e 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 80026a8:	2025      	movs	r0, #37	; 0x25
 80026aa:	f7fe fa8b 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 80026ae:	2077      	movs	r0, #119	; 0x77
 80026b0:	f7fe fa88 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 80026b4:	2050      	movs	r0, #80	; 0x50
 80026b6:	f7fe fa85 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 80026ba:	200f      	movs	r0, #15
 80026bc:	f7fe fa82 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80026c0:	2000      	movs	r0, #0
 80026c2:	f7fe fa7f 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 80026c6:	20f8      	movs	r0, #248	; 0xf8
 80026c8:	f7fe fa58 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 80026cc:	2001      	movs	r0, #1
 80026ce:	f7fe fa79 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 80026d2:	20fe      	movs	r0, #254	; 0xfe
 80026d4:	f7fe fa52 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80026d8:	2000      	movs	r0, #0
 80026da:	f7fe fa73 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 80026de:	2002      	movs	r0, #2
 80026e0:	f7fe fa70 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 80026e4:	2020      	movs	r0, #32
 80026e6:	f7fe fa49 	bl	8000b7c <LCD_WR_REG>

		LCD_WR_REG(0X36);
 80026ea:	2036      	movs	r0, #54	; 0x36
 80026ec:	f7fe fa46 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 80026f0:	2008      	movs	r0, #8
 80026f2:	f7fe fa67 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 80026f6:	203a      	movs	r0, #58	; 0x3a
 80026f8:	f7fe fa40 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 80026fc:	2055      	movs	r0, #85	; 0x55
 80026fe:	f7fe fa61 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 8002702:	202b      	movs	r0, #43	; 0x2b
 8002704:	f7fe fa3a 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002708:	2000      	movs	r0, #0
 800270a:	f7fe fa5b 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800270e:	2000      	movs	r0, #0
 8002710:	f7fe fa58 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8002714:	2001      	movs	r0, #1
 8002716:	f7fe fa55 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 800271a:	203f      	movs	r0, #63	; 0x3f
 800271c:	f7fe fa52 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 8002720:	202a      	movs	r0, #42	; 0x2a
 8002722:	f7fe fa2b 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002726:	2000      	movs	r0, #0
 8002728:	f7fe fa4c 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800272c:	2000      	movs	r0, #0
 800272e:	f7fe fa49 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8002732:	2001      	movs	r0, #1
 8002734:	f7fe fa46 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8002738:	20df      	movs	r0, #223	; 0xdf
 800273a:	f7fe fa43 	bl	8000bc4 <LCD_WR_DATAX>
		HAL_Delay(120);
 800273e:	2078      	movs	r0, #120	; 0x78
 8002740:	f005 fc9c 	bl	800807c <HAL_Delay>
		LCD_WR_REG(0X29);
 8002744:	2029      	movs	r0, #41	; 0x29
 8002746:	f7fe fa19 	bl	8000b7c <LCD_WR_REG>
 800274a:	f003 bc27 	b.w	8005f9c <LCD_Init+0x3e34>
 800274e:	bf00      	nop
 8002750:	200005d4 	.word	0x200005d4
	} else if (lcddev.id == 0x5310) {
 8002754:	4b03      	ldr	r3, [pc, #12]	; (8002764 <LCD_Init+0x5fc>)
 8002756:	889b      	ldrh	r3, [r3, #4]
 8002758:	f245 3210 	movw	r2, #21264	; 0x5310
 800275c:	4293      	cmp	r3, r2
 800275e:	f040 877c 	bne.w	800365a <LCD_Init+0x14f2>
 8002762:	e001      	b.n	8002768 <LCD_Init+0x600>
 8002764:	200005d4 	.word	0x200005d4
		LCD_WR_REG(0xED);
 8002768:	20ed      	movs	r0, #237	; 0xed
 800276a:	f7fe fa07 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800276e:	2001      	movs	r0, #1
 8002770:	f7fe fa28 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 8002774:	20fe      	movs	r0, #254	; 0xfe
 8002776:	f7fe fa25 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 800277a:	20ee      	movs	r0, #238	; 0xee
 800277c:	f7fe f9fe 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 8002780:	20de      	movs	r0, #222	; 0xde
 8002782:	f7fe fa1f 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002786:	2021      	movs	r0, #33	; 0x21
 8002788:	f7fe fa1c 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 800278c:	20f1      	movs	r0, #241	; 0xf1
 800278e:	f7fe f9f5 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002792:	2001      	movs	r0, #1
 8002794:	f7fe fa16 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 8002798:	20df      	movs	r0, #223	; 0xdf
 800279a:	f7fe f9ef 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 800279e:	2010      	movs	r0, #16
 80027a0:	f7fe fa10 	bl	8000bc4 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 80027a4:	20c4      	movs	r0, #196	; 0xc4
 80027a6:	f7fe f9e9 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 80027aa:	208f      	movs	r0, #143	; 0x8f
 80027ac:	f7fe fa0a 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 80027b0:	20c6      	movs	r0, #198	; 0xc6
 80027b2:	f7fe f9e3 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80027b6:	2000      	movs	r0, #0
 80027b8:	f7fe fa04 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80027bc:	20e2      	movs	r0, #226	; 0xe2
 80027be:	f7fe fa01 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80027c2:	20e2      	movs	r0, #226	; 0xe2
 80027c4:	f7fe f9fe 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80027c8:	20e2      	movs	r0, #226	; 0xe2
 80027ca:	f7fe f9fb 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 80027ce:	20bf      	movs	r0, #191	; 0xbf
 80027d0:	f7fe f9d4 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80027d4:	20aa      	movs	r0, #170	; 0xaa
 80027d6:	f7fe f9f5 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 80027da:	20b0      	movs	r0, #176	; 0xb0
 80027dc:	f7fe f9ce 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 80027e0:	200d      	movs	r0, #13
 80027e2:	f7fe f9ef 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027e6:	2000      	movs	r0, #0
 80027e8:	f7fe f9ec 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 80027ec:	200d      	movs	r0, #13
 80027ee:	f7fe f9e9 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027f2:	2000      	movs	r0, #0
 80027f4:	f7fe f9e6 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 80027f8:	2011      	movs	r0, #17
 80027fa:	f7fe f9e3 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027fe:	2000      	movs	r0, #0
 8002800:	f7fe f9e0 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 8002804:	2019      	movs	r0, #25
 8002806:	f7fe f9dd 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800280a:	2000      	movs	r0, #0
 800280c:	f7fe f9da 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002810:	2021      	movs	r0, #33	; 0x21
 8002812:	f7fe f9d7 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002816:	2000      	movs	r0, #0
 8002818:	f7fe f9d4 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 800281c:	202d      	movs	r0, #45	; 0x2d
 800281e:	f7fe f9d1 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002822:	2000      	movs	r0, #0
 8002824:	f7fe f9ce 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8002828:	203d      	movs	r0, #61	; 0x3d
 800282a:	f7fe f9cb 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800282e:	2000      	movs	r0, #0
 8002830:	f7fe f9c8 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002834:	205d      	movs	r0, #93	; 0x5d
 8002836:	f7fe f9c5 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800283a:	2000      	movs	r0, #0
 800283c:	f7fe f9c2 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002840:	205d      	movs	r0, #93	; 0x5d
 8002842:	f7fe f9bf 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002846:	2000      	movs	r0, #0
 8002848:	f7fe f9bc 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 800284c:	20b1      	movs	r0, #177	; 0xb1
 800284e:	f7fe f995 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 8002852:	2080      	movs	r0, #128	; 0x80
 8002854:	f7fe f9b6 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002858:	2000      	movs	r0, #0
 800285a:	f7fe f9b3 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 800285e:	208b      	movs	r0, #139	; 0x8b
 8002860:	f7fe f9b0 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002864:	2000      	movs	r0, #0
 8002866:	f7fe f9ad 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 800286a:	2096      	movs	r0, #150	; 0x96
 800286c:	f7fe f9aa 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002870:	2000      	movs	r0, #0
 8002872:	f7fe f9a7 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 8002876:	20b2      	movs	r0, #178	; 0xb2
 8002878:	f7fe f980 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800287c:	2000      	movs	r0, #0
 800287e:	f7fe f9a1 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002882:	2000      	movs	r0, #0
 8002884:	f7fe f99e 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002888:	2002      	movs	r0, #2
 800288a:	f7fe f99b 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800288e:	2000      	movs	r0, #0
 8002890:	f7fe f998 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8002894:	2003      	movs	r0, #3
 8002896:	f7fe f995 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800289a:	2000      	movs	r0, #0
 800289c:	f7fe f992 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 80028a0:	20b3      	movs	r0, #179	; 0xb3
 80028a2:	f7fe f96b 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80028a6:	2000      	movs	r0, #0
 80028a8:	f7fe f98c 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ac:	2000      	movs	r0, #0
 80028ae:	f7fe f989 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028b2:	2000      	movs	r0, #0
 80028b4:	f7fe f986 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028b8:	2000      	movs	r0, #0
 80028ba:	f7fe f983 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028be:	2000      	movs	r0, #0
 80028c0:	f7fe f980 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028c4:	2000      	movs	r0, #0
 80028c6:	f7fe f97d 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ca:	2000      	movs	r0, #0
 80028cc:	f7fe f97a 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028d0:	2000      	movs	r0, #0
 80028d2:	f7fe f977 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028d6:	2000      	movs	r0, #0
 80028d8:	f7fe f974 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028dc:	2000      	movs	r0, #0
 80028de:	f7fe f971 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028e2:	2000      	movs	r0, #0
 80028e4:	f7fe f96e 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028e8:	2000      	movs	r0, #0
 80028ea:	f7fe f96b 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ee:	2000      	movs	r0, #0
 80028f0:	f7fe f968 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028f4:	2000      	movs	r0, #0
 80028f6:	f7fe f965 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028fa:	2000      	movs	r0, #0
 80028fc:	f7fe f962 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002900:	2000      	movs	r0, #0
 8002902:	f7fe f95f 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002906:	2000      	movs	r0, #0
 8002908:	f7fe f95c 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800290c:	2000      	movs	r0, #0
 800290e:	f7fe f959 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002912:	2000      	movs	r0, #0
 8002914:	f7fe f956 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002918:	2000      	movs	r0, #0
 800291a:	f7fe f953 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800291e:	2000      	movs	r0, #0
 8002920:	f7fe f950 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002924:	2000      	movs	r0, #0
 8002926:	f7fe f94d 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800292a:	2000      	movs	r0, #0
 800292c:	f7fe f94a 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002930:	2000      	movs	r0, #0
 8002932:	f7fe f947 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 8002936:	20b4      	movs	r0, #180	; 0xb4
 8002938:	f7fe f920 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 800293c:	208b      	movs	r0, #139	; 0x8b
 800293e:	f7fe f941 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002942:	2000      	movs	r0, #0
 8002944:	f7fe f93e 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002948:	2096      	movs	r0, #150	; 0x96
 800294a:	f7fe f93b 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800294e:	2000      	movs	r0, #0
 8002950:	f7fe f938 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 8002954:	20a1      	movs	r0, #161	; 0xa1
 8002956:	f7fe f935 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800295a:	2000      	movs	r0, #0
 800295c:	f7fe f932 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 8002960:	20b5      	movs	r0, #181	; 0xb5
 8002962:	f7fe f90b 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 8002966:	2002      	movs	r0, #2
 8002968:	f7fe f92c 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800296c:	2000      	movs	r0, #0
 800296e:	f7fe f929 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8002972:	2003      	movs	r0, #3
 8002974:	f7fe f926 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002978:	2000      	movs	r0, #0
 800297a:	f7fe f923 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 800297e:	2004      	movs	r0, #4
 8002980:	f7fe f920 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002984:	2000      	movs	r0, #0
 8002986:	f7fe f91d 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 800298a:	20b6      	movs	r0, #182	; 0xb6
 800298c:	f7fe f8f6 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002990:	2000      	movs	r0, #0
 8002992:	f7fe f917 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002996:	2000      	movs	r0, #0
 8002998:	f7fe f914 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 800299c:	20b7      	movs	r0, #183	; 0xb7
 800299e:	f7fe f8ed 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80029a2:	2000      	movs	r0, #0
 80029a4:	f7fe f90e 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029a8:	2000      	movs	r0, #0
 80029aa:	f7fe f90b 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80029ae:	203f      	movs	r0, #63	; 0x3f
 80029b0:	f7fe f908 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029b4:	2000      	movs	r0, #0
 80029b6:	f7fe f905 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 80029ba:	205e      	movs	r0, #94	; 0x5e
 80029bc:	f7fe f902 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029c0:	2000      	movs	r0, #0
 80029c2:	f7fe f8ff 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 80029c6:	2064      	movs	r0, #100	; 0x64
 80029c8:	f7fe f8fc 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029cc:	2000      	movs	r0, #0
 80029ce:	f7fe f8f9 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 80029d2:	208c      	movs	r0, #140	; 0x8c
 80029d4:	f7fe f8f6 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029d8:	2000      	movs	r0, #0
 80029da:	f7fe f8f3 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 80029de:	20ac      	movs	r0, #172	; 0xac
 80029e0:	f7fe f8f0 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029e4:	2000      	movs	r0, #0
 80029e6:	f7fe f8ed 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80029ea:	20dc      	movs	r0, #220	; 0xdc
 80029ec:	f7fe f8ea 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029f0:	2000      	movs	r0, #0
 80029f2:	f7fe f8e7 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 80029f6:	2070      	movs	r0, #112	; 0x70
 80029f8:	f7fe f8e4 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029fc:	2000      	movs	r0, #0
 80029fe:	f7fe f8e1 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 8002a02:	2090      	movs	r0, #144	; 0x90
 8002a04:	f7fe f8de 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f7fe f8db 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 8002a0e:	20eb      	movs	r0, #235	; 0xeb
 8002a10:	f7fe f8d8 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a14:	2000      	movs	r0, #0
 8002a16:	f7fe f8d5 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002a1a:	20dc      	movs	r0, #220	; 0xdc
 8002a1c:	f7fe f8d2 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a20:	2000      	movs	r0, #0
 8002a22:	f7fe f8cf 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 8002a26:	20b8      	movs	r0, #184	; 0xb8
 8002a28:	f7fe f8a8 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	f7fe f8c9 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a32:	2000      	movs	r0, #0
 8002a34:	f7fe f8c6 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f7fe f8c3 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a3e:	2000      	movs	r0, #0
 8002a40:	f7fe f8c0 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a44:	2000      	movs	r0, #0
 8002a46:	f7fe f8bd 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	f7fe f8ba 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a50:	2000      	movs	r0, #0
 8002a52:	f7fe f8b7 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a56:	2000      	movs	r0, #0
 8002a58:	f7fe f8b4 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 8002a5c:	20ba      	movs	r0, #186	; 0xba
 8002a5e:	f7fe f88d 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 8002a62:	2024      	movs	r0, #36	; 0x24
 8002a64:	f7fe f8ae 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a68:	2000      	movs	r0, #0
 8002a6a:	f7fe f8ab 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f7fe f8a8 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a74:	2000      	movs	r0, #0
 8002a76:	f7fe f8a5 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 8002a7a:	20c1      	movs	r0, #193	; 0xc1
 8002a7c:	f7fe f87e 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002a80:	2020      	movs	r0, #32
 8002a82:	f7fe f89f 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a86:	2000      	movs	r0, #0
 8002a88:	f7fe f89c 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8002a8c:	2054      	movs	r0, #84	; 0x54
 8002a8e:	f7fe f899 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a92:	2000      	movs	r0, #0
 8002a94:	f7fe f896 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 8002a98:	20ff      	movs	r0, #255	; 0xff
 8002a9a:	f7fe f893 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	f7fe f890 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 8002aa4:	20c2      	movs	r0, #194	; 0xc2
 8002aa6:	f7fe f869 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8002aaa:	200a      	movs	r0, #10
 8002aac:	f7fe f88a 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	f7fe f887 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8002ab6:	2004      	movs	r0, #4
 8002ab8:	f7fe f884 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002abc:	2000      	movs	r0, #0
 8002abe:	f7fe f881 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 8002ac2:	20c3      	movs	r0, #195	; 0xc3
 8002ac4:	f7fe f85a 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 8002ac8:	203c      	movs	r0, #60	; 0x3c
 8002aca:	f7fe f87b 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ace:	2000      	movs	r0, #0
 8002ad0:	f7fe f878 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 8002ad4:	203a      	movs	r0, #58	; 0x3a
 8002ad6:	f7fe f875 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ada:	2000      	movs	r0, #0
 8002adc:	f7fe f872 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 8002ae0:	2039      	movs	r0, #57	; 0x39
 8002ae2:	f7fe f86f 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	f7fe f86c 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 8002aec:	2037      	movs	r0, #55	; 0x37
 8002aee:	f7fe f869 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002af2:	2000      	movs	r0, #0
 8002af4:	f7fe f866 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002af8:	203c      	movs	r0, #60	; 0x3c
 8002afa:	f7fe f863 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002afe:	2000      	movs	r0, #0
 8002b00:	f7fe f860 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002b04:	2036      	movs	r0, #54	; 0x36
 8002b06:	f7fe f85d 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	f7fe f85a 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002b10:	2032      	movs	r0, #50	; 0x32
 8002b12:	f7fe f857 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b16:	2000      	movs	r0, #0
 8002b18:	f7fe f854 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8002b1c:	202f      	movs	r0, #47	; 0x2f
 8002b1e:	f7fe f851 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b22:	2000      	movs	r0, #0
 8002b24:	f7fe f84e 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002b28:	202c      	movs	r0, #44	; 0x2c
 8002b2a:	f7fe f84b 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b2e:	2000      	movs	r0, #0
 8002b30:	f7fe f848 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002b34:	2029      	movs	r0, #41	; 0x29
 8002b36:	f7fe f845 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	f7fe f842 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002b40:	2026      	movs	r0, #38	; 0x26
 8002b42:	f7fe f83f 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b46:	2000      	movs	r0, #0
 8002b48:	f7fe f83c 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002b4c:	2024      	movs	r0, #36	; 0x24
 8002b4e:	f7fe f839 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b52:	2000      	movs	r0, #0
 8002b54:	f7fe f836 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002b58:	2024      	movs	r0, #36	; 0x24
 8002b5a:	f7fe f833 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b5e:	2000      	movs	r0, #0
 8002b60:	f7fe f830 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002b64:	2023      	movs	r0, #35	; 0x23
 8002b66:	f7fe f82d 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	f7fe f82a 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002b70:	203c      	movs	r0, #60	; 0x3c
 8002b72:	f7fe f827 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b76:	2000      	movs	r0, #0
 8002b78:	f7fe f824 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002b7c:	2036      	movs	r0, #54	; 0x36
 8002b7e:	f7fe f821 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b82:	2000      	movs	r0, #0
 8002b84:	f7fe f81e 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002b88:	2032      	movs	r0, #50	; 0x32
 8002b8a:	f7fe f81b 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b8e:	2000      	movs	r0, #0
 8002b90:	f7fe f818 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8002b94:	202f      	movs	r0, #47	; 0x2f
 8002b96:	f7fe f815 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	f7fe f812 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002ba0:	202c      	movs	r0, #44	; 0x2c
 8002ba2:	f7fe f80f 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	f7fe f80c 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002bac:	2029      	movs	r0, #41	; 0x29
 8002bae:	f7fe f809 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f7fe f806 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002bb8:	2026      	movs	r0, #38	; 0x26
 8002bba:	f7fe f803 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	f7fe f800 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002bc4:	2024      	movs	r0, #36	; 0x24
 8002bc6:	f7fd fffd 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bca:	2000      	movs	r0, #0
 8002bcc:	f7fd fffa 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002bd0:	2024      	movs	r0, #36	; 0x24
 8002bd2:	f7fd fff7 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	f7fd fff4 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002bdc:	2023      	movs	r0, #35	; 0x23
 8002bde:	f7fd fff1 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002be2:	2000      	movs	r0, #0
 8002be4:	f7fd ffee 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 8002be8:	20c4      	movs	r0, #196	; 0xc4
 8002bea:	f7fd ffc7 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 8002bee:	2062      	movs	r0, #98	; 0x62
 8002bf0:	f7fd ffe8 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	f7fd ffe5 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8002bfa:	2005      	movs	r0, #5
 8002bfc:	f7fd ffe2 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c00:	2000      	movs	r0, #0
 8002c02:	f7fd ffdf 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002c06:	2084      	movs	r0, #132	; 0x84
 8002c08:	f7fd ffdc 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	f7fd ffd9 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 8002c12:	20f0      	movs	r0, #240	; 0xf0
 8002c14:	f7fd ffd6 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c18:	2000      	movs	r0, #0
 8002c1a:	f7fd ffd3 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002c1e:	2018      	movs	r0, #24
 8002c20:	f7fd ffd0 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c24:	2000      	movs	r0, #0
 8002c26:	f7fd ffcd 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 8002c2a:	20a4      	movs	r0, #164	; 0xa4
 8002c2c:	f7fd ffca 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c30:	2000      	movs	r0, #0
 8002c32:	f7fd ffc7 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002c36:	2018      	movs	r0, #24
 8002c38:	f7fd ffc4 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	f7fd ffc1 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002c42:	2050      	movs	r0, #80	; 0x50
 8002c44:	f7fd ffbe 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c48:	2000      	movs	r0, #0
 8002c4a:	f7fd ffbb 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 8002c4e:	200c      	movs	r0, #12
 8002c50:	f7fd ffb8 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c54:	2000      	movs	r0, #0
 8002c56:	f7fd ffb5 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002c5a:	2017      	movs	r0, #23
 8002c5c:	f7fd ffb2 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c60:	2000      	movs	r0, #0
 8002c62:	f7fd ffaf 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 8002c66:	2095      	movs	r0, #149	; 0x95
 8002c68:	f7fd ffac 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f7fd ffa9 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002c72:	20f3      	movs	r0, #243	; 0xf3
 8002c74:	f7fd ffa6 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c78:	2000      	movs	r0, #0
 8002c7a:	f7fd ffa3 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 8002c7e:	20e6      	movs	r0, #230	; 0xe6
 8002c80:	f7fd ffa0 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c84:	2000      	movs	r0, #0
 8002c86:	f7fd ff9d 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 8002c8a:	20c5      	movs	r0, #197	; 0xc5
 8002c8c:	f7fd ff76 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8002c90:	2032      	movs	r0, #50	; 0x32
 8002c92:	f7fd ff97 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c96:	2000      	movs	r0, #0
 8002c98:	f7fd ff94 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002c9c:	2044      	movs	r0, #68	; 0x44
 8002c9e:	f7fd ff91 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	f7fd ff8e 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8002ca8:	2065      	movs	r0, #101	; 0x65
 8002caa:	f7fd ff8b 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cae:	2000      	movs	r0, #0
 8002cb0:	f7fd ff88 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002cb4:	2076      	movs	r0, #118	; 0x76
 8002cb6:	f7fd ff85 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cba:	2000      	movs	r0, #0
 8002cbc:	f7fd ff82 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002cc0:	2088      	movs	r0, #136	; 0x88
 8002cc2:	f7fd ff7f 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	f7fd ff7c 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002ccc:	20c6      	movs	r0, #198	; 0xc6
 8002cce:	f7fd ff55 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002cd2:	2020      	movs	r0, #32
 8002cd4:	f7fd ff76 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cd8:	2000      	movs	r0, #0
 8002cda:	f7fd ff73 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002cde:	2017      	movs	r0, #23
 8002ce0:	f7fd ff70 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	f7fd ff6d 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002cea:	2001      	movs	r0, #1
 8002cec:	f7fd ff6a 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	f7fd ff67 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 8002cf6:	20c7      	movs	r0, #199	; 0xc7
 8002cf8:	f7fd ff40 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	f7fd ff61 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d02:	2000      	movs	r0, #0
 8002d04:	f7fd ff5e 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d08:	2000      	movs	r0, #0
 8002d0a:	f7fd ff5b 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d0e:	2000      	movs	r0, #0
 8002d10:	f7fd ff58 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 8002d14:	20c8      	movs	r0, #200	; 0xc8
 8002d16:	f7fd ff31 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	f7fd ff52 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d20:	2000      	movs	r0, #0
 8002d22:	f7fd ff4f 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d26:	2000      	movs	r0, #0
 8002d28:	f7fd ff4c 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	f7fd ff49 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 8002d32:	20c9      	movs	r0, #201	; 0xc9
 8002d34:	f7fd ff22 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002d38:	2000      	movs	r0, #0
 8002d3a:	f7fd ff43 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d3e:	2000      	movs	r0, #0
 8002d40:	f7fd ff40 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d44:	2000      	movs	r0, #0
 8002d46:	f7fd ff3d 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f7fd ff3a 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d50:	2000      	movs	r0, #0
 8002d52:	f7fd ff37 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d56:	2000      	movs	r0, #0
 8002d58:	f7fd ff34 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	f7fd ff31 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d62:	2000      	movs	r0, #0
 8002d64:	f7fd ff2e 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d68:	2000      	movs	r0, #0
 8002d6a:	f7fd ff2b 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d6e:	2000      	movs	r0, #0
 8002d70:	f7fd ff28 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d74:	2000      	movs	r0, #0
 8002d76:	f7fd ff25 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	f7fd ff22 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d80:	2000      	movs	r0, #0
 8002d82:	f7fd ff1f 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d86:	2000      	movs	r0, #0
 8002d88:	f7fd ff1c 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	f7fd ff19 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d92:	2000      	movs	r0, #0
 8002d94:	f7fd ff16 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8002d98:	20e0      	movs	r0, #224	; 0xe0
 8002d9a:	f7fd feef 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002d9e:	2016      	movs	r0, #22
 8002da0:	f7fd ff10 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002da4:	2000      	movs	r0, #0
 8002da6:	f7fd ff0d 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002daa:	201c      	movs	r0, #28
 8002dac:	f7fd ff0a 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002db0:	2000      	movs	r0, #0
 8002db2:	f7fd ff07 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002db6:	2021      	movs	r0, #33	; 0x21
 8002db8:	f7fd ff04 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	f7fd ff01 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002dc2:	2036      	movs	r0, #54	; 0x36
 8002dc4:	f7fd fefe 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dc8:	2000      	movs	r0, #0
 8002dca:	f7fd fefb 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 8002dce:	2046      	movs	r0, #70	; 0x46
 8002dd0:	f7fd fef8 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	f7fd fef5 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002dda:	2052      	movs	r0, #82	; 0x52
 8002ddc:	f7fd fef2 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002de0:	2000      	movs	r0, #0
 8002de2:	f7fd feef 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002de6:	2064      	movs	r0, #100	; 0x64
 8002de8:	f7fd feec 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dec:	2000      	movs	r0, #0
 8002dee:	f7fd fee9 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002df2:	207a      	movs	r0, #122	; 0x7a
 8002df4:	f7fd fee6 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002df8:	2000      	movs	r0, #0
 8002dfa:	f7fd fee3 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002dfe:	208b      	movs	r0, #139	; 0x8b
 8002e00:	f7fd fee0 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e04:	2000      	movs	r0, #0
 8002e06:	f7fd fedd 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002e0a:	2099      	movs	r0, #153	; 0x99
 8002e0c:	f7fd feda 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e10:	2000      	movs	r0, #0
 8002e12:	f7fd fed7 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002e16:	20a8      	movs	r0, #168	; 0xa8
 8002e18:	f7fd fed4 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	f7fd fed1 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002e22:	20b9      	movs	r0, #185	; 0xb9
 8002e24:	f7fd fece 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e28:	2000      	movs	r0, #0
 8002e2a:	f7fd fecb 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002e2e:	20c4      	movs	r0, #196	; 0xc4
 8002e30:	f7fd fec8 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e34:	2000      	movs	r0, #0
 8002e36:	f7fd fec5 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002e3a:	20ca      	movs	r0, #202	; 0xca
 8002e3c:	f7fd fec2 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e40:	2000      	movs	r0, #0
 8002e42:	f7fd febf 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002e46:	20d2      	movs	r0, #210	; 0xd2
 8002e48:	f7fd febc 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	f7fd feb9 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 8002e52:	20d9      	movs	r0, #217	; 0xd9
 8002e54:	f7fd feb6 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e58:	2000      	movs	r0, #0
 8002e5a:	f7fd feb3 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002e5e:	20e0      	movs	r0, #224	; 0xe0
 8002e60:	f7fd feb0 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e64:	2000      	movs	r0, #0
 8002e66:	f7fd fead 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002e6a:	20f3      	movs	r0, #243	; 0xf3
 8002e6c:	f7fd feaa 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e70:	2000      	movs	r0, #0
 8002e72:	f7fd fea7 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 8002e76:	20e1      	movs	r0, #225	; 0xe1
 8002e78:	f7fd fe80 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002e7c:	2016      	movs	r0, #22
 8002e7e:	f7fd fea1 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e82:	2000      	movs	r0, #0
 8002e84:	f7fd fe9e 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002e88:	201c      	movs	r0, #28
 8002e8a:	f7fd fe9b 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e8e:	2000      	movs	r0, #0
 8002e90:	f7fd fe98 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 8002e94:	2022      	movs	r0, #34	; 0x22
 8002e96:	f7fd fe95 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	f7fd fe92 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002ea0:	2036      	movs	r0, #54	; 0x36
 8002ea2:	f7fd fe8f 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	f7fd fe8c 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002eac:	2045      	movs	r0, #69	; 0x45
 8002eae:	f7fd fe89 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	f7fd fe86 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002eb8:	2052      	movs	r0, #82	; 0x52
 8002eba:	f7fd fe83 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	f7fd fe80 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002ec4:	2064      	movs	r0, #100	; 0x64
 8002ec6:	f7fd fe7d 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eca:	2000      	movs	r0, #0
 8002ecc:	f7fd fe7a 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002ed0:	207a      	movs	r0, #122	; 0x7a
 8002ed2:	f7fd fe77 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	f7fd fe74 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002edc:	208b      	movs	r0, #139	; 0x8b
 8002ede:	f7fd fe71 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	f7fd fe6e 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002ee8:	2099      	movs	r0, #153	; 0x99
 8002eea:	f7fd fe6b 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eee:	2000      	movs	r0, #0
 8002ef0:	f7fd fe68 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002ef4:	20a8      	movs	r0, #168	; 0xa8
 8002ef6:	f7fd fe65 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002efa:	2000      	movs	r0, #0
 8002efc:	f7fd fe62 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002f00:	20b9      	movs	r0, #185	; 0xb9
 8002f02:	f7fd fe5f 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f06:	2000      	movs	r0, #0
 8002f08:	f7fd fe5c 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002f0c:	20c4      	movs	r0, #196	; 0xc4
 8002f0e:	f7fd fe59 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f12:	2000      	movs	r0, #0
 8002f14:	f7fd fe56 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002f18:	20ca      	movs	r0, #202	; 0xca
 8002f1a:	f7fd fe53 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f1e:	2000      	movs	r0, #0
 8002f20:	f7fd fe50 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002f24:	20d2      	movs	r0, #210	; 0xd2
 8002f26:	f7fd fe4d 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	f7fd fe4a 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8002f30:	20d8      	movs	r0, #216	; 0xd8
 8002f32:	f7fd fe47 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f36:	2000      	movs	r0, #0
 8002f38:	f7fd fe44 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002f3c:	20e0      	movs	r0, #224	; 0xe0
 8002f3e:	f7fd fe41 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f42:	2000      	movs	r0, #0
 8002f44:	f7fd fe3e 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002f48:	20f3      	movs	r0, #243	; 0xf3
 8002f4a:	f7fd fe3b 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f4e:	2000      	movs	r0, #0
 8002f50:	f7fd fe38 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 8002f54:	20e2      	movs	r0, #226	; 0xe2
 8002f56:	f7fd fe11 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002f5a:	2005      	movs	r0, #5
 8002f5c:	f7fd fe32 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f60:	2000      	movs	r0, #0
 8002f62:	f7fd fe2f 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 8002f66:	200b      	movs	r0, #11
 8002f68:	f7fd fe2c 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	f7fd fe29 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 8002f72:	201b      	movs	r0, #27
 8002f74:	f7fd fe26 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f78:	2000      	movs	r0, #0
 8002f7a:	f7fd fe23 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002f7e:	2034      	movs	r0, #52	; 0x34
 8002f80:	f7fd fe20 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f84:	2000      	movs	r0, #0
 8002f86:	f7fd fe1d 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002f8a:	2044      	movs	r0, #68	; 0x44
 8002f8c:	f7fd fe1a 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f90:	2000      	movs	r0, #0
 8002f92:	f7fd fe17 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 8002f96:	204f      	movs	r0, #79	; 0x4f
 8002f98:	f7fd fe14 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	f7fd fe11 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 8002fa2:	2061      	movs	r0, #97	; 0x61
 8002fa4:	f7fd fe0e 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fa8:	2000      	movs	r0, #0
 8002faa:	f7fd fe0b 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 8002fae:	2079      	movs	r0, #121	; 0x79
 8002fb0:	f7fd fe08 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	f7fd fe05 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002fba:	2088      	movs	r0, #136	; 0x88
 8002fbc:	f7fd fe02 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	f7fd fdff 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002fc6:	2097      	movs	r0, #151	; 0x97
 8002fc8:	f7fd fdfc 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fcc:	2000      	movs	r0, #0
 8002fce:	f7fd fdf9 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002fd2:	20a6      	movs	r0, #166	; 0xa6
 8002fd4:	f7fd fdf6 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fd8:	2000      	movs	r0, #0
 8002fda:	f7fd fdf3 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002fde:	20b7      	movs	r0, #183	; 0xb7
 8002fe0:	f7fd fdf0 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	f7fd fded 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002fea:	20c2      	movs	r0, #194	; 0xc2
 8002fec:	f7fd fdea 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	f7fd fde7 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002ff6:	20c7      	movs	r0, #199	; 0xc7
 8002ff8:	f7fd fde4 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	f7fd fde1 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8003002:	20d1      	movs	r0, #209	; 0xd1
 8003004:	f7fd fdde 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003008:	2000      	movs	r0, #0
 800300a:	f7fd fddb 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 800300e:	20d6      	movs	r0, #214	; 0xd6
 8003010:	f7fd fdd8 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003014:	2000      	movs	r0, #0
 8003016:	f7fd fdd5 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 800301a:	20dd      	movs	r0, #221	; 0xdd
 800301c:	f7fd fdd2 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003020:	2000      	movs	r0, #0
 8003022:	f7fd fdcf 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003026:	20f3      	movs	r0, #243	; 0xf3
 8003028:	f7fd fdcc 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800302c:	2000      	movs	r0, #0
 800302e:	f7fd fdc9 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 8003032:	20e3      	movs	r0, #227	; 0xe3
 8003034:	f7fd fda2 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8003038:	2005      	movs	r0, #5
 800303a:	f7fd fdc3 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800303e:	2000      	movs	r0, #0
 8003040:	f7fd fdc0 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 8003044:	200a      	movs	r0, #10
 8003046:	f7fd fdbd 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800304a:	2000      	movs	r0, #0
 800304c:	f7fd fdba 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8003050:	201c      	movs	r0, #28
 8003052:	f7fd fdb7 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003056:	2000      	movs	r0, #0
 8003058:	f7fd fdb4 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 800305c:	2033      	movs	r0, #51	; 0x33
 800305e:	f7fd fdb1 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003062:	2000      	movs	r0, #0
 8003064:	f7fd fdae 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003068:	2044      	movs	r0, #68	; 0x44
 800306a:	f7fd fdab 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800306e:	2000      	movs	r0, #0
 8003070:	f7fd fda8 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8003074:	2050      	movs	r0, #80	; 0x50
 8003076:	f7fd fda5 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800307a:	2000      	movs	r0, #0
 800307c:	f7fd fda2 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8003080:	2062      	movs	r0, #98	; 0x62
 8003082:	f7fd fd9f 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003086:	2000      	movs	r0, #0
 8003088:	f7fd fd9c 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 800308c:	2078      	movs	r0, #120	; 0x78
 800308e:	f7fd fd99 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003092:	2000      	movs	r0, #0
 8003094:	f7fd fd96 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003098:	2088      	movs	r0, #136	; 0x88
 800309a:	f7fd fd93 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800309e:	2000      	movs	r0, #0
 80030a0:	f7fd fd90 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 80030a4:	2097      	movs	r0, #151	; 0x97
 80030a6:	f7fd fd8d 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030aa:	2000      	movs	r0, #0
 80030ac:	f7fd fd8a 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 80030b0:	20a6      	movs	r0, #166	; 0xa6
 80030b2:	f7fd fd87 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030b6:	2000      	movs	r0, #0
 80030b8:	f7fd fd84 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 80030bc:	20b7      	movs	r0, #183	; 0xb7
 80030be:	f7fd fd81 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030c2:	2000      	movs	r0, #0
 80030c4:	f7fd fd7e 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 80030c8:	20c2      	movs	r0, #194	; 0xc2
 80030ca:	f7fd fd7b 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ce:	2000      	movs	r0, #0
 80030d0:	f7fd fd78 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 80030d4:	20c7      	movs	r0, #199	; 0xc7
 80030d6:	f7fd fd75 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030da:	2000      	movs	r0, #0
 80030dc:	f7fd fd72 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 80030e0:	20d1      	movs	r0, #209	; 0xd1
 80030e2:	f7fd fd6f 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030e6:	2000      	movs	r0, #0
 80030e8:	f7fd fd6c 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 80030ec:	20d5      	movs	r0, #213	; 0xd5
 80030ee:	f7fd fd69 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030f2:	2000      	movs	r0, #0
 80030f4:	f7fd fd66 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 80030f8:	20dd      	movs	r0, #221	; 0xdd
 80030fa:	f7fd fd63 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030fe:	2000      	movs	r0, #0
 8003100:	f7fd fd60 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003104:	20f3      	movs	r0, #243	; 0xf3
 8003106:	f7fd fd5d 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800310a:	2000      	movs	r0, #0
 800310c:	f7fd fd5a 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8003110:	20e4      	movs	r0, #228	; 0xe4
 8003112:	f7fd fd33 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8003116:	2001      	movs	r0, #1
 8003118:	f7fd fd54 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800311c:	2000      	movs	r0, #0
 800311e:	f7fd fd51 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8003122:	2001      	movs	r0, #1
 8003124:	f7fd fd4e 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003128:	2000      	movs	r0, #0
 800312a:	f7fd fd4b 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 800312e:	2002      	movs	r0, #2
 8003130:	f7fd fd48 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003134:	2000      	movs	r0, #0
 8003136:	f7fd fd45 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 800313a:	202a      	movs	r0, #42	; 0x2a
 800313c:	f7fd fd42 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003140:	2000      	movs	r0, #0
 8003142:	f7fd fd3f 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8003146:	203c      	movs	r0, #60	; 0x3c
 8003148:	f7fd fd3c 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800314c:	2000      	movs	r0, #0
 800314e:	f7fd fd39 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8003152:	204b      	movs	r0, #75	; 0x4b
 8003154:	f7fd fd36 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003158:	2000      	movs	r0, #0
 800315a:	f7fd fd33 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 800315e:	205d      	movs	r0, #93	; 0x5d
 8003160:	f7fd fd30 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003164:	2000      	movs	r0, #0
 8003166:	f7fd fd2d 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 800316a:	2074      	movs	r0, #116	; 0x74
 800316c:	f7fd fd2a 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003170:	2000      	movs	r0, #0
 8003172:	f7fd fd27 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8003176:	2084      	movs	r0, #132	; 0x84
 8003178:	f7fd fd24 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800317c:	2000      	movs	r0, #0
 800317e:	f7fd fd21 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8003182:	2093      	movs	r0, #147	; 0x93
 8003184:	f7fd fd1e 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003188:	2000      	movs	r0, #0
 800318a:	f7fd fd1b 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 800318e:	20a2      	movs	r0, #162	; 0xa2
 8003190:	f7fd fd18 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003194:	2000      	movs	r0, #0
 8003196:	f7fd fd15 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 800319a:	20b3      	movs	r0, #179	; 0xb3
 800319c:	f7fd fd12 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031a0:	2000      	movs	r0, #0
 80031a2:	f7fd fd0f 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 80031a6:	20be      	movs	r0, #190	; 0xbe
 80031a8:	f7fd fd0c 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ac:	2000      	movs	r0, #0
 80031ae:	f7fd fd09 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80031b2:	20c4      	movs	r0, #196	; 0xc4
 80031b4:	f7fd fd06 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031b8:	2000      	movs	r0, #0
 80031ba:	f7fd fd03 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 80031be:	20cd      	movs	r0, #205	; 0xcd
 80031c0:	f7fd fd00 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031c4:	2000      	movs	r0, #0
 80031c6:	f7fd fcfd 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 80031ca:	20d3      	movs	r0, #211	; 0xd3
 80031cc:	f7fd fcfa 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031d0:	2000      	movs	r0, #0
 80031d2:	f7fd fcf7 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 80031d6:	20dd      	movs	r0, #221	; 0xdd
 80031d8:	f7fd fcf4 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031dc:	2000      	movs	r0, #0
 80031de:	f7fd fcf1 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80031e2:	20f3      	movs	r0, #243	; 0xf3
 80031e4:	f7fd fcee 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031e8:	2000      	movs	r0, #0
 80031ea:	f7fd fceb 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 80031ee:	20e5      	movs	r0, #229	; 0xe5
 80031f0:	f7fd fcc4 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80031f4:	2000      	movs	r0, #0
 80031f6:	f7fd fce5 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031fa:	2000      	movs	r0, #0
 80031fc:	f7fd fce2 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003200:	2000      	movs	r0, #0
 8003202:	f7fd fcdf 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003206:	2000      	movs	r0, #0
 8003208:	f7fd fcdc 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 800320c:	2002      	movs	r0, #2
 800320e:	f7fd fcd9 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003212:	2000      	movs	r0, #0
 8003214:	f7fd fcd6 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8003218:	2029      	movs	r0, #41	; 0x29
 800321a:	f7fd fcd3 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800321e:	2000      	movs	r0, #0
 8003220:	f7fd fcd0 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8003224:	203c      	movs	r0, #60	; 0x3c
 8003226:	f7fd fccd 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800322a:	2000      	movs	r0, #0
 800322c:	f7fd fcca 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8003230:	204b      	movs	r0, #75	; 0x4b
 8003232:	f7fd fcc7 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003236:	2000      	movs	r0, #0
 8003238:	f7fd fcc4 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 800323c:	205d      	movs	r0, #93	; 0x5d
 800323e:	f7fd fcc1 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003242:	2000      	movs	r0, #0
 8003244:	f7fd fcbe 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8003248:	2074      	movs	r0, #116	; 0x74
 800324a:	f7fd fcbb 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800324e:	2000      	movs	r0, #0
 8003250:	f7fd fcb8 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8003254:	2084      	movs	r0, #132	; 0x84
 8003256:	f7fd fcb5 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800325a:	2000      	movs	r0, #0
 800325c:	f7fd fcb2 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8003260:	2093      	movs	r0, #147	; 0x93
 8003262:	f7fd fcaf 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003266:	2000      	movs	r0, #0
 8003268:	f7fd fcac 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 800326c:	20a2      	movs	r0, #162	; 0xa2
 800326e:	f7fd fca9 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003272:	2000      	movs	r0, #0
 8003274:	f7fd fca6 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8003278:	20b3      	movs	r0, #179	; 0xb3
 800327a:	f7fd fca3 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800327e:	2000      	movs	r0, #0
 8003280:	f7fd fca0 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8003284:	20be      	movs	r0, #190	; 0xbe
 8003286:	f7fd fc9d 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800328a:	2000      	movs	r0, #0
 800328c:	f7fd fc9a 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8003290:	20c4      	movs	r0, #196	; 0xc4
 8003292:	f7fd fc97 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003296:	2000      	movs	r0, #0
 8003298:	f7fd fc94 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 800329c:	20cd      	movs	r0, #205	; 0xcd
 800329e:	f7fd fc91 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032a2:	2000      	movs	r0, #0
 80032a4:	f7fd fc8e 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 80032a8:	20d3      	movs	r0, #211	; 0xd3
 80032aa:	f7fd fc8b 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ae:	2000      	movs	r0, #0
 80032b0:	f7fd fc88 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80032b4:	20dc      	movs	r0, #220	; 0xdc
 80032b6:	f7fd fc85 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ba:	2000      	movs	r0, #0
 80032bc:	f7fd fc82 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80032c0:	20f3      	movs	r0, #243	; 0xf3
 80032c2:	f7fd fc7f 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032c6:	2000      	movs	r0, #0
 80032c8:	f7fd fc7c 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 80032cc:	20e6      	movs	r0, #230	; 0xe6
 80032ce:	f7fd fc55 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 80032d2:	2011      	movs	r0, #17
 80032d4:	f7fd fc76 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032d8:	2000      	movs	r0, #0
 80032da:	f7fd fc73 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 80032de:	2034      	movs	r0, #52	; 0x34
 80032e0:	f7fd fc70 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032e4:	2000      	movs	r0, #0
 80032e6:	f7fd fc6d 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 80032ea:	2056      	movs	r0, #86	; 0x56
 80032ec:	f7fd fc6a 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032f0:	2000      	movs	r0, #0
 80032f2:	f7fd fc67 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80032f6:	2076      	movs	r0, #118	; 0x76
 80032f8:	f7fd fc64 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032fc:	2000      	movs	r0, #0
 80032fe:	f7fd fc61 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003302:	2077      	movs	r0, #119	; 0x77
 8003304:	f7fd fc5e 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003308:	2000      	movs	r0, #0
 800330a:	f7fd fc5b 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800330e:	2066      	movs	r0, #102	; 0x66
 8003310:	f7fd fc58 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003314:	2000      	movs	r0, #0
 8003316:	f7fd fc55 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800331a:	2088      	movs	r0, #136	; 0x88
 800331c:	f7fd fc52 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003320:	2000      	movs	r0, #0
 8003322:	f7fd fc4f 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003326:	2099      	movs	r0, #153	; 0x99
 8003328:	f7fd fc4c 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800332c:	2000      	movs	r0, #0
 800332e:	f7fd fc49 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003332:	20bb      	movs	r0, #187	; 0xbb
 8003334:	f7fd fc46 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003338:	2000      	movs	r0, #0
 800333a:	f7fd fc43 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800333e:	2099      	movs	r0, #153	; 0x99
 8003340:	f7fd fc40 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003344:	2000      	movs	r0, #0
 8003346:	f7fd fc3d 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800334a:	2066      	movs	r0, #102	; 0x66
 800334c:	f7fd fc3a 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003350:	2000      	movs	r0, #0
 8003352:	f7fd fc37 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003356:	2055      	movs	r0, #85	; 0x55
 8003358:	f7fd fc34 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800335c:	2000      	movs	r0, #0
 800335e:	f7fd fc31 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003362:	2055      	movs	r0, #85	; 0x55
 8003364:	f7fd fc2e 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003368:	2000      	movs	r0, #0
 800336a:	f7fd fc2b 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 800336e:	2045      	movs	r0, #69	; 0x45
 8003370:	f7fd fc28 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003374:	2000      	movs	r0, #0
 8003376:	f7fd fc25 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 800337a:	2043      	movs	r0, #67	; 0x43
 800337c:	f7fd fc22 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003380:	2000      	movs	r0, #0
 8003382:	f7fd fc1f 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003386:	2044      	movs	r0, #68	; 0x44
 8003388:	f7fd fc1c 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800338c:	2000      	movs	r0, #0
 800338e:	f7fd fc19 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 8003392:	20e7      	movs	r0, #231	; 0xe7
 8003394:	f7fd fbf2 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8003398:	2032      	movs	r0, #50	; 0x32
 800339a:	f7fd fc13 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800339e:	2000      	movs	r0, #0
 80033a0:	f7fd fc10 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80033a4:	2055      	movs	r0, #85	; 0x55
 80033a6:	f7fd fc0d 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033aa:	2000      	movs	r0, #0
 80033ac:	f7fd fc0a 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80033b0:	2076      	movs	r0, #118	; 0x76
 80033b2:	f7fd fc07 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033b6:	2000      	movs	r0, #0
 80033b8:	f7fd fc04 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80033bc:	2066      	movs	r0, #102	; 0x66
 80033be:	f7fd fc01 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033c2:	2000      	movs	r0, #0
 80033c4:	f7fd fbfe 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80033c8:	2067      	movs	r0, #103	; 0x67
 80033ca:	f7fd fbfb 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033ce:	2000      	movs	r0, #0
 80033d0:	f7fd fbf8 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80033d4:	2067      	movs	r0, #103	; 0x67
 80033d6:	f7fd fbf5 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033da:	2000      	movs	r0, #0
 80033dc:	f7fd fbf2 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 80033e0:	2087      	movs	r0, #135	; 0x87
 80033e2:	f7fd fbef 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033e6:	2000      	movs	r0, #0
 80033e8:	f7fd fbec 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80033ec:	2099      	movs	r0, #153	; 0x99
 80033ee:	f7fd fbe9 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033f2:	2000      	movs	r0, #0
 80033f4:	f7fd fbe6 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80033f8:	20bb      	movs	r0, #187	; 0xbb
 80033fa:	f7fd fbe3 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033fe:	2000      	movs	r0, #0
 8003400:	f7fd fbe0 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003404:	2099      	movs	r0, #153	; 0x99
 8003406:	f7fd fbdd 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800340a:	2000      	movs	r0, #0
 800340c:	f7fd fbda 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003410:	2077      	movs	r0, #119	; 0x77
 8003412:	f7fd fbd7 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003416:	2000      	movs	r0, #0
 8003418:	f7fd fbd4 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800341c:	2044      	movs	r0, #68	; 0x44
 800341e:	f7fd fbd1 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003422:	2000      	movs	r0, #0
 8003424:	f7fd fbce 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8003428:	2056      	movs	r0, #86	; 0x56
 800342a:	f7fd fbcb 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800342e:	2000      	movs	r0, #0
 8003430:	f7fd fbc8 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8003434:	2023      	movs	r0, #35	; 0x23
 8003436:	f7fd fbc5 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800343a:	2000      	movs	r0, #0
 800343c:	f7fd fbc2 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8003440:	2033      	movs	r0, #51	; 0x33
 8003442:	f7fd fbbf 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003446:	2000      	movs	r0, #0
 8003448:	f7fd fbbc 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 800344c:	2045      	movs	r0, #69	; 0x45
 800344e:	f7fd fbb9 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003452:	2000      	movs	r0, #0
 8003454:	f7fd fbb6 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8003458:	20e8      	movs	r0, #232	; 0xe8
 800345a:	f7fd fb8f 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800345e:	2000      	movs	r0, #0
 8003460:	f7fd fbb0 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003464:	2000      	movs	r0, #0
 8003466:	f7fd fbad 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800346a:	2099      	movs	r0, #153	; 0x99
 800346c:	f7fd fbaa 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003470:	2000      	movs	r0, #0
 8003472:	f7fd fba7 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8003476:	2087      	movs	r0, #135	; 0x87
 8003478:	f7fd fba4 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800347c:	2000      	movs	r0, #0
 800347e:	f7fd fba1 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003482:	2088      	movs	r0, #136	; 0x88
 8003484:	f7fd fb9e 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003488:	2000      	movs	r0, #0
 800348a:	f7fd fb9b 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 800348e:	2077      	movs	r0, #119	; 0x77
 8003490:	f7fd fb98 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003494:	2000      	movs	r0, #0
 8003496:	f7fd fb95 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800349a:	2066      	movs	r0, #102	; 0x66
 800349c:	f7fd fb92 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034a0:	2000      	movs	r0, #0
 80034a2:	f7fd fb8f 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80034a6:	2088      	movs	r0, #136	; 0x88
 80034a8:	f7fd fb8c 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034ac:	2000      	movs	r0, #0
 80034ae:	f7fd fb89 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 80034b2:	20aa      	movs	r0, #170	; 0xaa
 80034b4:	f7fd fb86 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034b8:	2000      	movs	r0, #0
 80034ba:	f7fd fb83 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80034be:	20bb      	movs	r0, #187	; 0xbb
 80034c0:	f7fd fb80 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034c4:	2000      	movs	r0, #0
 80034c6:	f7fd fb7d 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80034ca:	2099      	movs	r0, #153	; 0x99
 80034cc:	f7fd fb7a 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034d0:	2000      	movs	r0, #0
 80034d2:	f7fd fb77 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80034d6:	2066      	movs	r0, #102	; 0x66
 80034d8:	f7fd fb74 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034dc:	2000      	movs	r0, #0
 80034de:	f7fd fb71 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80034e2:	2055      	movs	r0, #85	; 0x55
 80034e4:	f7fd fb6e 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034e8:	2000      	movs	r0, #0
 80034ea:	f7fd fb6b 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80034ee:	2055      	movs	r0, #85	; 0x55
 80034f0:	f7fd fb68 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034f4:	2000      	movs	r0, #0
 80034f6:	f7fd fb65 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80034fa:	2044      	movs	r0, #68	; 0x44
 80034fc:	f7fd fb62 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003500:	2000      	movs	r0, #0
 8003502:	f7fd fb5f 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003506:	2044      	movs	r0, #68	; 0x44
 8003508:	f7fd fb5c 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800350c:	2000      	movs	r0, #0
 800350e:	f7fd fb59 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003512:	2055      	movs	r0, #85	; 0x55
 8003514:	f7fd fb56 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003518:	2000      	movs	r0, #0
 800351a:	f7fd fb53 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 800351e:	20e9      	movs	r0, #233	; 0xe9
 8003520:	f7fd fb2c 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8003524:	20aa      	movs	r0, #170	; 0xaa
 8003526:	f7fd fb4d 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800352a:	2000      	movs	r0, #0
 800352c:	f7fd fb4a 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003530:	2000      	movs	r0, #0
 8003532:	f7fd fb47 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003536:	2000      	movs	r0, #0
 8003538:	f7fd fb44 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 800353c:	2000      	movs	r0, #0
 800353e:	f7fd fb1d 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8003542:	20aa      	movs	r0, #170	; 0xaa
 8003544:	f7fd fb3e 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8003548:	20cf      	movs	r0, #207	; 0xcf
 800354a:	f7fd fb17 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800354e:	2000      	movs	r0, #0
 8003550:	f7fd fb38 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003554:	2000      	movs	r0, #0
 8003556:	f7fd fb35 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800355a:	2000      	movs	r0, #0
 800355c:	f7fd fb32 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003560:	2000      	movs	r0, #0
 8003562:	f7fd fb2f 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003566:	2000      	movs	r0, #0
 8003568:	f7fd fb2c 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800356c:	2000      	movs	r0, #0
 800356e:	f7fd fb29 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003572:	2000      	movs	r0, #0
 8003574:	f7fd fb26 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003578:	2000      	movs	r0, #0
 800357a:	f7fd fb23 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800357e:	2000      	movs	r0, #0
 8003580:	f7fd fb20 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003584:	2000      	movs	r0, #0
 8003586:	f7fd fb1d 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800358a:	2000      	movs	r0, #0
 800358c:	f7fd fb1a 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003590:	2000      	movs	r0, #0
 8003592:	f7fd fb17 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003596:	2000      	movs	r0, #0
 8003598:	f7fd fb14 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800359c:	2000      	movs	r0, #0
 800359e:	f7fd fb11 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035a2:	2000      	movs	r0, #0
 80035a4:	f7fd fb0e 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035a8:	2000      	movs	r0, #0
 80035aa:	f7fd fb0b 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035ae:	2000      	movs	r0, #0
 80035b0:	f7fd fb08 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 80035b4:	20f0      	movs	r0, #240	; 0xf0
 80035b6:	f7fd fae1 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80035ba:	2000      	movs	r0, #0
 80035bc:	f7fd fb02 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 80035c0:	2050      	movs	r0, #80	; 0x50
 80035c2:	f7fd faff 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035c6:	2000      	movs	r0, #0
 80035c8:	f7fd fafc 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035cc:	2000      	movs	r0, #0
 80035ce:	f7fd faf9 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035d2:	2000      	movs	r0, #0
 80035d4:	f7fd faf6 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 80035d8:	20f3      	movs	r0, #243	; 0xf3
 80035da:	f7fd facf 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80035de:	2000      	movs	r0, #0
 80035e0:	f7fd faf0 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 80035e4:	20f9      	movs	r0, #249	; 0xf9
 80035e6:	f7fd fac9 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 80035ea:	2006      	movs	r0, #6
 80035ec:	f7fd faea 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80035f0:	2010      	movs	r0, #16
 80035f2:	f7fd fae7 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80035f6:	2029      	movs	r0, #41	; 0x29
 80035f8:	f7fd fae4 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035fc:	2000      	movs	r0, #0
 80035fe:	f7fd fae1 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 8003602:	203a      	movs	r0, #58	; 0x3a
 8003604:	f7fd faba 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8003608:	2055      	movs	r0, #85	; 0x55
 800360a:	f7fd fadb 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 800360e:	2011      	movs	r0, #17
 8003610:	f7fd fab4 	bl	8000b7c <LCD_WR_REG>
		HAL_Delay(100);
 8003614:	2064      	movs	r0, #100	; 0x64
 8003616:	f004 fd31 	bl	800807c <HAL_Delay>
		LCD_WR_REG(0x29);
 800361a:	2029      	movs	r0, #41	; 0x29
 800361c:	f7fd faae 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8003620:	2035      	movs	r0, #53	; 0x35
 8003622:	f7fd faab 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003626:	2000      	movs	r0, #0
 8003628:	f7fd facc 	bl	8000bc4 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 800362c:	2051      	movs	r0, #81	; 0x51
 800362e:	f7fd faa5 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 8003632:	20ff      	movs	r0, #255	; 0xff
 8003634:	f7fd fac6 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8003638:	2053      	movs	r0, #83	; 0x53
 800363a:	f7fd fa9f 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 800363e:	202c      	movs	r0, #44	; 0x2c
 8003640:	f7fd fac0 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 8003644:	2055      	movs	r0, #85	; 0x55
 8003646:	f7fd fa99 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 800364a:	2082      	movs	r0, #130	; 0x82
 800364c:	f7fd faba 	bl	8000bc4 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8003650:	202c      	movs	r0, #44	; 0x2c
 8003652:	f7fd fa93 	bl	8000b7c <LCD_WR_REG>
 8003656:	f002 bca1 	b.w	8005f9c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 800365a:	4b04      	ldr	r3, [pc, #16]	; (800366c <LCD_Init+0x1504>)
 800365c:	889b      	ldrh	r3, [r3, #4]
 800365e:	f245 5210 	movw	r2, #21776	; 0x5510
 8003662:	4293      	cmp	r3, r2
 8003664:	f040 8782 	bne.w	800456c <LCD_Init+0x2404>
 8003668:	e002      	b.n	8003670 <LCD_Init+0x1508>
 800366a:	bf00      	nop
 800366c:	200005d4 	.word	0x200005d4
		LCD_WriteReg(0xF000, 0x55);
 8003670:	2155      	movs	r1, #85	; 0x55
 8003672:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003676:	f7fd fb0d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 800367a:	21aa      	movs	r1, #170	; 0xaa
 800367c:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003680:	f7fd fb08 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8003684:	2152      	movs	r1, #82	; 0x52
 8003686:	f24f 0002 	movw	r0, #61442	; 0xf002
 800368a:	f7fd fb03 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 800368e:	2108      	movs	r1, #8
 8003690:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003694:	f7fd fafe 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 8003698:	2101      	movs	r1, #1
 800369a:	f24f 0004 	movw	r0, #61444	; 0xf004
 800369e:	f7fd faf9 	bl	8000c94 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 80036a2:	210d      	movs	r1, #13
 80036a4:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 80036a8:	f7fd faf4 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 80036ac:	210d      	movs	r1, #13
 80036ae:	f24b 0001 	movw	r0, #45057	; 0xb001
 80036b2:	f7fd faef 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 80036b6:	210d      	movs	r1, #13
 80036b8:	f24b 0002 	movw	r0, #45058	; 0xb002
 80036bc:	f7fd faea 	bl	8000c94 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 80036c0:	2134      	movs	r1, #52	; 0x34
 80036c2:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80036c6:	f7fd fae5 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 80036ca:	2134      	movs	r1, #52	; 0x34
 80036cc:	f24b 6001 	movw	r0, #46593	; 0xb601
 80036d0:	f7fd fae0 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 80036d4:	2134      	movs	r1, #52	; 0x34
 80036d6:	f24b 6002 	movw	r0, #46594	; 0xb602
 80036da:	f7fd fadb 	bl	8000c94 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 80036de:	210d      	movs	r1, #13
 80036e0:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80036e4:	f7fd fad6 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 80036e8:	210d      	movs	r1, #13
 80036ea:	f24b 1001 	movw	r0, #45313	; 0xb101
 80036ee:	f7fd fad1 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 80036f2:	210d      	movs	r1, #13
 80036f4:	f24b 1002 	movw	r0, #45314	; 0xb102
 80036f8:	f7fd facc 	bl	8000c94 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 80036fc:	2134      	movs	r1, #52	; 0x34
 80036fe:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003702:	f7fd fac7 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 8003706:	2134      	movs	r1, #52	; 0x34
 8003708:	f24b 7001 	movw	r0, #46849	; 0xb701
 800370c:	f7fd fac2 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 8003710:	2134      	movs	r1, #52	; 0x34
 8003712:	f24b 7002 	movw	r0, #46850	; 0xb702
 8003716:	f7fd fabd 	bl	8000c94 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 800371a:	2100      	movs	r1, #0
 800371c:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8003720:	f7fd fab8 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 8003724:	2100      	movs	r1, #0
 8003726:	f24b 2001 	movw	r0, #45569	; 0xb201
 800372a:	f7fd fab3 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 800372e:	2100      	movs	r1, #0
 8003730:	f24b 2002 	movw	r0, #45570	; 0xb202
 8003734:	f7fd faae 	bl	8000c94 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 8003738:	2124      	movs	r1, #36	; 0x24
 800373a:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 800373e:	f7fd faa9 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 8003742:	2124      	movs	r1, #36	; 0x24
 8003744:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003748:	f7fd faa4 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 800374c:	2124      	movs	r1, #36	; 0x24
 800374e:	f64b 0002 	movw	r0, #47106	; 0xb802
 8003752:	f7fd fa9f 	bl	8000c94 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 8003756:	2101      	movs	r1, #1
 8003758:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 800375c:	f7fd fa9a 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 8003760:	210f      	movs	r1, #15
 8003762:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8003766:	f7fd fa95 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 800376a:	210f      	movs	r1, #15
 800376c:	f24b 3001 	movw	r0, #45825	; 0xb301
 8003770:	f7fd fa90 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 8003774:	210f      	movs	r1, #15
 8003776:	f24b 3002 	movw	r0, #45826	; 0xb302
 800377a:	f7fd fa8b 	bl	8000c94 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 800377e:	2134      	movs	r1, #52	; 0x34
 8003780:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8003784:	f7fd fa86 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 8003788:	2134      	movs	r1, #52	; 0x34
 800378a:	f64b 1001 	movw	r0, #47361	; 0xb901
 800378e:	f7fd fa81 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 8003792:	2134      	movs	r1, #52	; 0x34
 8003794:	f64b 1002 	movw	r0, #47362	; 0xb902
 8003798:	f7fd fa7c 	bl	8000c94 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 800379c:	2108      	movs	r1, #8
 800379e:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80037a2:	f7fd fa77 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 80037a6:	2108      	movs	r1, #8
 80037a8:	f24b 5001 	movw	r0, #46337	; 0xb501
 80037ac:	f7fd fa72 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 80037b0:	2108      	movs	r1, #8
 80037b2:	f24b 5002 	movw	r0, #46338	; 0xb502
 80037b6:	f7fd fa6d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 80037ba:	2103      	movs	r1, #3
 80037bc:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 80037c0:	f7fd fa68 	bl	8000c94 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 80037c4:	2124      	movs	r1, #36	; 0x24
 80037c6:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 80037ca:	f7fd fa63 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 80037ce:	2124      	movs	r1, #36	; 0x24
 80037d0:	f64b 2001 	movw	r0, #47617	; 0xba01
 80037d4:	f7fd fa5e 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 80037d8:	2124      	movs	r1, #36	; 0x24
 80037da:	f64b 2002 	movw	r0, #47618	; 0xba02
 80037de:	f7fd fa59 	bl	8000c94 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 80037e2:	2100      	movs	r1, #0
 80037e4:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80037e8:	f7fd fa54 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 80037ec:	2178      	movs	r1, #120	; 0x78
 80037ee:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80037f2:	f7fd fa4f 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 80037f6:	2100      	movs	r1, #0
 80037f8:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80037fc:	f7fd fa4a 	bl	8000c94 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 8003800:	2100      	movs	r1, #0
 8003802:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8003806:	f7fd fa45 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 800380a:	2178      	movs	r1, #120	; 0x78
 800380c:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8003810:	f7fd fa40 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 8003814:	2100      	movs	r1, #0
 8003816:	f64b 5002 	movw	r0, #48386	; 0xbd02
 800381a:	f7fd fa3b 	bl	8000c94 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 800381e:	2100      	movs	r1, #0
 8003820:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8003824:	f7fd fa36 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 8003828:	2164      	movs	r1, #100	; 0x64
 800382a:	f64b 6001 	movw	r0, #48641	; 0xbe01
 800382e:	f7fd fa31 	bl	8000c94 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 8003832:	2100      	movs	r1, #0
 8003834:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8003838:	f7fd fa2c 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 800383c:	2133      	movs	r1, #51	; 0x33
 800383e:	f24d 1001 	movw	r0, #53505	; 0xd101
 8003842:	f7fd fa27 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 8003846:	2100      	movs	r1, #0
 8003848:	f24d 1002 	movw	r0, #53506	; 0xd102
 800384c:	f7fd fa22 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 8003850:	2134      	movs	r1, #52	; 0x34
 8003852:	f24d 1003 	movw	r0, #53507	; 0xd103
 8003856:	f7fd fa1d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 800385a:	2100      	movs	r1, #0
 800385c:	f24d 1004 	movw	r0, #53508	; 0xd104
 8003860:	f7fd fa18 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 8003864:	213a      	movs	r1, #58	; 0x3a
 8003866:	f24d 1005 	movw	r0, #53509	; 0xd105
 800386a:	f7fd fa13 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 800386e:	2100      	movs	r1, #0
 8003870:	f24d 1006 	movw	r0, #53510	; 0xd106
 8003874:	f7fd fa0e 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 8003878:	214a      	movs	r1, #74	; 0x4a
 800387a:	f24d 1007 	movw	r0, #53511	; 0xd107
 800387e:	f7fd fa09 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 8003882:	2100      	movs	r1, #0
 8003884:	f24d 1008 	movw	r0, #53512	; 0xd108
 8003888:	f7fd fa04 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 800388c:	215c      	movs	r1, #92	; 0x5c
 800388e:	f24d 1009 	movw	r0, #53513	; 0xd109
 8003892:	f7fd f9ff 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 8003896:	2100      	movs	r1, #0
 8003898:	f24d 100a 	movw	r0, #53514	; 0xd10a
 800389c:	f7fd f9fa 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 80038a0:	2181      	movs	r1, #129	; 0x81
 80038a2:	f24d 100b 	movw	r0, #53515	; 0xd10b
 80038a6:	f7fd f9f5 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 80038aa:	2100      	movs	r1, #0
 80038ac:	f24d 100c 	movw	r0, #53516	; 0xd10c
 80038b0:	f7fd f9f0 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 80038b4:	21a6      	movs	r1, #166	; 0xa6
 80038b6:	f24d 100d 	movw	r0, #53517	; 0xd10d
 80038ba:	f7fd f9eb 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 80038be:	2100      	movs	r1, #0
 80038c0:	f24d 100e 	movw	r0, #53518	; 0xd10e
 80038c4:	f7fd f9e6 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 80038c8:	21e5      	movs	r1, #229	; 0xe5
 80038ca:	f24d 100f 	movw	r0, #53519	; 0xd10f
 80038ce:	f7fd f9e1 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 80038d2:	2101      	movs	r1, #1
 80038d4:	f24d 1010 	movw	r0, #53520	; 0xd110
 80038d8:	f7fd f9dc 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 80038dc:	2113      	movs	r1, #19
 80038de:	f24d 1011 	movw	r0, #53521	; 0xd111
 80038e2:	f7fd f9d7 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 80038e6:	2101      	movs	r1, #1
 80038e8:	f24d 1012 	movw	r0, #53522	; 0xd112
 80038ec:	f7fd f9d2 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 80038f0:	2154      	movs	r1, #84	; 0x54
 80038f2:	f24d 1013 	movw	r0, #53523	; 0xd113
 80038f6:	f7fd f9cd 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 80038fa:	2101      	movs	r1, #1
 80038fc:	f24d 1014 	movw	r0, #53524	; 0xd114
 8003900:	f7fd f9c8 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 8003904:	2182      	movs	r1, #130	; 0x82
 8003906:	f24d 1015 	movw	r0, #53525	; 0xd115
 800390a:	f7fd f9c3 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 800390e:	2101      	movs	r1, #1
 8003910:	f24d 1016 	movw	r0, #53526	; 0xd116
 8003914:	f7fd f9be 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 8003918:	21ca      	movs	r1, #202	; 0xca
 800391a:	f24d 1017 	movw	r0, #53527	; 0xd117
 800391e:	f7fd f9b9 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 8003922:	2102      	movs	r1, #2
 8003924:	f24d 1018 	movw	r0, #53528	; 0xd118
 8003928:	f7fd f9b4 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 800392c:	2100      	movs	r1, #0
 800392e:	f24d 1019 	movw	r0, #53529	; 0xd119
 8003932:	f7fd f9af 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 8003936:	2102      	movs	r1, #2
 8003938:	f24d 101a 	movw	r0, #53530	; 0xd11a
 800393c:	f7fd f9aa 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 8003940:	2101      	movs	r1, #1
 8003942:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8003946:	f7fd f9a5 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 800394a:	2102      	movs	r1, #2
 800394c:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8003950:	f7fd f9a0 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 8003954:	2134      	movs	r1, #52	; 0x34
 8003956:	f24d 101d 	movw	r0, #53533	; 0xd11d
 800395a:	f7fd f99b 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 800395e:	2102      	movs	r1, #2
 8003960:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8003964:	f7fd f996 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 8003968:	2167      	movs	r1, #103	; 0x67
 800396a:	f24d 101f 	movw	r0, #53535	; 0xd11f
 800396e:	f7fd f991 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 8003972:	2102      	movs	r1, #2
 8003974:	f24d 1020 	movw	r0, #53536	; 0xd120
 8003978:	f7fd f98c 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 800397c:	2184      	movs	r1, #132	; 0x84
 800397e:	f24d 1021 	movw	r0, #53537	; 0xd121
 8003982:	f7fd f987 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 8003986:	2102      	movs	r1, #2
 8003988:	f24d 1022 	movw	r0, #53538	; 0xd122
 800398c:	f7fd f982 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 8003990:	21a4      	movs	r1, #164	; 0xa4
 8003992:	f24d 1023 	movw	r0, #53539	; 0xd123
 8003996:	f7fd f97d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 800399a:	2102      	movs	r1, #2
 800399c:	f24d 1024 	movw	r0, #53540	; 0xd124
 80039a0:	f7fd f978 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 80039a4:	21b7      	movs	r1, #183	; 0xb7
 80039a6:	f24d 1025 	movw	r0, #53541	; 0xd125
 80039aa:	f7fd f973 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 80039ae:	2102      	movs	r1, #2
 80039b0:	f24d 1026 	movw	r0, #53542	; 0xd126
 80039b4:	f7fd f96e 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 80039b8:	21cf      	movs	r1, #207	; 0xcf
 80039ba:	f24d 1027 	movw	r0, #53543	; 0xd127
 80039be:	f7fd f969 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 80039c2:	2102      	movs	r1, #2
 80039c4:	f24d 1028 	movw	r0, #53544	; 0xd128
 80039c8:	f7fd f964 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 80039cc:	21de      	movs	r1, #222	; 0xde
 80039ce:	f24d 1029 	movw	r0, #53545	; 0xd129
 80039d2:	f7fd f95f 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 80039d6:	2102      	movs	r1, #2
 80039d8:	f24d 102a 	movw	r0, #53546	; 0xd12a
 80039dc:	f7fd f95a 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 80039e0:	21f2      	movs	r1, #242	; 0xf2
 80039e2:	f24d 102b 	movw	r0, #53547	; 0xd12b
 80039e6:	f7fd f955 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 80039ea:	2102      	movs	r1, #2
 80039ec:	f24d 102c 	movw	r0, #53548	; 0xd12c
 80039f0:	f7fd f950 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 80039f4:	21fe      	movs	r1, #254	; 0xfe
 80039f6:	f24d 102d 	movw	r0, #53549	; 0xd12d
 80039fa:	f7fd f94b 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 80039fe:	2103      	movs	r1, #3
 8003a00:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8003a04:	f7fd f946 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 8003a08:	2110      	movs	r1, #16
 8003a0a:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8003a0e:	f7fd f941 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 8003a12:	2103      	movs	r1, #3
 8003a14:	f24d 1030 	movw	r0, #53552	; 0xd130
 8003a18:	f7fd f93c 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 8003a1c:	2133      	movs	r1, #51	; 0x33
 8003a1e:	f24d 1031 	movw	r0, #53553	; 0xd131
 8003a22:	f7fd f937 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 8003a26:	2103      	movs	r1, #3
 8003a28:	f24d 1032 	movw	r0, #53554	; 0xd132
 8003a2c:	f7fd f932 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 8003a30:	216d      	movs	r1, #109	; 0x6d
 8003a32:	f24d 1033 	movw	r0, #53555	; 0xd133
 8003a36:	f7fd f92d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8003a40:	f7fd f928 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 8003a44:	2133      	movs	r1, #51	; 0x33
 8003a46:	f24d 2001 	movw	r0, #53761	; 0xd201
 8003a4a:	f7fd f923 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 8003a4e:	2100      	movs	r1, #0
 8003a50:	f24d 2002 	movw	r0, #53762	; 0xd202
 8003a54:	f7fd f91e 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 8003a58:	2134      	movs	r1, #52	; 0x34
 8003a5a:	f24d 2003 	movw	r0, #53763	; 0xd203
 8003a5e:	f7fd f919 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 8003a62:	2100      	movs	r1, #0
 8003a64:	f24d 2004 	movw	r0, #53764	; 0xd204
 8003a68:	f7fd f914 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 8003a6c:	213a      	movs	r1, #58	; 0x3a
 8003a6e:	f24d 2005 	movw	r0, #53765	; 0xd205
 8003a72:	f7fd f90f 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 8003a76:	2100      	movs	r1, #0
 8003a78:	f24d 2006 	movw	r0, #53766	; 0xd206
 8003a7c:	f7fd f90a 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 8003a80:	214a      	movs	r1, #74	; 0x4a
 8003a82:	f24d 2007 	movw	r0, #53767	; 0xd207
 8003a86:	f7fd f905 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	f24d 2008 	movw	r0, #53768	; 0xd208
 8003a90:	f7fd f900 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 8003a94:	215c      	movs	r1, #92	; 0x5c
 8003a96:	f24d 2009 	movw	r0, #53769	; 0xd209
 8003a9a:	f7fd f8fb 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8003aa4:	f7fd f8f6 	bl	8000c94 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 8003aa8:	2181      	movs	r1, #129	; 0x81
 8003aaa:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8003aae:	f7fd f8f1 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8003ab8:	f7fd f8ec 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 8003abc:	21a6      	movs	r1, #166	; 0xa6
 8003abe:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8003ac2:	f7fd f8e7 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8003acc:	f7fd f8e2 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 8003ad0:	21e5      	movs	r1, #229	; 0xe5
 8003ad2:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8003ad6:	f7fd f8dd 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 8003ada:	2101      	movs	r1, #1
 8003adc:	f24d 2010 	movw	r0, #53776	; 0xd210
 8003ae0:	f7fd f8d8 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 8003ae4:	2113      	movs	r1, #19
 8003ae6:	f24d 2011 	movw	r0, #53777	; 0xd211
 8003aea:	f7fd f8d3 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 8003aee:	2101      	movs	r1, #1
 8003af0:	f24d 2012 	movw	r0, #53778	; 0xd212
 8003af4:	f7fd f8ce 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 8003af8:	2154      	movs	r1, #84	; 0x54
 8003afa:	f24d 2013 	movw	r0, #53779	; 0xd213
 8003afe:	f7fd f8c9 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 8003b02:	2101      	movs	r1, #1
 8003b04:	f24d 2014 	movw	r0, #53780	; 0xd214
 8003b08:	f7fd f8c4 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 8003b0c:	2182      	movs	r1, #130	; 0x82
 8003b0e:	f24d 2015 	movw	r0, #53781	; 0xd215
 8003b12:	f7fd f8bf 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 8003b16:	2101      	movs	r1, #1
 8003b18:	f24d 2016 	movw	r0, #53782	; 0xd216
 8003b1c:	f7fd f8ba 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8003b20:	21ca      	movs	r1, #202	; 0xca
 8003b22:	f24d 2017 	movw	r0, #53783	; 0xd217
 8003b26:	f7fd f8b5 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 8003b2a:	2102      	movs	r1, #2
 8003b2c:	f24d 2018 	movw	r0, #53784	; 0xd218
 8003b30:	f7fd f8b0 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 8003b34:	2100      	movs	r1, #0
 8003b36:	f24d 2019 	movw	r0, #53785	; 0xd219
 8003b3a:	f7fd f8ab 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 8003b3e:	2102      	movs	r1, #2
 8003b40:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8003b44:	f7fd f8a6 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8003b48:	2101      	movs	r1, #1
 8003b4a:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8003b4e:	f7fd f8a1 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 8003b52:	2102      	movs	r1, #2
 8003b54:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8003b58:	f7fd f89c 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 8003b5c:	2134      	movs	r1, #52	; 0x34
 8003b5e:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8003b62:	f7fd f897 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 8003b66:	2102      	movs	r1, #2
 8003b68:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8003b6c:	f7fd f892 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 8003b70:	2167      	movs	r1, #103	; 0x67
 8003b72:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8003b76:	f7fd f88d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 8003b7a:	2102      	movs	r1, #2
 8003b7c:	f24d 2020 	movw	r0, #53792	; 0xd220
 8003b80:	f7fd f888 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 8003b84:	2184      	movs	r1, #132	; 0x84
 8003b86:	f24d 2021 	movw	r0, #53793	; 0xd221
 8003b8a:	f7fd f883 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 8003b8e:	2102      	movs	r1, #2
 8003b90:	f24d 2022 	movw	r0, #53794	; 0xd222
 8003b94:	f7fd f87e 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 8003b98:	21a4      	movs	r1, #164	; 0xa4
 8003b9a:	f24d 2023 	movw	r0, #53795	; 0xd223
 8003b9e:	f7fd f879 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 8003ba2:	2102      	movs	r1, #2
 8003ba4:	f24d 2024 	movw	r0, #53796	; 0xd224
 8003ba8:	f7fd f874 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 8003bac:	21b7      	movs	r1, #183	; 0xb7
 8003bae:	f24d 2025 	movw	r0, #53797	; 0xd225
 8003bb2:	f7fd f86f 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 8003bb6:	2102      	movs	r1, #2
 8003bb8:	f24d 2026 	movw	r0, #53798	; 0xd226
 8003bbc:	f7fd f86a 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 8003bc0:	21cf      	movs	r1, #207	; 0xcf
 8003bc2:	f24d 2027 	movw	r0, #53799	; 0xd227
 8003bc6:	f7fd f865 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 8003bca:	2102      	movs	r1, #2
 8003bcc:	f24d 2028 	movw	r0, #53800	; 0xd228
 8003bd0:	f7fd f860 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 8003bd4:	21de      	movs	r1, #222	; 0xde
 8003bd6:	f24d 2029 	movw	r0, #53801	; 0xd229
 8003bda:	f7fd f85b 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 8003bde:	2102      	movs	r1, #2
 8003be0:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8003be4:	f7fd f856 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 8003be8:	21f2      	movs	r1, #242	; 0xf2
 8003bea:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8003bee:	f7fd f851 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 8003bf2:	2102      	movs	r1, #2
 8003bf4:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8003bf8:	f7fd f84c 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 8003bfc:	21fe      	movs	r1, #254	; 0xfe
 8003bfe:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8003c02:	f7fd f847 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 8003c06:	2103      	movs	r1, #3
 8003c08:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8003c0c:	f7fd f842 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 8003c10:	2110      	movs	r1, #16
 8003c12:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8003c16:	f7fd f83d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 8003c1a:	2103      	movs	r1, #3
 8003c1c:	f24d 2030 	movw	r0, #53808	; 0xd230
 8003c20:	f7fd f838 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 8003c24:	2133      	movs	r1, #51	; 0x33
 8003c26:	f24d 2031 	movw	r0, #53809	; 0xd231
 8003c2a:	f7fd f833 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 8003c2e:	2103      	movs	r1, #3
 8003c30:	f24d 2032 	movw	r0, #53810	; 0xd232
 8003c34:	f7fd f82e 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8003c38:	216d      	movs	r1, #109	; 0x6d
 8003c3a:	f24d 2033 	movw	r0, #53811	; 0xd233
 8003c3e:	f7fd f829 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 8003c42:	2100      	movs	r1, #0
 8003c44:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003c48:	f7fd f824 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 8003c4c:	2133      	movs	r1, #51	; 0x33
 8003c4e:	f24d 3001 	movw	r0, #54017	; 0xd301
 8003c52:	f7fd f81f 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 8003c56:	2100      	movs	r1, #0
 8003c58:	f24d 3002 	movw	r0, #54018	; 0xd302
 8003c5c:	f7fd f81a 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 8003c60:	2134      	movs	r1, #52	; 0x34
 8003c62:	f24d 3003 	movw	r0, #54019	; 0xd303
 8003c66:	f7fd f815 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	f24d 3004 	movw	r0, #54020	; 0xd304
 8003c70:	f7fd f810 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 8003c74:	213a      	movs	r1, #58	; 0x3a
 8003c76:	f24d 3005 	movw	r0, #54021	; 0xd305
 8003c7a:	f7fd f80b 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 8003c7e:	2100      	movs	r1, #0
 8003c80:	f24d 3006 	movw	r0, #54022	; 0xd306
 8003c84:	f7fd f806 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8003c88:	214a      	movs	r1, #74	; 0x4a
 8003c8a:	f24d 3007 	movw	r0, #54023	; 0xd307
 8003c8e:	f7fd f801 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 8003c92:	2100      	movs	r1, #0
 8003c94:	f24d 3008 	movw	r0, #54024	; 0xd308
 8003c98:	f7fc fffc 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 8003c9c:	215c      	movs	r1, #92	; 0x5c
 8003c9e:	f24d 3009 	movw	r0, #54025	; 0xd309
 8003ca2:	f7fc fff7 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8003cac:	f7fc fff2 	bl	8000c94 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8003cb0:	2181      	movs	r1, #129	; 0x81
 8003cb2:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8003cb6:	f7fc ffed 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 8003cba:	2100      	movs	r1, #0
 8003cbc:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8003cc0:	f7fc ffe8 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 8003cc4:	21a6      	movs	r1, #166	; 0xa6
 8003cc6:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8003cca:	f7fc ffe3 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 8003cce:	2100      	movs	r1, #0
 8003cd0:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8003cd4:	f7fc ffde 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8003cd8:	21e5      	movs	r1, #229	; 0xe5
 8003cda:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8003cde:	f7fc ffd9 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	f24d 3010 	movw	r0, #54032	; 0xd310
 8003ce8:	f7fc ffd4 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 8003cec:	2113      	movs	r1, #19
 8003cee:	f24d 3011 	movw	r0, #54033	; 0xd311
 8003cf2:	f7fc ffcf 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	f24d 3012 	movw	r0, #54034	; 0xd312
 8003cfc:	f7fc ffca 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8003d00:	2154      	movs	r1, #84	; 0x54
 8003d02:	f24d 3013 	movw	r0, #54035	; 0xd313
 8003d06:	f7fc ffc5 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	f24d 3014 	movw	r0, #54036	; 0xd314
 8003d10:	f7fc ffc0 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 8003d14:	2182      	movs	r1, #130	; 0x82
 8003d16:	f24d 3015 	movw	r0, #54037	; 0xd315
 8003d1a:	f7fc ffbb 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 8003d1e:	2101      	movs	r1, #1
 8003d20:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003d24:	f7fc ffb6 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8003d28:	21ca      	movs	r1, #202	; 0xca
 8003d2a:	f24d 3017 	movw	r0, #54039	; 0xd317
 8003d2e:	f7fc ffb1 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 8003d32:	2102      	movs	r1, #2
 8003d34:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003d38:	f7fc ffac 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	f24d 3019 	movw	r0, #54041	; 0xd319
 8003d42:	f7fc ffa7 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 8003d46:	2102      	movs	r1, #2
 8003d48:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003d4c:	f7fc ffa2 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8003d50:	2101      	movs	r1, #1
 8003d52:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8003d56:	f7fc ff9d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 8003d5a:	2102      	movs	r1, #2
 8003d5c:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8003d60:	f7fc ff98 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 8003d64:	2134      	movs	r1, #52	; 0x34
 8003d66:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8003d6a:	f7fc ff93 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 8003d6e:	2102      	movs	r1, #2
 8003d70:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8003d74:	f7fc ff8e 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8003d78:	2167      	movs	r1, #103	; 0x67
 8003d7a:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8003d7e:	f7fc ff89 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 8003d82:	2102      	movs	r1, #2
 8003d84:	f24d 3020 	movw	r0, #54048	; 0xd320
 8003d88:	f7fc ff84 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 8003d8c:	2184      	movs	r1, #132	; 0x84
 8003d8e:	f24d 3021 	movw	r0, #54049	; 0xd321
 8003d92:	f7fc ff7f 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 8003d96:	2102      	movs	r1, #2
 8003d98:	f24d 3022 	movw	r0, #54050	; 0xd322
 8003d9c:	f7fc ff7a 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8003da0:	21a4      	movs	r1, #164	; 0xa4
 8003da2:	f24d 3023 	movw	r0, #54051	; 0xd323
 8003da6:	f7fc ff75 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 8003daa:	2102      	movs	r1, #2
 8003dac:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003db0:	f7fc ff70 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8003db4:	21b7      	movs	r1, #183	; 0xb7
 8003db6:	f24d 3025 	movw	r0, #54053	; 0xd325
 8003dba:	f7fc ff6b 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 8003dbe:	2102      	movs	r1, #2
 8003dc0:	f24d 3026 	movw	r0, #54054	; 0xd326
 8003dc4:	f7fc ff66 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8003dc8:	21cf      	movs	r1, #207	; 0xcf
 8003dca:	f24d 3027 	movw	r0, #54055	; 0xd327
 8003dce:	f7fc ff61 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8003dd2:	2102      	movs	r1, #2
 8003dd4:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003dd8:	f7fc ff5c 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 8003ddc:	21de      	movs	r1, #222	; 0xde
 8003dde:	f24d 3029 	movw	r0, #54057	; 0xd329
 8003de2:	f7fc ff57 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8003de6:	2102      	movs	r1, #2
 8003de8:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8003dec:	f7fc ff52 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8003df0:	21f2      	movs	r1, #242	; 0xf2
 8003df2:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003df6:	f7fc ff4d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 8003dfa:	2102      	movs	r1, #2
 8003dfc:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8003e00:	f7fc ff48 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8003e04:	21fe      	movs	r1, #254	; 0xfe
 8003e06:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8003e0a:	f7fc ff43 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 8003e0e:	2103      	movs	r1, #3
 8003e10:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003e14:	f7fc ff3e 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8003e18:	2110      	movs	r1, #16
 8003e1a:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8003e1e:	f7fc ff39 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8003e22:	2103      	movs	r1, #3
 8003e24:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003e28:	f7fc ff34 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 8003e2c:	2133      	movs	r1, #51	; 0x33
 8003e2e:	f24d 3031 	movw	r0, #54065	; 0xd331
 8003e32:	f7fc ff2f 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 8003e36:	2103      	movs	r1, #3
 8003e38:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003e3c:	f7fc ff2a 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8003e40:	216d      	movs	r1, #109	; 0x6d
 8003e42:	f24d 3033 	movw	r0, #54067	; 0xd333
 8003e46:	f7fc ff25 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8003e50:	f7fc ff20 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 8003e54:	2133      	movs	r1, #51	; 0x33
 8003e56:	f24d 4001 	movw	r0, #54273	; 0xd401
 8003e5a:	f7fc ff1b 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 8003e5e:	2100      	movs	r1, #0
 8003e60:	f24d 4002 	movw	r0, #54274	; 0xd402
 8003e64:	f7fc ff16 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8003e68:	2134      	movs	r1, #52	; 0x34
 8003e6a:	f24d 4003 	movw	r0, #54275	; 0xd403
 8003e6e:	f7fc ff11 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 8003e72:	2100      	movs	r1, #0
 8003e74:	f24d 4004 	movw	r0, #54276	; 0xd404
 8003e78:	f7fc ff0c 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 8003e7c:	213a      	movs	r1, #58	; 0x3a
 8003e7e:	f24d 4005 	movw	r0, #54277	; 0xd405
 8003e82:	f7fc ff07 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 8003e86:	2100      	movs	r1, #0
 8003e88:	f24d 4006 	movw	r0, #54278	; 0xd406
 8003e8c:	f7fc ff02 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8003e90:	214a      	movs	r1, #74	; 0x4a
 8003e92:	f24d 4007 	movw	r0, #54279	; 0xd407
 8003e96:	f7fc fefd 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	f24d 4008 	movw	r0, #54280	; 0xd408
 8003ea0:	f7fc fef8 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 8003ea4:	215c      	movs	r1, #92	; 0x5c
 8003ea6:	f24d 4009 	movw	r0, #54281	; 0xd409
 8003eaa:	f7fc fef3 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8003eae:	2100      	movs	r1, #0
 8003eb0:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8003eb4:	f7fc feee 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8003eb8:	2181      	movs	r1, #129	; 0x81
 8003eba:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8003ebe:	f7fc fee9 	bl	8000c94 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003ec8:	f7fc fee4 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 8003ecc:	21a6      	movs	r1, #166	; 0xa6
 8003ece:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8003ed2:	f7fc fedf 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8003edc:	f7fc feda 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8003ee0:	21e5      	movs	r1, #229	; 0xe5
 8003ee2:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8003ee6:	f7fc fed5 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 8003eea:	2101      	movs	r1, #1
 8003eec:	f24d 4010 	movw	r0, #54288	; 0xd410
 8003ef0:	f7fc fed0 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 8003ef4:	2113      	movs	r1, #19
 8003ef6:	f24d 4011 	movw	r0, #54289	; 0xd411
 8003efa:	f7fc fecb 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 8003efe:	2101      	movs	r1, #1
 8003f00:	f24d 4012 	movw	r0, #54290	; 0xd412
 8003f04:	f7fc fec6 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8003f08:	2154      	movs	r1, #84	; 0x54
 8003f0a:	f24d 4013 	movw	r0, #54291	; 0xd413
 8003f0e:	f7fc fec1 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 8003f12:	2101      	movs	r1, #1
 8003f14:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003f18:	f7fc febc 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 8003f1c:	2182      	movs	r1, #130	; 0x82
 8003f1e:	f24d 4015 	movw	r0, #54293	; 0xd415
 8003f22:	f7fc feb7 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 8003f26:	2101      	movs	r1, #1
 8003f28:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003f2c:	f7fc feb2 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8003f30:	21ca      	movs	r1, #202	; 0xca
 8003f32:	f24d 4017 	movw	r0, #54295	; 0xd417
 8003f36:	f7fc fead 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 8003f3a:	2102      	movs	r1, #2
 8003f3c:	f24d 4018 	movw	r0, #54296	; 0xd418
 8003f40:	f7fc fea8 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 8003f44:	2100      	movs	r1, #0
 8003f46:	f24d 4019 	movw	r0, #54297	; 0xd419
 8003f4a:	f7fc fea3 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 8003f4e:	2102      	movs	r1, #2
 8003f50:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8003f54:	f7fc fe9e 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8003f58:	2101      	movs	r1, #1
 8003f5a:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8003f5e:	f7fc fe99 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 8003f62:	2102      	movs	r1, #2
 8003f64:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8003f68:	f7fc fe94 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8003f6c:	2134      	movs	r1, #52	; 0x34
 8003f6e:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8003f72:	f7fc fe8f 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 8003f76:	2102      	movs	r1, #2
 8003f78:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8003f7c:	f7fc fe8a 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8003f80:	2167      	movs	r1, #103	; 0x67
 8003f82:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8003f86:	f7fc fe85 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 8003f8a:	2102      	movs	r1, #2
 8003f8c:	f24d 4020 	movw	r0, #54304	; 0xd420
 8003f90:	f7fc fe80 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 8003f94:	2184      	movs	r1, #132	; 0x84
 8003f96:	f24d 4021 	movw	r0, #54305	; 0xd421
 8003f9a:	f7fc fe7b 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 8003f9e:	2102      	movs	r1, #2
 8003fa0:	f24d 4022 	movw	r0, #54306	; 0xd422
 8003fa4:	f7fc fe76 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8003fa8:	21a4      	movs	r1, #164	; 0xa4
 8003faa:	f24d 4023 	movw	r0, #54307	; 0xd423
 8003fae:	f7fc fe71 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8003fb2:	2102      	movs	r1, #2
 8003fb4:	f24d 4024 	movw	r0, #54308	; 0xd424
 8003fb8:	f7fc fe6c 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 8003fbc:	21b7      	movs	r1, #183	; 0xb7
 8003fbe:	f24d 4025 	movw	r0, #54309	; 0xd425
 8003fc2:	f7fc fe67 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8003fc6:	2102      	movs	r1, #2
 8003fc8:	f24d 4026 	movw	r0, #54310	; 0xd426
 8003fcc:	f7fc fe62 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8003fd0:	21cf      	movs	r1, #207	; 0xcf
 8003fd2:	f24d 4027 	movw	r0, #54311	; 0xd427
 8003fd6:	f7fc fe5d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 8003fda:	2102      	movs	r1, #2
 8003fdc:	f24d 4028 	movw	r0, #54312	; 0xd428
 8003fe0:	f7fc fe58 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 8003fe4:	21de      	movs	r1, #222	; 0xde
 8003fe6:	f24d 4029 	movw	r0, #54313	; 0xd429
 8003fea:	f7fc fe53 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 8003fee:	2102      	movs	r1, #2
 8003ff0:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8003ff4:	f7fc fe4e 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8003ff8:	21f2      	movs	r1, #242	; 0xf2
 8003ffa:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8003ffe:	f7fc fe49 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 8004002:	2102      	movs	r1, #2
 8004004:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8004008:	f7fc fe44 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 800400c:	21fe      	movs	r1, #254	; 0xfe
 800400e:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8004012:	f7fc fe3f 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 8004016:	2103      	movs	r1, #3
 8004018:	f24d 402e 	movw	r0, #54318	; 0xd42e
 800401c:	f7fc fe3a 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8004020:	2110      	movs	r1, #16
 8004022:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8004026:	f7fc fe35 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 800402a:	2103      	movs	r1, #3
 800402c:	f24d 4030 	movw	r0, #54320	; 0xd430
 8004030:	f7fc fe30 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 8004034:	2133      	movs	r1, #51	; 0x33
 8004036:	f24d 4031 	movw	r0, #54321	; 0xd431
 800403a:	f7fc fe2b 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 800403e:	2103      	movs	r1, #3
 8004040:	f24d 4032 	movw	r0, #54322	; 0xd432
 8004044:	f7fc fe26 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8004048:	216d      	movs	r1, #109	; 0x6d
 800404a:	f24d 4033 	movw	r0, #54323	; 0xd433
 800404e:	f7fc fe21 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 8004052:	2100      	movs	r1, #0
 8004054:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8004058:	f7fc fe1c 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 800405c:	2133      	movs	r1, #51	; 0x33
 800405e:	f24d 5001 	movw	r0, #54529	; 0xd501
 8004062:	f7fc fe17 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 8004066:	2100      	movs	r1, #0
 8004068:	f24d 5002 	movw	r0, #54530	; 0xd502
 800406c:	f7fc fe12 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8004070:	2134      	movs	r1, #52	; 0x34
 8004072:	f24d 5003 	movw	r0, #54531	; 0xd503
 8004076:	f7fc fe0d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 800407a:	2100      	movs	r1, #0
 800407c:	f24d 5004 	movw	r0, #54532	; 0xd504
 8004080:	f7fc fe08 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 8004084:	213a      	movs	r1, #58	; 0x3a
 8004086:	f24d 5005 	movw	r0, #54533	; 0xd505
 800408a:	f7fc fe03 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 800408e:	2100      	movs	r1, #0
 8004090:	f24d 5006 	movw	r0, #54534	; 0xd506
 8004094:	f7fc fdfe 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8004098:	214a      	movs	r1, #74	; 0x4a
 800409a:	f24d 5007 	movw	r0, #54535	; 0xd507
 800409e:	f7fc fdf9 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 80040a2:	2100      	movs	r1, #0
 80040a4:	f24d 5008 	movw	r0, #54536	; 0xd508
 80040a8:	f7fc fdf4 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 80040ac:	215c      	movs	r1, #92	; 0x5c
 80040ae:	f24d 5009 	movw	r0, #54537	; 0xd509
 80040b2:	f7fc fdef 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 80040b6:	2100      	movs	r1, #0
 80040b8:	f24d 500a 	movw	r0, #54538	; 0xd50a
 80040bc:	f7fc fdea 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 80040c0:	2181      	movs	r1, #129	; 0x81
 80040c2:	f24d 500b 	movw	r0, #54539	; 0xd50b
 80040c6:	f7fc fde5 	bl	8000c94 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 80040ca:	2100      	movs	r1, #0
 80040cc:	f24d 500c 	movw	r0, #54540	; 0xd50c
 80040d0:	f7fc fde0 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 80040d4:	21a6      	movs	r1, #166	; 0xa6
 80040d6:	f24d 500d 	movw	r0, #54541	; 0xd50d
 80040da:	f7fc fddb 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 80040de:	2100      	movs	r1, #0
 80040e0:	f24d 500e 	movw	r0, #54542	; 0xd50e
 80040e4:	f7fc fdd6 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 80040e8:	21e5      	movs	r1, #229	; 0xe5
 80040ea:	f24d 500f 	movw	r0, #54543	; 0xd50f
 80040ee:	f7fc fdd1 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 80040f2:	2101      	movs	r1, #1
 80040f4:	f24d 5010 	movw	r0, #54544	; 0xd510
 80040f8:	f7fc fdcc 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 80040fc:	2113      	movs	r1, #19
 80040fe:	f24d 5011 	movw	r0, #54545	; 0xd511
 8004102:	f7fc fdc7 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 8004106:	2101      	movs	r1, #1
 8004108:	f24d 5012 	movw	r0, #54546	; 0xd512
 800410c:	f7fc fdc2 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8004110:	2154      	movs	r1, #84	; 0x54
 8004112:	f24d 5013 	movw	r0, #54547	; 0xd513
 8004116:	f7fc fdbd 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 800411a:	2101      	movs	r1, #1
 800411c:	f24d 5014 	movw	r0, #54548	; 0xd514
 8004120:	f7fc fdb8 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 8004124:	2182      	movs	r1, #130	; 0x82
 8004126:	f24d 5015 	movw	r0, #54549	; 0xd515
 800412a:	f7fc fdb3 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 800412e:	2101      	movs	r1, #1
 8004130:	f24d 5016 	movw	r0, #54550	; 0xd516
 8004134:	f7fc fdae 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8004138:	21ca      	movs	r1, #202	; 0xca
 800413a:	f24d 5017 	movw	r0, #54551	; 0xd517
 800413e:	f7fc fda9 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 8004142:	2102      	movs	r1, #2
 8004144:	f24d 5018 	movw	r0, #54552	; 0xd518
 8004148:	f7fc fda4 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 800414c:	2100      	movs	r1, #0
 800414e:	f24d 5019 	movw	r0, #54553	; 0xd519
 8004152:	f7fc fd9f 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 8004156:	2102      	movs	r1, #2
 8004158:	f24d 501a 	movw	r0, #54554	; 0xd51a
 800415c:	f7fc fd9a 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8004160:	2101      	movs	r1, #1
 8004162:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8004166:	f7fc fd95 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 800416a:	2102      	movs	r1, #2
 800416c:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8004170:	f7fc fd90 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 8004174:	2134      	movs	r1, #52	; 0x34
 8004176:	f24d 501d 	movw	r0, #54557	; 0xd51d
 800417a:	f7fc fd8b 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 800417e:	2102      	movs	r1, #2
 8004180:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8004184:	f7fc fd86 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8004188:	2167      	movs	r1, #103	; 0x67
 800418a:	f24d 501f 	movw	r0, #54559	; 0xd51f
 800418e:	f7fc fd81 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 8004192:	2102      	movs	r1, #2
 8004194:	f24d 5020 	movw	r0, #54560	; 0xd520
 8004198:	f7fc fd7c 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 800419c:	2184      	movs	r1, #132	; 0x84
 800419e:	f24d 5021 	movw	r0, #54561	; 0xd521
 80041a2:	f7fc fd77 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 80041a6:	2102      	movs	r1, #2
 80041a8:	f24d 5022 	movw	r0, #54562	; 0xd522
 80041ac:	f7fc fd72 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 80041b0:	21a4      	movs	r1, #164	; 0xa4
 80041b2:	f24d 5023 	movw	r0, #54563	; 0xd523
 80041b6:	f7fc fd6d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 80041ba:	2102      	movs	r1, #2
 80041bc:	f24d 5024 	movw	r0, #54564	; 0xd524
 80041c0:	f7fc fd68 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 80041c4:	21b7      	movs	r1, #183	; 0xb7
 80041c6:	f24d 5025 	movw	r0, #54565	; 0xd525
 80041ca:	f7fc fd63 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 80041ce:	2102      	movs	r1, #2
 80041d0:	f24d 5026 	movw	r0, #54566	; 0xd526
 80041d4:	f7fc fd5e 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 80041d8:	21cf      	movs	r1, #207	; 0xcf
 80041da:	f24d 5027 	movw	r0, #54567	; 0xd527
 80041de:	f7fc fd59 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 80041e2:	2102      	movs	r1, #2
 80041e4:	f24d 5028 	movw	r0, #54568	; 0xd528
 80041e8:	f7fc fd54 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 80041ec:	21de      	movs	r1, #222	; 0xde
 80041ee:	f24d 5029 	movw	r0, #54569	; 0xd529
 80041f2:	f7fc fd4f 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 80041f6:	2102      	movs	r1, #2
 80041f8:	f24d 502a 	movw	r0, #54570	; 0xd52a
 80041fc:	f7fc fd4a 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8004200:	21f2      	movs	r1, #242	; 0xf2
 8004202:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8004206:	f7fc fd45 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 800420a:	2102      	movs	r1, #2
 800420c:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8004210:	f7fc fd40 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 8004214:	21fe      	movs	r1, #254	; 0xfe
 8004216:	f24d 502d 	movw	r0, #54573	; 0xd52d
 800421a:	f7fc fd3b 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 800421e:	2103      	movs	r1, #3
 8004220:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8004224:	f7fc fd36 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8004228:	2110      	movs	r1, #16
 800422a:	f24d 502f 	movw	r0, #54575	; 0xd52f
 800422e:	f7fc fd31 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 8004232:	2103      	movs	r1, #3
 8004234:	f24d 5030 	movw	r0, #54576	; 0xd530
 8004238:	f7fc fd2c 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 800423c:	2133      	movs	r1, #51	; 0x33
 800423e:	f24d 5031 	movw	r0, #54577	; 0xd531
 8004242:	f7fc fd27 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 8004246:	2103      	movs	r1, #3
 8004248:	f24d 5032 	movw	r0, #54578	; 0xd532
 800424c:	f7fc fd22 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8004250:	216d      	movs	r1, #109	; 0x6d
 8004252:	f24d 5033 	movw	r0, #54579	; 0xd533
 8004256:	f7fc fd1d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 800425a:	2100      	movs	r1, #0
 800425c:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8004260:	f7fc fd18 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 8004264:	2133      	movs	r1, #51	; 0x33
 8004266:	f24d 6001 	movw	r0, #54785	; 0xd601
 800426a:	f7fc fd13 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 800426e:	2100      	movs	r1, #0
 8004270:	f24d 6002 	movw	r0, #54786	; 0xd602
 8004274:	f7fc fd0e 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8004278:	2134      	movs	r1, #52	; 0x34
 800427a:	f24d 6003 	movw	r0, #54787	; 0xd603
 800427e:	f7fc fd09 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 8004282:	2100      	movs	r1, #0
 8004284:	f24d 6004 	movw	r0, #54788	; 0xd604
 8004288:	f7fc fd04 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 800428c:	213a      	movs	r1, #58	; 0x3a
 800428e:	f24d 6005 	movw	r0, #54789	; 0xd605
 8004292:	f7fc fcff 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 8004296:	2100      	movs	r1, #0
 8004298:	f24d 6006 	movw	r0, #54790	; 0xd606
 800429c:	f7fc fcfa 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 80042a0:	214a      	movs	r1, #74	; 0x4a
 80042a2:	f24d 6007 	movw	r0, #54791	; 0xd607
 80042a6:	f7fc fcf5 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 80042aa:	2100      	movs	r1, #0
 80042ac:	f24d 6008 	movw	r0, #54792	; 0xd608
 80042b0:	f7fc fcf0 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 80042b4:	215c      	movs	r1, #92	; 0x5c
 80042b6:	f24d 6009 	movw	r0, #54793	; 0xd609
 80042ba:	f7fc fceb 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 80042be:	2100      	movs	r1, #0
 80042c0:	f24d 600a 	movw	r0, #54794	; 0xd60a
 80042c4:	f7fc fce6 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 80042c8:	2181      	movs	r1, #129	; 0x81
 80042ca:	f24d 600b 	movw	r0, #54795	; 0xd60b
 80042ce:	f7fc fce1 	bl	8000c94 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 80042d2:	2100      	movs	r1, #0
 80042d4:	f24d 600c 	movw	r0, #54796	; 0xd60c
 80042d8:	f7fc fcdc 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 80042dc:	21a6      	movs	r1, #166	; 0xa6
 80042de:	f24d 600d 	movw	r0, #54797	; 0xd60d
 80042e2:	f7fc fcd7 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 80042e6:	2100      	movs	r1, #0
 80042e8:	f24d 600e 	movw	r0, #54798	; 0xd60e
 80042ec:	f7fc fcd2 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 80042f0:	21e5      	movs	r1, #229	; 0xe5
 80042f2:	f24d 600f 	movw	r0, #54799	; 0xd60f
 80042f6:	f7fc fccd 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 80042fa:	2101      	movs	r1, #1
 80042fc:	f24d 6010 	movw	r0, #54800	; 0xd610
 8004300:	f7fc fcc8 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 8004304:	2113      	movs	r1, #19
 8004306:	f24d 6011 	movw	r0, #54801	; 0xd611
 800430a:	f7fc fcc3 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 800430e:	2101      	movs	r1, #1
 8004310:	f24d 6012 	movw	r0, #54802	; 0xd612
 8004314:	f7fc fcbe 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8004318:	2154      	movs	r1, #84	; 0x54
 800431a:	f24d 6013 	movw	r0, #54803	; 0xd613
 800431e:	f7fc fcb9 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 8004322:	2101      	movs	r1, #1
 8004324:	f24d 6014 	movw	r0, #54804	; 0xd614
 8004328:	f7fc fcb4 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 800432c:	2182      	movs	r1, #130	; 0x82
 800432e:	f24d 6015 	movw	r0, #54805	; 0xd615
 8004332:	f7fc fcaf 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 8004336:	2101      	movs	r1, #1
 8004338:	f24d 6016 	movw	r0, #54806	; 0xd616
 800433c:	f7fc fcaa 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8004340:	21ca      	movs	r1, #202	; 0xca
 8004342:	f24d 6017 	movw	r0, #54807	; 0xd617
 8004346:	f7fc fca5 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 800434a:	2102      	movs	r1, #2
 800434c:	f24d 6018 	movw	r0, #54808	; 0xd618
 8004350:	f7fc fca0 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 8004354:	2100      	movs	r1, #0
 8004356:	f24d 6019 	movw	r0, #54809	; 0xd619
 800435a:	f7fc fc9b 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 800435e:	2102      	movs	r1, #2
 8004360:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8004364:	f7fc fc96 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8004368:	2101      	movs	r1, #1
 800436a:	f24d 601b 	movw	r0, #54811	; 0xd61b
 800436e:	f7fc fc91 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 8004372:	2102      	movs	r1, #2
 8004374:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8004378:	f7fc fc8c 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 800437c:	2134      	movs	r1, #52	; 0x34
 800437e:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8004382:	f7fc fc87 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 8004386:	2102      	movs	r1, #2
 8004388:	f24d 601e 	movw	r0, #54814	; 0xd61e
 800438c:	f7fc fc82 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 8004390:	2167      	movs	r1, #103	; 0x67
 8004392:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8004396:	f7fc fc7d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 800439a:	2102      	movs	r1, #2
 800439c:	f24d 6020 	movw	r0, #54816	; 0xd620
 80043a0:	f7fc fc78 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 80043a4:	2184      	movs	r1, #132	; 0x84
 80043a6:	f24d 6021 	movw	r0, #54817	; 0xd621
 80043aa:	f7fc fc73 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 80043ae:	2102      	movs	r1, #2
 80043b0:	f24d 6022 	movw	r0, #54818	; 0xd622
 80043b4:	f7fc fc6e 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 80043b8:	21a4      	movs	r1, #164	; 0xa4
 80043ba:	f24d 6023 	movw	r0, #54819	; 0xd623
 80043be:	f7fc fc69 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 80043c2:	2102      	movs	r1, #2
 80043c4:	f24d 6024 	movw	r0, #54820	; 0xd624
 80043c8:	f7fc fc64 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 80043cc:	21b7      	movs	r1, #183	; 0xb7
 80043ce:	f24d 6025 	movw	r0, #54821	; 0xd625
 80043d2:	f7fc fc5f 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 80043d6:	2102      	movs	r1, #2
 80043d8:	f24d 6026 	movw	r0, #54822	; 0xd626
 80043dc:	f7fc fc5a 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 80043e0:	21cf      	movs	r1, #207	; 0xcf
 80043e2:	f24d 6027 	movw	r0, #54823	; 0xd627
 80043e6:	f7fc fc55 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 80043ea:	2102      	movs	r1, #2
 80043ec:	f24d 6028 	movw	r0, #54824	; 0xd628
 80043f0:	f7fc fc50 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 80043f4:	21de      	movs	r1, #222	; 0xde
 80043f6:	f24d 6029 	movw	r0, #54825	; 0xd629
 80043fa:	f7fc fc4b 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 80043fe:	2102      	movs	r1, #2
 8004400:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8004404:	f7fc fc46 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 8004408:	21f2      	movs	r1, #242	; 0xf2
 800440a:	f24d 602b 	movw	r0, #54827	; 0xd62b
 800440e:	f7fc fc41 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 8004412:	2102      	movs	r1, #2
 8004414:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8004418:	f7fc fc3c 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 800441c:	21fe      	movs	r1, #254	; 0xfe
 800441e:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8004422:	f7fc fc37 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 8004426:	2103      	movs	r1, #3
 8004428:	f24d 602e 	movw	r0, #54830	; 0xd62e
 800442c:	f7fc fc32 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8004430:	2110      	movs	r1, #16
 8004432:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8004436:	f7fc fc2d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 800443a:	2103      	movs	r1, #3
 800443c:	f24d 6030 	movw	r0, #54832	; 0xd630
 8004440:	f7fc fc28 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 8004444:	2133      	movs	r1, #51	; 0x33
 8004446:	f24d 6031 	movw	r0, #54833	; 0xd631
 800444a:	f7fc fc23 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 800444e:	2103      	movs	r1, #3
 8004450:	f24d 6032 	movw	r0, #54834	; 0xd632
 8004454:	f7fc fc1e 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8004458:	216d      	movs	r1, #109	; 0x6d
 800445a:	f24d 6033 	movw	r0, #54835	; 0xd633
 800445e:	f7fc fc19 	bl	8000c94 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 8004462:	2155      	movs	r1, #85	; 0x55
 8004464:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8004468:	f7fc fc14 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 800446c:	21aa      	movs	r1, #170	; 0xaa
 800446e:	f24f 0001 	movw	r0, #61441	; 0xf001
 8004472:	f7fc fc0f 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8004476:	2152      	movs	r1, #82	; 0x52
 8004478:	f24f 0002 	movw	r0, #61442	; 0xf002
 800447c:	f7fc fc0a 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8004480:	2108      	movs	r1, #8
 8004482:	f24f 0003 	movw	r0, #61443	; 0xf003
 8004486:	f7fc fc05 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 800448a:	2100      	movs	r1, #0
 800448c:	f24f 0004 	movw	r0, #61444	; 0xf004
 8004490:	f7fc fc00 	bl	8000c94 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8004494:	21cc      	movs	r1, #204	; 0xcc
 8004496:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 800449a:	f7fc fbfb 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 800449e:	2100      	movs	r1, #0
 80044a0:	f24b 1001 	movw	r0, #45313	; 0xb101
 80044a4:	f7fc fbf6 	bl	8000c94 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 80044a8:	2105      	movs	r1, #5
 80044aa:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80044ae:	f7fc fbf1 	bl	8000c94 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 80044b2:	2170      	movs	r1, #112	; 0x70
 80044b4:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80044b8:	f7fc fbec 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 80044bc:	2170      	movs	r1, #112	; 0x70
 80044be:	f24b 7001 	movw	r0, #46849	; 0xb701
 80044c2:	f7fc fbe7 	bl	8000c94 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 80044c6:	2101      	movs	r1, #1
 80044c8:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80044cc:	f7fc fbe2 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 80044d0:	2103      	movs	r1, #3
 80044d2:	f64b 0001 	movw	r0, #47105	; 0xb801
 80044d6:	f7fc fbdd 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 80044da:	2103      	movs	r1, #3
 80044dc:	f64b 0002 	movw	r0, #47106	; 0xb802
 80044e0:	f7fc fbd8 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 80044e4:	2103      	movs	r1, #3
 80044e6:	f64b 0003 	movw	r0, #47107	; 0xb803
 80044ea:	f7fc fbd3 	bl	8000c94 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 80044ee:	2102      	movs	r1, #2
 80044f0:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80044f4:	f7fc fbce 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 80044f8:	2100      	movs	r1, #0
 80044fa:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80044fe:	f7fc fbc9 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8004502:	2100      	movs	r1, #0
 8004504:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8004508:	f7fc fbc4 	bl	8000c94 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 800450c:	21d0      	movs	r1, #208	; 0xd0
 800450e:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8004512:	f7fc fbbf 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 8004516:	2102      	movs	r1, #2
 8004518:	f64c 1001 	movw	r0, #51457	; 0xc901
 800451c:	f7fc fbba 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8004520:	2150      	movs	r1, #80	; 0x50
 8004522:	f64c 1002 	movw	r0, #51458	; 0xc902
 8004526:	f7fc fbb5 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 800452a:	2150      	movs	r1, #80	; 0x50
 800452c:	f64c 1003 	movw	r0, #51459	; 0xc903
 8004530:	f7fc fbb0 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 8004534:	2150      	movs	r1, #80	; 0x50
 8004536:	f64c 1004 	movw	r0, #51460	; 0xc904
 800453a:	f7fc fbab 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 800453e:	2100      	movs	r1, #0
 8004540:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8004544:	f7fc fba6 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8004548:	2155      	movs	r1, #85	; 0x55
 800454a:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 800454e:	f7fc fba1 	bl	8000c94 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8004552:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8004556:	f7fc fb11 	bl	8000b7c <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 800455a:	2001      	movs	r0, #1
 800455c:	f003 fd8e 	bl	800807c <HAL_Delay>
		LCD_WR_REG(0x2900);
 8004560:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8004564:	f7fc fb0a 	bl	8000b7c <LCD_WR_REG>
 8004568:	f001 bd18 	b.w	8005f9c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 800456c:	4bec      	ldr	r3, [pc, #944]	; (8004920 <LCD_Init+0x27b8>)
 800456e:	889b      	ldrh	r3, [r3, #4]
 8004570:	f249 3225 	movw	r2, #37669	; 0x9325
 8004574:	4293      	cmp	r3, r2
 8004576:	f040 80d7 	bne.w	8004728 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 800457a:	f647 01f0 	movw	r1, #30960	; 0x78f0
 800457e:	20e5      	movs	r0, #229	; 0xe5
 8004580:	f7fc fb88 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 8004584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004588:	2001      	movs	r0, #1
 800458a:	f7fc fb83 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 800458e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004592:	2002      	movs	r0, #2
 8004594:	f7fc fb7e 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8004598:	f241 0130 	movw	r1, #4144	; 0x1030
 800459c:	2003      	movs	r0, #3
 800459e:	f7fc fb79 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 80045a2:	2100      	movs	r1, #0
 80045a4:	2004      	movs	r0, #4
 80045a6:	f7fc fb75 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80045aa:	f240 2102 	movw	r1, #514	; 0x202
 80045ae:	2008      	movs	r0, #8
 80045b0:	f7fc fb70 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 80045b4:	2100      	movs	r1, #0
 80045b6:	2009      	movs	r0, #9
 80045b8:	f7fc fb6c 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 80045bc:	2100      	movs	r1, #0
 80045be:	200a      	movs	r0, #10
 80045c0:	f7fc fb68 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80045c4:	2100      	movs	r1, #0
 80045c6:	200c      	movs	r0, #12
 80045c8:	f7fc fb64 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 80045cc:	2100      	movs	r1, #0
 80045ce:	200d      	movs	r0, #13
 80045d0:	f7fc fb60 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 80045d4:	2100      	movs	r1, #0
 80045d6:	200f      	movs	r0, #15
 80045d8:	f7fc fb5c 	bl	8000c94 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 80045dc:	2100      	movs	r1, #0
 80045de:	2010      	movs	r0, #16
 80045e0:	f7fc fb58 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80045e4:	2107      	movs	r1, #7
 80045e6:	2011      	movs	r0, #17
 80045e8:	f7fc fb54 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80045ec:	2100      	movs	r1, #0
 80045ee:	2012      	movs	r0, #18
 80045f0:	f7fc fb50 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80045f4:	2100      	movs	r1, #0
 80045f6:	2013      	movs	r0, #19
 80045f8:	f7fc fb4c 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 80045fc:	2100      	movs	r1, #0
 80045fe:	2007      	movs	r0, #7
 8004600:	f7fc fb48 	bl	8000c94 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 8004604:	f241 6190 	movw	r1, #5776	; 0x1690
 8004608:	2010      	movs	r0, #16
 800460a:	f7fc fb43 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 800460e:	f240 2127 	movw	r1, #551	; 0x227
 8004612:	2011      	movs	r0, #17
 8004614:	f7fc fb3e 	bl	8000c94 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 8004618:	219d      	movs	r1, #157	; 0x9d
 800461a:	2012      	movs	r0, #18
 800461c:	f7fc fb3a 	bl	8000c94 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8004620:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8004624:	2013      	movs	r0, #19
 8004626:	f7fc fb35 	bl	8000c94 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 800462a:	2125      	movs	r1, #37	; 0x25
 800462c:	2029      	movs	r0, #41	; 0x29
 800462e:	f7fc fb31 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 8004632:	210d      	movs	r1, #13
 8004634:	202b      	movs	r0, #43	; 0x2b
 8004636:	f7fc fb2d 	bl	8000c94 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 800463a:	2107      	movs	r1, #7
 800463c:	2030      	movs	r0, #48	; 0x30
 800463e:	f7fc fb29 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 8004642:	f240 3103 	movw	r1, #771	; 0x303
 8004646:	2031      	movs	r0, #49	; 0x31
 8004648:	f7fc fb24 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 800464c:	2103      	movs	r1, #3
 800464e:	2032      	movs	r0, #50	; 0x32
 8004650:	f7fc fb20 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 8004654:	f240 2106 	movw	r1, #518	; 0x206
 8004658:	2035      	movs	r0, #53	; 0x35
 800465a:	f7fc fb1b 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 800465e:	2108      	movs	r1, #8
 8004660:	2036      	movs	r0, #54	; 0x36
 8004662:	f7fc fb17 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 8004666:	f240 4106 	movw	r1, #1030	; 0x406
 800466a:	2037      	movs	r0, #55	; 0x37
 800466c:	f7fc fb12 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8004670:	f44f 7141 	mov.w	r1, #772	; 0x304
 8004674:	2038      	movs	r0, #56	; 0x38
 8004676:	f7fc fb0d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 800467a:	2107      	movs	r1, #7
 800467c:	2039      	movs	r0, #57	; 0x39
 800467e:	f7fc fb09 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 8004682:	f240 6102 	movw	r1, #1538	; 0x602
 8004686:	203c      	movs	r0, #60	; 0x3c
 8004688:	f7fc fb04 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 800468c:	2108      	movs	r1, #8
 800468e:	203d      	movs	r0, #61	; 0x3d
 8004690:	f7fc fb00 	bl	8000c94 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 8004694:	2100      	movs	r1, #0
 8004696:	2050      	movs	r0, #80	; 0x50
 8004698:	f7fc fafc 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 800469c:	21ef      	movs	r1, #239	; 0xef
 800469e:	2051      	movs	r0, #81	; 0x51
 80046a0:	f7fc faf8 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80046a4:	2100      	movs	r1, #0
 80046a6:	2052      	movs	r0, #82	; 0x52
 80046a8:	f7fc faf4 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80046ac:	f240 113f 	movw	r1, #319	; 0x13f
 80046b0:	2053      	movs	r0, #83	; 0x53
 80046b2:	f7fc faef 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 80046b6:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80046ba:	2060      	movs	r0, #96	; 0x60
 80046bc:	f7fc faea 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80046c0:	2101      	movs	r1, #1
 80046c2:	2061      	movs	r0, #97	; 0x61
 80046c4:	f7fc fae6 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80046c8:	2100      	movs	r1, #0
 80046ca:	206a      	movs	r0, #106	; 0x6a
 80046cc:	f7fc fae2 	bl	8000c94 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 80046d0:	2100      	movs	r1, #0
 80046d2:	2080      	movs	r0, #128	; 0x80
 80046d4:	f7fc fade 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80046d8:	2100      	movs	r1, #0
 80046da:	2081      	movs	r0, #129	; 0x81
 80046dc:	f7fc fada 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80046e0:	2100      	movs	r1, #0
 80046e2:	2082      	movs	r0, #130	; 0x82
 80046e4:	f7fc fad6 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80046e8:	2100      	movs	r1, #0
 80046ea:	2083      	movs	r0, #131	; 0x83
 80046ec:	f7fc fad2 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80046f0:	2100      	movs	r1, #0
 80046f2:	2084      	movs	r0, #132	; 0x84
 80046f4:	f7fc face 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80046f8:	2100      	movs	r1, #0
 80046fa:	2085      	movs	r0, #133	; 0x85
 80046fc:	f7fc faca 	bl	8000c94 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 8004700:	2110      	movs	r1, #16
 8004702:	2090      	movs	r0, #144	; 0x90
 8004704:	f7fc fac6 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004708:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800470c:	2092      	movs	r0, #146	; 0x92
 800470e:	f7fc fac1 	bl	8000c94 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 8004712:	f240 1133 	movw	r1, #307	; 0x133
 8004716:	2007      	movs	r0, #7
 8004718:	f7fc fabc 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 800471c:	2122      	movs	r1, #34	; 0x22
 800471e:	2000      	movs	r0, #0
 8004720:	f7fc fab8 	bl	8000c94 <LCD_WriteReg>
 8004724:	f001 bc3a 	b.w	8005f9c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8004728:	4b7d      	ldr	r3, [pc, #500]	; (8004920 <LCD_Init+0x27b8>)
 800472a:	889b      	ldrh	r3, [r3, #4]
 800472c:	f249 3228 	movw	r2, #37672	; 0x9328
 8004730:	4293      	cmp	r3, r2
 8004732:	f040 80f7 	bne.w	8004924 <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 8004736:	f241 018f 	movw	r1, #4239	; 0x108f
 800473a:	20ec      	movs	r0, #236	; 0xec
 800473c:	f7fc faaa 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 8004740:	f241 2134 	movw	r1, #4660	; 0x1234
 8004744:	20ef      	movs	r0, #239	; 0xef
 8004746:	f7fc faa5 	bl	8000c94 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 800474a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800474e:	2001      	movs	r0, #1
 8004750:	f7fc faa0 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 8004754:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004758:	2002      	movs	r0, #2
 800475a:	f7fc fa9b 	bl	8000c94 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 800475e:	f241 0130 	movw	r1, #4144	; 0x1030
 8004762:	2003      	movs	r0, #3
 8004764:	f7fc fa96 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004768:	2100      	movs	r1, #0
 800476a:	2004      	movs	r0, #4
 800476c:	f7fc fa92 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004770:	f240 2102 	movw	r1, #514	; 0x202
 8004774:	2008      	movs	r0, #8
 8004776:	f7fc fa8d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 800477a:	2100      	movs	r1, #0
 800477c:	2009      	movs	r0, #9
 800477e:	f7fc fa89 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 8004782:	2100      	movs	r1, #0
 8004784:	200a      	movs	r0, #10
 8004786:	f7fc fa85 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 800478a:	2101      	movs	r1, #1
 800478c:	200c      	movs	r0, #12
 800478e:	f7fc fa81 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 8004792:	2100      	movs	r1, #0
 8004794:	200d      	movs	r0, #13
 8004796:	f7fc fa7d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 800479a:	2100      	movs	r1, #0
 800479c:	200f      	movs	r0, #15
 800479e:	f7fc fa79 	bl	8000c94 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 80047a2:	2100      	movs	r1, #0
 80047a4:	2010      	movs	r0, #16
 80047a6:	f7fc fa75 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80047aa:	2107      	movs	r1, #7
 80047ac:	2011      	movs	r0, #17
 80047ae:	f7fc fa71 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80047b2:	2100      	movs	r1, #0
 80047b4:	2012      	movs	r0, #18
 80047b6:	f7fc fa6d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80047ba:	2100      	movs	r1, #0
 80047bc:	2013      	movs	r0, #19
 80047be:	f7fc fa69 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 80047c2:	2101      	movs	r1, #1
 80047c4:	2007      	movs	r0, #7
 80047c6:	f7fc fa65 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(50);
 80047ca:	2032      	movs	r0, #50	; 0x32
 80047cc:	f003 fc56 	bl	800807c <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 80047d0:	f241 4190 	movw	r1, #5264	; 0x1490
 80047d4:	2010      	movs	r0, #16
 80047d6:	f7fc fa5d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 80047da:	f240 2127 	movw	r1, #551	; 0x227
 80047de:	2011      	movs	r0, #17
 80047e0:	f7fc fa58 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(50);
 80047e4:	2032      	movs	r0, #50	; 0x32
 80047e6:	f003 fc49 	bl	800807c <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 80047ea:	218a      	movs	r1, #138	; 0x8a
 80047ec:	2012      	movs	r0, #18
 80047ee:	f7fc fa51 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(50);
 80047f2:	2032      	movs	r0, #50	; 0x32
 80047f4:	f003 fc42 	bl	800807c <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 80047f8:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 80047fc:	2013      	movs	r0, #19
 80047fe:	f7fc fa49 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 8004802:	2106      	movs	r1, #6
 8004804:	2029      	movs	r0, #41	; 0x29
 8004806:	f7fc fa45 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 800480a:	210d      	movs	r1, #13
 800480c:	202b      	movs	r0, #43	; 0x2b
 800480e:	f7fc fa41 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(50);
 8004812:	2032      	movs	r0, #50	; 0x32
 8004814:	f003 fc32 	bl	800807c <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 8004818:	2100      	movs	r1, #0
 800481a:	2020      	movs	r0, #32
 800481c:	f7fc fa3a 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004820:	2100      	movs	r1, #0
 8004822:	2021      	movs	r0, #33	; 0x21
 8004824:	f7fc fa36 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(50);
 8004828:	2032      	movs	r0, #50	; 0x32
 800482a:	f003 fc27 	bl	800807c <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 800482e:	2100      	movs	r1, #0
 8004830:	2030      	movs	r0, #48	; 0x30
 8004832:	f7fc fa2f 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 8004836:	f240 6104 	movw	r1, #1540	; 0x604
 800483a:	2031      	movs	r0, #49	; 0x31
 800483c:	f7fc fa2a 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 8004840:	f240 3105 	movw	r1, #773	; 0x305
 8004844:	2032      	movs	r0, #50	; 0x32
 8004846:	f7fc fa25 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 800484a:	2100      	movs	r1, #0
 800484c:	2035      	movs	r0, #53	; 0x35
 800484e:	f7fc fa21 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 8004852:	f640 4109 	movw	r1, #3081	; 0xc09
 8004856:	2036      	movs	r0, #54	; 0x36
 8004858:	f7fc fa1c 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 800485c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004860:	2037      	movs	r0, #55	; 0x37
 8004862:	f7fc fa17 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 8004866:	f240 3101 	movw	r1, #769	; 0x301
 800486a:	2038      	movs	r0, #56	; 0x38
 800486c:	f7fc fa12 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004870:	f240 7107 	movw	r1, #1799	; 0x707
 8004874:	2039      	movs	r0, #57	; 0x39
 8004876:	f7fc fa0d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 800487a:	2100      	movs	r1, #0
 800487c:	203c      	movs	r0, #60	; 0x3c
 800487e:	f7fc fa09 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 8004882:	f640 210a 	movw	r1, #2570	; 0xa0a
 8004886:	203d      	movs	r0, #61	; 0x3d
 8004888:	f7fc fa04 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(50);
 800488c:	2032      	movs	r0, #50	; 0x32
 800488e:	f003 fbf5 	bl	800807c <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 8004892:	2100      	movs	r1, #0
 8004894:	2050      	movs	r0, #80	; 0x50
 8004896:	f7fc f9fd 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 800489a:	21ef      	movs	r1, #239	; 0xef
 800489c:	2051      	movs	r0, #81	; 0x51
 800489e:	f7fc f9f9 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 80048a2:	2100      	movs	r1, #0
 80048a4:	2052      	movs	r0, #82	; 0x52
 80048a6:	f7fc f9f5 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 80048aa:	f240 113f 	movw	r1, #319	; 0x13f
 80048ae:	2053      	movs	r0, #83	; 0x53
 80048b0:	f7fc f9f0 	bl	8000c94 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 80048b4:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80048b8:	2060      	movs	r0, #96	; 0x60
 80048ba:	f7fc f9eb 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80048be:	2101      	movs	r1, #1
 80048c0:	2061      	movs	r0, #97	; 0x61
 80048c2:	f7fc f9e7 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 80048c6:	2100      	movs	r1, #0
 80048c8:	206a      	movs	r0, #106	; 0x6a
 80048ca:	f7fc f9e3 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 80048ce:	2100      	movs	r1, #0
 80048d0:	2080      	movs	r0, #128	; 0x80
 80048d2:	f7fc f9df 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80048d6:	2100      	movs	r1, #0
 80048d8:	2081      	movs	r0, #129	; 0x81
 80048da:	f7fc f9db 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80048de:	2100      	movs	r1, #0
 80048e0:	2082      	movs	r0, #130	; 0x82
 80048e2:	f7fc f9d7 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80048e6:	2100      	movs	r1, #0
 80048e8:	2083      	movs	r0, #131	; 0x83
 80048ea:	f7fc f9d3 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80048ee:	2100      	movs	r1, #0
 80048f0:	2084      	movs	r0, #132	; 0x84
 80048f2:	f7fc f9cf 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80048f6:	2100      	movs	r1, #0
 80048f8:	2085      	movs	r0, #133	; 0x85
 80048fa:	f7fc f9cb 	bl	8000c94 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 80048fe:	2110      	movs	r1, #16
 8004900:	2090      	movs	r0, #144	; 0x90
 8004902:	f7fc f9c7 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004906:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800490a:	2092      	movs	r0, #146	; 0x92
 800490c:	f7fc f9c2 	bl	8000c94 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 8004910:	f240 1133 	movw	r1, #307	; 0x133
 8004914:	2007      	movs	r0, #7
 8004916:	f7fc f9bd 	bl	8000c94 <LCD_WriteReg>
 800491a:	f001 bb3f 	b.w	8005f9c <LCD_Init+0x3e34>
 800491e:	bf00      	nop
 8004920:	200005d4 	.word	0x200005d4
	} else if (lcddev.id == 0x9320) //测试OK.
 8004924:	4bce      	ldr	r3, [pc, #824]	; (8004c60 <LCD_Init+0x2af8>)
 8004926:	889b      	ldrh	r3, [r3, #4]
 8004928:	f249 3220 	movw	r2, #37664	; 0x9320
 800492c:	4293      	cmp	r3, r2
 800492e:	f040 80ad 	bne.w	8004a8c <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 8004932:	2100      	movs	r1, #0
 8004934:	2000      	movs	r0, #0
 8004936:	f7fc f9ad 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 800493a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800493e:	2001      	movs	r0, #1
 8004940:	f7fc f9a8 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 8004944:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004948:	2002      	movs	r0, #2
 800494a:	f7fc f9a3 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 800494e:	f241 0130 	movw	r1, #4144	; 0x1030
 8004952:	2003      	movs	r0, #3
 8004954:	f7fc f99e 	bl	8000c94 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 8004958:	2100      	movs	r1, #0
 800495a:	2004      	movs	r0, #4
 800495c:	f7fc f99a 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 8004960:	f240 2102 	movw	r1, #514	; 0x202
 8004964:	2008      	movs	r0, #8
 8004966:	f7fc f995 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 800496a:	2100      	movs	r1, #0
 800496c:	2009      	movs	r0, #9
 800496e:	f7fc f991 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 8004972:	2100      	movs	r1, #0
 8004974:	200a      	movs	r0, #10
 8004976:	f7fc f98d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 800497a:	2101      	movs	r1, #1
 800497c:	200c      	movs	r0, #12
 800497e:	f7fc f989 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 8004982:	2100      	movs	r1, #0
 8004984:	200d      	movs	r0, #13
 8004986:	f7fc f985 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 800498a:	2100      	movs	r1, #0
 800498c:	200f      	movs	r0, #15
 800498e:	f7fc f981 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(50);
 8004992:	2032      	movs	r0, #50	; 0x32
 8004994:	f003 fb72 	bl	800807c <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 8004998:	f240 1101 	movw	r1, #257	; 0x101
 800499c:	2007      	movs	r0, #7
 800499e:	f7fc f979 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(50);
 80049a2:	2032      	movs	r0, #50	; 0x32
 80049a4:	f003 fb6a 	bl	800807c <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 80049a8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80049ac:	2010      	movs	r0, #16
 80049ae:	f7fc f971 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 80049b2:	2107      	movs	r1, #7
 80049b4:	2011      	movs	r0, #17
 80049b6:	f7fc f96d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 80049ba:	f44f 7188 	mov.w	r1, #272	; 0x110
 80049be:	2012      	movs	r0, #18
 80049c0:	f7fc f968 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 80049c4:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 80049c8:	2013      	movs	r0, #19
 80049ca:	f7fc f963 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 80049ce:	2100      	movs	r1, #0
 80049d0:	2029      	movs	r0, #41	; 0x29
 80049d2:	f7fc f95f 	bl	8000c94 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 80049d6:	f244 0110 	movw	r1, #16400	; 0x4010
 80049da:	202b      	movs	r0, #43	; 0x2b
 80049dc:	f7fc f95a 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 80049e0:	2100      	movs	r1, #0
 80049e2:	2050      	movs	r0, #80	; 0x50
 80049e4:	f7fc f956 	bl	8000c94 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 80049e8:	21ef      	movs	r1, #239	; 0xef
 80049ea:	2051      	movs	r0, #81	; 0x51
 80049ec:	f7fc f952 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 80049f0:	2100      	movs	r1, #0
 80049f2:	2052      	movs	r0, #82	; 0x52
 80049f4:	f7fc f94e 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 80049f8:	f240 113f 	movw	r1, #319	; 0x13f
 80049fc:	2053      	movs	r0, #83	; 0x53
 80049fe:	f7fc f949 	bl	8000c94 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 8004a02:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004a06:	2060      	movs	r0, #96	; 0x60
 8004a08:	f7fc f944 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	2061      	movs	r0, #97	; 0x61
 8004a10:	f7fc f940 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 8004a14:	2100      	movs	r1, #0
 8004a16:	206a      	movs	r0, #106	; 0x6a
 8004a18:	f7fc f93c 	bl	8000c94 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	2080      	movs	r0, #128	; 0x80
 8004a20:	f7fc f938 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 8004a24:	2100      	movs	r1, #0
 8004a26:	2081      	movs	r0, #129	; 0x81
 8004a28:	f7fc f934 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	2082      	movs	r0, #130	; 0x82
 8004a30:	f7fc f930 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 8004a34:	2100      	movs	r1, #0
 8004a36:	2083      	movs	r0, #131	; 0x83
 8004a38:	f7fc f92c 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	2084      	movs	r0, #132	; 0x84
 8004a40:	f7fc f928 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 8004a44:	2100      	movs	r1, #0
 8004a46:	2085      	movs	r0, #133	; 0x85
 8004a48:	f7fc f924 	bl	8000c94 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 8004a4c:	2110      	movs	r1, #16
 8004a4e:	2090      	movs	r0, #144	; 0x90
 8004a50:	f7fc f920 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 8004a54:	2100      	movs	r1, #0
 8004a56:	2092      	movs	r0, #146	; 0x92
 8004a58:	f7fc f91c 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	2093      	movs	r0, #147	; 0x93
 8004a60:	f7fc f918 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 8004a64:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004a68:	2095      	movs	r0, #149	; 0x95
 8004a6a:	f7fc f913 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 8004a6e:	2100      	movs	r1, #0
 8004a70:	2097      	movs	r0, #151	; 0x97
 8004a72:	f7fc f90f 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 8004a76:	2100      	movs	r1, #0
 8004a78:	2098      	movs	r0, #152	; 0x98
 8004a7a:	f7fc f90b 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 8004a7e:	f240 1173 	movw	r1, #371	; 0x173
 8004a82:	2007      	movs	r0, #7
 8004a84:	f7fc f906 	bl	8000c94 <LCD_WriteReg>
 8004a88:	f001 ba88 	b.w	8005f9c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 8004a8c:	4b74      	ldr	r3, [pc, #464]	; (8004c60 <LCD_Init+0x2af8>)
 8004a8e:	889b      	ldrh	r3, [r3, #4]
 8004a90:	f249 3231 	movw	r2, #37681	; 0x9331
 8004a94:	4293      	cmp	r3, r2
 8004a96:	f040 80e5 	bne.w	8004c64 <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 8004a9a:	f241 0114 	movw	r1, #4116	; 0x1014
 8004a9e:	20e7      	movs	r0, #231	; 0xe7
 8004aa0:	f7fc f8f8 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8004aa4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004aa8:	2001      	movs	r0, #1
 8004aaa:	f7fc f8f3 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 8004aae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ab2:	2002      	movs	r0, #2
 8004ab4:	f7fc f8ee 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8004ab8:	f241 0138 	movw	r1, #4152	; 0x1038
 8004abc:	2003      	movs	r0, #3
 8004abe:	f7fc f8e9 	bl	8000c94 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8004ac2:	f240 2102 	movw	r1, #514	; 0x202
 8004ac6:	2008      	movs	r0, #8
 8004ac8:	f7fc f8e4 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 8004acc:	2100      	movs	r1, #0
 8004ace:	2009      	movs	r0, #9
 8004ad0:	f7fc f8e0 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	200a      	movs	r0, #10
 8004ad8:	f7fc f8dc 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 8004adc:	2100      	movs	r1, #0
 8004ade:	200c      	movs	r0, #12
 8004ae0:	f7fc f8d8 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	200d      	movs	r0, #13
 8004ae8:	f7fc f8d4 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 8004aec:	2100      	movs	r1, #0
 8004aee:	200f      	movs	r0, #15
 8004af0:	f7fc f8d0 	bl	8000c94 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004af4:	2100      	movs	r1, #0
 8004af6:	2010      	movs	r0, #16
 8004af8:	f7fc f8cc 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 8004afc:	2107      	movs	r1, #7
 8004afe:	2011      	movs	r0, #17
 8004b00:	f7fc f8c8 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8004b04:	2100      	movs	r1, #0
 8004b06:	2012      	movs	r0, #18
 8004b08:	f7fc f8c4 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	2013      	movs	r0, #19
 8004b10:	f7fc f8c0 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8004b14:	20c8      	movs	r0, #200	; 0xc8
 8004b16:	f003 fab1 	bl	800807c <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004b1a:	f241 6190 	movw	r1, #5776	; 0x1690
 8004b1e:	2010      	movs	r0, #16
 8004b20:	f7fc f8b8 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8004b24:	f240 2127 	movw	r1, #551	; 0x227
 8004b28:	2011      	movs	r0, #17
 8004b2a:	f7fc f8b3 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004b2e:	2032      	movs	r0, #50	; 0x32
 8004b30:	f003 faa4 	bl	800807c <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8004b34:	210c      	movs	r1, #12
 8004b36:	2012      	movs	r0, #18
 8004b38:	f7fc f8ac 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004b3c:	2032      	movs	r0, #50	; 0x32
 8004b3e:	f003 fa9d 	bl	800807c <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8004b42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b46:	2013      	movs	r0, #19
 8004b48:	f7fc f8a4 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8004b4c:	2111      	movs	r1, #17
 8004b4e:	2029      	movs	r0, #41	; 0x29
 8004b50:	f7fc f8a0 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8004b54:	210b      	movs	r1, #11
 8004b56:	202b      	movs	r0, #43	; 0x2b
 8004b58:	f7fc f89c 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004b5c:	2032      	movs	r0, #50	; 0x32
 8004b5e:	f003 fa8d 	bl	800807c <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 8004b62:	2100      	movs	r1, #0
 8004b64:	2020      	movs	r0, #32
 8004b66:	f7fc f895 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 8004b6a:	f240 113f 	movw	r1, #319	; 0x13f
 8004b6e:	2021      	movs	r0, #33	; 0x21
 8004b70:	f7fc f890 	bl	8000c94 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8004b74:	2100      	movs	r1, #0
 8004b76:	2030      	movs	r0, #48	; 0x30
 8004b78:	f7fc f88c 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 8004b7c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004b80:	2031      	movs	r0, #49	; 0x31
 8004b82:	f7fc f887 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8004b86:	2100      	movs	r1, #0
 8004b88:	2032      	movs	r0, #50	; 0x32
 8004b8a:	f7fc f883 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8004b8e:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004b92:	2035      	movs	r0, #53	; 0x35
 8004b94:	f7fc f87e 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8004b98:	f241 610a 	movw	r1, #5642	; 0x160a
 8004b9c:	2036      	movs	r0, #54	; 0x36
 8004b9e:	f7fc f879 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8004ba2:	f240 7107 	movw	r1, #1799	; 0x707
 8004ba6:	2037      	movs	r0, #55	; 0x37
 8004ba8:	f7fc f874 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 8004bac:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004bb0:	2038      	movs	r0, #56	; 0x38
 8004bb2:	f7fc f86f 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004bb6:	f240 7107 	movw	r1, #1799	; 0x707
 8004bba:	2039      	movs	r0, #57	; 0x39
 8004bbc:	f7fc f86a 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8004bc0:	f240 4102 	movw	r1, #1026	; 0x402
 8004bc4:	203c      	movs	r0, #60	; 0x3c
 8004bc6:	f7fc f865 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 8004bca:	f640 410f 	movw	r1, #3087	; 0xc0f
 8004bce:	203d      	movs	r0, #61	; 0x3d
 8004bd0:	f7fc f860 	bl	8000c94 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	2050      	movs	r0, #80	; 0x50
 8004bd8:	f7fc f85c 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 8004bdc:	21ef      	movs	r1, #239	; 0xef
 8004bde:	2051      	movs	r0, #81	; 0x51
 8004be0:	f7fc f858 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8004be4:	2100      	movs	r1, #0
 8004be6:	2052      	movs	r0, #82	; 0x52
 8004be8:	f7fc f854 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 8004bec:	f240 113f 	movw	r1, #319	; 0x13f
 8004bf0:	2053      	movs	r0, #83	; 0x53
 8004bf2:	f7fc f84f 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8004bf6:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004bfa:	2060      	movs	r0, #96	; 0x60
 8004bfc:	f7fc f84a 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 8004c00:	2101      	movs	r1, #1
 8004c02:	2061      	movs	r0, #97	; 0x61
 8004c04:	f7fc f846 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8004c08:	2100      	movs	r1, #0
 8004c0a:	206a      	movs	r0, #106	; 0x6a
 8004c0c:	f7fc f842 	bl	8000c94 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8004c10:	2100      	movs	r1, #0
 8004c12:	2080      	movs	r0, #128	; 0x80
 8004c14:	f7fc f83e 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004c18:	2100      	movs	r1, #0
 8004c1a:	2081      	movs	r0, #129	; 0x81
 8004c1c:	f7fc f83a 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004c20:	2100      	movs	r1, #0
 8004c22:	2082      	movs	r0, #130	; 0x82
 8004c24:	f7fc f836 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004c28:	2100      	movs	r1, #0
 8004c2a:	2083      	movs	r0, #131	; 0x83
 8004c2c:	f7fc f832 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004c30:	2100      	movs	r1, #0
 8004c32:	2084      	movs	r0, #132	; 0x84
 8004c34:	f7fc f82e 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004c38:	2100      	movs	r1, #0
 8004c3a:	2085      	movs	r0, #133	; 0x85
 8004c3c:	f7fc f82a 	bl	8000c94 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8004c40:	2110      	movs	r1, #16
 8004c42:	2090      	movs	r0, #144	; 0x90
 8004c44:	f7fc f826 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004c48:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004c4c:	2092      	movs	r0, #146	; 0x92
 8004c4e:	f7fc f821 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8004c52:	f240 1133 	movw	r1, #307	; 0x133
 8004c56:	2007      	movs	r0, #7
 8004c58:	f7fc f81c 	bl	8000c94 <LCD_WriteReg>
 8004c5c:	f001 b99e 	b.w	8005f9c <LCD_Init+0x3e34>
 8004c60:	200005d4 	.word	0x200005d4
	} else if (lcddev.id == 0x5408) {
 8004c64:	4be2      	ldr	r3, [pc, #904]	; (8004ff0 <LCD_Init+0x2e88>)
 8004c66:	889b      	ldrh	r3, [r3, #4]
 8004c68:	f245 4208 	movw	r2, #21512	; 0x5408
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	f040 80a3 	bne.w	8004db8 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 8004c72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c76:	2001      	movs	r0, #1
 8004c78:	f7fc f80c 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 8004c7c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004c80:	2002      	movs	r0, #2
 8004c82:	f7fc f807 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 8004c86:	f241 0130 	movw	r1, #4144	; 0x1030
 8004c8a:	2003      	movs	r0, #3
 8004c8c:	f7fc f802 	bl	8000c94 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8004c90:	2100      	movs	r1, #0
 8004c92:	2004      	movs	r0, #4
 8004c94:	f7fb fffe 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8004c98:	f240 2107 	movw	r1, #519	; 0x207
 8004c9c:	2008      	movs	r0, #8
 8004c9e:	f7fb fff9 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	2009      	movs	r0, #9
 8004ca6:	f7fb fff5 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 8004caa:	2100      	movs	r1, #0
 8004cac:	200a      	movs	r0, #10
 8004cae:	f7fb fff1 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	200c      	movs	r0, #12
 8004cb6:	f7fb ffed 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 8004cba:	2100      	movs	r1, #0
 8004cbc:	200d      	movs	r0, #13
 8004cbe:	f7fb ffe9 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	200f      	movs	r0, #15
 8004cc6:	f7fb ffe5 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(20);
 8004cca:	2014      	movs	r0, #20
 8004ccc:	f003 f9d6 	bl	800807c <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8004cd0:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8004cd4:	2010      	movs	r0, #16
 8004cd6:	f7fb ffdd 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 8004cda:	2101      	movs	r1, #1
 8004cdc:	2011      	movs	r0, #17
 8004cde:	f7fb ffd9 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	2017      	movs	r0, #23
 8004ce6:	f7fb ffd5 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 8004cea:	f44f 719c 	mov.w	r1, #312	; 0x138
 8004cee:	2012      	movs	r0, #18
 8004cf0:	f7fb ffd0 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 8004cf4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004cf8:	2013      	movs	r0, #19
 8004cfa:	f7fb ffcb 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 8004cfe:	2109      	movs	r1, #9
 8004d00:	2029      	movs	r0, #41	; 0x29
 8004d02:	f7fb ffc7 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 8004d06:	2109      	movs	r1, #9
 8004d08:	202a      	movs	r0, #42	; 0x2a
 8004d0a:	f7fb ffc3 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 8004d0e:	2100      	movs	r1, #0
 8004d10:	20a4      	movs	r0, #164	; 0xa4
 8004d12:	f7fb ffbf 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 8004d16:	2100      	movs	r1, #0
 8004d18:	2050      	movs	r0, #80	; 0x50
 8004d1a:	f7fb ffbb 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 8004d1e:	21ef      	movs	r1, #239	; 0xef
 8004d20:	2051      	movs	r0, #81	; 0x51
 8004d22:	f7fb ffb7 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 8004d26:	2100      	movs	r1, #0
 8004d28:	2052      	movs	r0, #82	; 0x52
 8004d2a:	f7fb ffb3 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 8004d2e:	f240 113f 	movw	r1, #319	; 0x13f
 8004d32:	2053      	movs	r0, #83	; 0x53
 8004d34:	f7fb ffae 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8004d38:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004d3c:	2060      	movs	r0, #96	; 0x60
 8004d3e:	f7fb ffa9 	bl	8000c94 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 8004d42:	2101      	movs	r1, #1
 8004d44:	2061      	movs	r0, #97	; 0x61
 8004d46:	f7fb ffa5 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	206a      	movs	r0, #106	; 0x6a
 8004d4e:	f7fb ffa1 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 8004d52:	2100      	movs	r1, #0
 8004d54:	2080      	movs	r0, #128	; 0x80
 8004d56:	f7fb ff9d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	2081      	movs	r0, #129	; 0x81
 8004d5e:	f7fb ff99 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 8004d62:	2100      	movs	r1, #0
 8004d64:	2082      	movs	r0, #130	; 0x82
 8004d66:	f7fb ff95 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	2083      	movs	r0, #131	; 0x83
 8004d6e:	f7fb ff91 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 8004d72:	2100      	movs	r1, #0
 8004d74:	2084      	movs	r0, #132	; 0x84
 8004d76:	f7fb ff8d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	2085      	movs	r0, #133	; 0x85
 8004d7e:	f7fb ff89 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 8004d82:	2113      	movs	r1, #19
 8004d84:	2090      	movs	r0, #144	; 0x90
 8004d86:	f7fb ff85 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	2092      	movs	r0, #146	; 0x92
 8004d8e:	f7fb ff81 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8004d92:	2103      	movs	r1, #3
 8004d94:	2093      	movs	r0, #147	; 0x93
 8004d96:	f7fb ff7d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8004d9a:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004d9e:	2095      	movs	r0, #149	; 0x95
 8004da0:	f7fb ff78 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 8004da4:	f240 1173 	movw	r1, #371	; 0x173
 8004da8:	2007      	movs	r0, #7
 8004daa:	f7fb ff73 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(50);
 8004dae:	2032      	movs	r0, #50	; 0x32
 8004db0:	f003 f964 	bl	800807c <HAL_Delay>
 8004db4:	f001 b8f2 	b.w	8005f9c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8004db8:	4b8d      	ldr	r3, [pc, #564]	; (8004ff0 <LCD_Init+0x2e88>)
 8004dba:	889b      	ldrh	r3, [r3, #4]
 8004dbc:	f241 5205 	movw	r2, #5381	; 0x1505
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	f040 8117 	bne.w	8004ff4 <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	2007      	movs	r0, #7
 8004dca:	f7fb ff63 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(50);
 8004dce:	2032      	movs	r0, #50	; 0x32
 8004dd0:	f003 f954 	bl	800807c <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8004dd4:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004dd8:	2012      	movs	r0, #18
 8004dda:	f7fb ff5b 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 8004dde:	2101      	movs	r1, #1
 8004de0:	20a4      	movs	r0, #164	; 0xa4
 8004de2:	f7fb ff57 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8004de6:	210f      	movs	r1, #15
 8004de8:	2008      	movs	r0, #8
 8004dea:	f7fb ff53 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 8004dee:	2108      	movs	r1, #8
 8004df0:	200a      	movs	r0, #10
 8004df2:	f7fb ff4f 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8004df6:	2108      	movs	r1, #8
 8004df8:	200d      	movs	r0, #13
 8004dfa:	f7fb ff4b 	bl	8000c94 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 8004dfe:	f240 7107 	movw	r1, #1799	; 0x707
 8004e02:	2030      	movs	r0, #48	; 0x30
 8004e04:	f7fb ff46 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8004e08:	2107      	movs	r1, #7
 8004e0a:	2031      	movs	r0, #49	; 0x31
 8004e0c:	f7fb ff42 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8004e10:	f240 6103 	movw	r1, #1539	; 0x603
 8004e14:	2032      	movs	r0, #50	; 0x32
 8004e16:	f7fb ff3d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 8004e1a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004e1e:	2033      	movs	r0, #51	; 0x33
 8004e20:	f7fb ff38 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8004e24:	f240 2102 	movw	r1, #514	; 0x202
 8004e28:	2034      	movs	r0, #52	; 0x34
 8004e2a:	f7fb ff33 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 8004e2e:	2102      	movs	r1, #2
 8004e30:	2035      	movs	r0, #53	; 0x35
 8004e32:	f7fb ff2f 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 8004e36:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8004e3a:	2036      	movs	r0, #54	; 0x36
 8004e3c:	f7fb ff2a 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8004e40:	f240 7107 	movw	r1, #1799	; 0x707
 8004e44:	2037      	movs	r0, #55	; 0x37
 8004e46:	f7fb ff25 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	2038      	movs	r0, #56	; 0x38
 8004e4e:	f7fb ff21 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 8004e52:	2100      	movs	r1, #0
 8004e54:	2039      	movs	r0, #57	; 0x39
 8004e56:	f7fb ff1d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 8004e5a:	f240 7107 	movw	r1, #1799	; 0x707
 8004e5e:	203a      	movs	r0, #58	; 0x3a
 8004e60:	f7fb ff18 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 8004e64:	2100      	movs	r1, #0
 8004e66:	203b      	movs	r0, #59	; 0x3b
 8004e68:	f7fb ff14 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8004e6c:	2107      	movs	r1, #7
 8004e6e:	203c      	movs	r0, #60	; 0x3c
 8004e70:	f7fb ff10 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 8004e74:	2100      	movs	r1, #0
 8004e76:	203d      	movs	r0, #61	; 0x3d
 8004e78:	f7fb ff0c 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(50);
 8004e7c:	2032      	movs	r0, #50	; 0x32
 8004e7e:	f003 f8fd 	bl	800807c <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 8004e82:	2101      	movs	r1, #1
 8004e84:	2007      	movs	r0, #7
 8004e86:	f7fb ff05 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	2017      	movs	r0, #23
 8004e8e:	f7fb ff01 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(50);
 8004e92:	2032      	movs	r0, #50	; 0x32
 8004e94:	f003 f8f2 	bl	800807c <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8004e98:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8004e9c:	2010      	movs	r0, #16
 8004e9e:	f7fb fef9 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8004ea2:	f240 2117 	movw	r1, #535	; 0x217
 8004ea6:	2011      	movs	r0, #17
 8004ea8:	f7fb fef4 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8004eac:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004eb0:	2012      	movs	r0, #18
 8004eb2:	f7fb feef 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8004eb6:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004eba:	2013      	movs	r0, #19
 8004ebc:	f7fb feea 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	202a      	movs	r0, #42	; 0x2a
 8004ec4:	f7fb fee6 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8004ec8:	210a      	movs	r1, #10
 8004eca:	2029      	movs	r0, #41	; 0x29
 8004ecc:	f7fb fee2 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8004ed0:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8004ed4:	2012      	movs	r0, #18
 8004ed6:	f7fb fedd 	bl	8000c94 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 8004eda:	2100      	movs	r1, #0
 8004edc:	2050      	movs	r0, #80	; 0x50
 8004ede:	f7fb fed9 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004ee2:	21ef      	movs	r1, #239	; 0xef
 8004ee4:	2051      	movs	r0, #81	; 0x51
 8004ee6:	f7fb fed5 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004eea:	2100      	movs	r1, #0
 8004eec:	2052      	movs	r0, #82	; 0x52
 8004eee:	f7fb fed1 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004ef2:	f240 113f 	movw	r1, #319	; 0x13f
 8004ef6:	2053      	movs	r0, #83	; 0x53
 8004ef8:	f7fb fecc 	bl	8000c94 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 8004efc:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004f00:	2060      	movs	r0, #96	; 0x60
 8004f02:	f7fb fec7 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004f06:	2101      	movs	r1, #1
 8004f08:	2061      	movs	r0, #97	; 0x61
 8004f0a:	f7fb fec3 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004f0e:	2100      	movs	r1, #0
 8004f10:	206a      	movs	r0, #106	; 0x6a
 8004f12:	f7fb febf 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8004f16:	2100      	movs	r1, #0
 8004f18:	2080      	movs	r0, #128	; 0x80
 8004f1a:	f7fb febb 	bl	8000c94 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 8004f1e:	2100      	movs	r1, #0
 8004f20:	2081      	movs	r0, #129	; 0x81
 8004f22:	f7fb feb7 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004f26:	2100      	movs	r1, #0
 8004f28:	2082      	movs	r0, #130	; 0x82
 8004f2a:	f7fb feb3 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004f2e:	2100      	movs	r1, #0
 8004f30:	2083      	movs	r0, #131	; 0x83
 8004f32:	f7fb feaf 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004f36:	2100      	movs	r1, #0
 8004f38:	2084      	movs	r0, #132	; 0x84
 8004f3a:	f7fb feab 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004f3e:	2100      	movs	r1, #0
 8004f40:	2085      	movs	r0, #133	; 0x85
 8004f42:	f7fb fea7 	bl	8000c94 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8004f46:	2113      	movs	r1, #19
 8004f48:	2090      	movs	r0, #144	; 0x90
 8004f4a:	f7fb fea3 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8004f4e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004f52:	2092      	movs	r0, #146	; 0x92
 8004f54:	f7fb fe9e 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8004f58:	2105      	movs	r1, #5
 8004f5a:	2093      	movs	r0, #147	; 0x93
 8004f5c:	f7fb fe9a 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8004f60:	2100      	movs	r1, #0
 8004f62:	2095      	movs	r0, #149	; 0x95
 8004f64:	f7fb fe96 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8004f68:	2100      	movs	r1, #0
 8004f6a:	2097      	movs	r0, #151	; 0x97
 8004f6c:	f7fb fe92 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8004f70:	2100      	movs	r1, #0
 8004f72:	2098      	movs	r0, #152	; 0x98
 8004f74:	f7fb fe8e 	bl	8000c94 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8004f78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f7c:	2001      	movs	r0, #1
 8004f7e:	f7fb fe89 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004f82:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004f86:	2002      	movs	r0, #2
 8004f88:	f7fb fe84 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004f8c:	f241 0138 	movw	r1, #4152	; 0x1038
 8004f90:	2003      	movs	r0, #3
 8004f92:	f7fb fe7f 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004f96:	2100      	movs	r1, #0
 8004f98:	2004      	movs	r0, #4
 8004f9a:	f7fb fe7b 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	200c      	movs	r0, #12
 8004fa2:	f7fb fe77 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	200f      	movs	r0, #15
 8004faa:	f7fb fe73 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 8004fae:	2100      	movs	r1, #0
 8004fb0:	2020      	movs	r0, #32
 8004fb2:	f7fb fe6f 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	2021      	movs	r0, #33	; 0x21
 8004fba:	f7fb fe6b 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 8004fbe:	2121      	movs	r1, #33	; 0x21
 8004fc0:	2007      	movs	r0, #7
 8004fc2:	f7fb fe67 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(20);
 8004fc6:	2014      	movs	r0, #20
 8004fc8:	f003 f858 	bl	800807c <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004fcc:	2161      	movs	r1, #97	; 0x61
 8004fce:	2007      	movs	r0, #7
 8004fd0:	f7fb fe60 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(20);
 8004fd4:	2014      	movs	r0, #20
 8004fd6:	f003 f851 	bl	800807c <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 8004fda:	f240 1173 	movw	r1, #371	; 0x173
 8004fde:	2007      	movs	r0, #7
 8004fe0:	f7fb fe58 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(20);
 8004fe4:	2014      	movs	r0, #20
 8004fe6:	f003 f849 	bl	800807c <HAL_Delay>
 8004fea:	f000 bfd7 	b.w	8005f9c <LCD_Init+0x3e34>
 8004fee:	bf00      	nop
 8004ff0:	200005d4 	.word	0x200005d4
	} else if (lcddev.id == 0xB505) {
 8004ff4:	4bf0      	ldr	r3, [pc, #960]	; (80053b8 <LCD_Init+0x3250>)
 8004ff6:	889b      	ldrh	r3, [r3, #4]
 8004ff8:	f24b 5205 	movw	r2, #46341	; 0xb505
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	f040 8103 	bne.w	8005208 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 8005002:	2100      	movs	r1, #0
 8005004:	2000      	movs	r0, #0
 8005006:	f7fb fe45 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800500a:	2100      	movs	r1, #0
 800500c:	2000      	movs	r0, #0
 800500e:	f7fb fe41 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005012:	2100      	movs	r1, #0
 8005014:	2000      	movs	r0, #0
 8005016:	f7fb fe3d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800501a:	2100      	movs	r1, #0
 800501c:	2000      	movs	r0, #0
 800501e:	f7fb fe39 	bl	8000c94 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 8005022:	2101      	movs	r1, #1
 8005024:	20a4      	movs	r0, #164	; 0xa4
 8005026:	f7fb fe35 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(20);
 800502a:	2014      	movs	r0, #20
 800502c:	f003 f826 	bl	800807c <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8005030:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005034:	2060      	movs	r0, #96	; 0x60
 8005036:	f7fb fe2d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 800503a:	f240 2102 	movw	r1, #514	; 0x202
 800503e:	2008      	movs	r0, #8
 8005040:	f7fb fe28 	bl	8000c94 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 8005044:	f44f 7105 	mov.w	r1, #532	; 0x214
 8005048:	2030      	movs	r0, #48	; 0x30
 800504a:	f7fb fe23 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 800504e:	f243 7115 	movw	r1, #14101	; 0x3715
 8005052:	2031      	movs	r0, #49	; 0x31
 8005054:	f7fb fe1e 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8005058:	f240 6104 	movw	r1, #1540	; 0x604
 800505c:	2032      	movs	r0, #50	; 0x32
 800505e:	f7fb fe19 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 8005062:	f640 6116 	movw	r1, #3606	; 0xe16
 8005066:	2033      	movs	r0, #51	; 0x33
 8005068:	f7fb fe14 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 800506c:	f242 2111 	movw	r1, #8721	; 0x2211
 8005070:	2034      	movs	r0, #52	; 0x34
 8005072:	f7fb fe0f 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 8005076:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 800507a:	2035      	movs	r0, #53	; 0x35
 800507c:	f7fb fe0a 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8005080:	f248 5107 	movw	r1, #34055	; 0x8507
 8005084:	2036      	movs	r0, #54	; 0x36
 8005086:	f7fb fe05 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 800508a:	f241 4107 	movw	r1, #5127	; 0x1407
 800508e:	2037      	movs	r0, #55	; 0x37
 8005090:	f7fb fe00 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 8005094:	f241 4103 	movw	r1, #5123	; 0x1403
 8005098:	2038      	movs	r0, #56	; 0x38
 800509a:	f7fb fdfb 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 800509e:	2120      	movs	r1, #32
 80050a0:	2039      	movs	r0, #57	; 0x39
 80050a2:	f7fb fdf7 	bl	8000c94 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 80050a6:	211a      	movs	r1, #26
 80050a8:	2090      	movs	r0, #144	; 0x90
 80050aa:	f7fb fdf3 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 80050ae:	2100      	movs	r1, #0
 80050b0:	2010      	movs	r0, #16
 80050b2:	f7fb fdef 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80050b6:	2107      	movs	r1, #7
 80050b8:	2011      	movs	r0, #17
 80050ba:	f7fb fdeb 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80050be:	2100      	movs	r1, #0
 80050c0:	2012      	movs	r0, #18
 80050c2:	f7fb fde7 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80050c6:	2100      	movs	r1, #0
 80050c8:	2013      	movs	r0, #19
 80050ca:	f7fb fde3 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(20);
 80050ce:	2014      	movs	r0, #20
 80050d0:	f002 ffd4 	bl	800807c <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 80050d4:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 80050d8:	2010      	movs	r0, #16
 80050da:	f7fb fddb 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 80050de:	f240 1137 	movw	r1, #311	; 0x137
 80050e2:	2011      	movs	r0, #17
 80050e4:	f7fb fdd6 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(20);
 80050e8:	2014      	movs	r0, #20
 80050ea:	f002 ffc7 	bl	800807c <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 80050ee:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80050f2:	2012      	movs	r0, #18
 80050f4:	f7fb fdce 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(20);
 80050f8:	2014      	movs	r0, #20
 80050fa:	f002 ffbf 	bl	800807c <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 80050fe:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8005102:	2013      	movs	r0, #19
 8005104:	f7fb fdc6 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8005108:	2180      	movs	r1, #128	; 0x80
 800510a:	202a      	movs	r0, #42	; 0x2a
 800510c:	f7fb fdc2 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8005110:	2148      	movs	r1, #72	; 0x48
 8005112:	2029      	movs	r0, #41	; 0x29
 8005114:	f7fb fdbe 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(20);
 8005118:	2014      	movs	r0, #20
 800511a:	f002 ffaf 	bl	800807c <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 800511e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005122:	2001      	movs	r0, #1
 8005124:	f7fb fdb6 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8005128:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800512c:	2002      	movs	r0, #2
 800512e:	f7fb fdb1 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8005132:	f241 0138 	movw	r1, #4152	; 0x1038
 8005136:	2003      	movs	r0, #3
 8005138:	f7fb fdac 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 800513c:	f240 2102 	movw	r1, #514	; 0x202
 8005140:	2008      	movs	r0, #8
 8005142:	f7fb fda7 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 8005146:	2100      	movs	r1, #0
 8005148:	200a      	movs	r0, #10
 800514a:	f7fb fda3 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 800514e:	2100      	movs	r1, #0
 8005150:	200c      	movs	r0, #12
 8005152:	f7fb fd9f 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 8005156:	2100      	movs	r1, #0
 8005158:	200d      	movs	r0, #13
 800515a:	f7fb fd9b 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 800515e:	2130      	movs	r1, #48	; 0x30
 8005160:	200e      	movs	r0, #14
 8005162:	f7fb fd97 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8005166:	2100      	movs	r1, #0
 8005168:	2050      	movs	r0, #80	; 0x50
 800516a:	f7fb fd93 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 800516e:	21ef      	movs	r1, #239	; 0xef
 8005170:	2051      	movs	r0, #81	; 0x51
 8005172:	f7fb fd8f 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8005176:	2100      	movs	r1, #0
 8005178:	2052      	movs	r0, #82	; 0x52
 800517a:	f7fb fd8b 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 800517e:	f240 113f 	movw	r1, #319	; 0x13f
 8005182:	2053      	movs	r0, #83	; 0x53
 8005184:	f7fb fd86 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8005188:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800518c:	2060      	movs	r0, #96	; 0x60
 800518e:	f7fb fd81 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8005192:	2101      	movs	r1, #1
 8005194:	2061      	movs	r0, #97	; 0x61
 8005196:	f7fb fd7d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 800519a:	2100      	movs	r1, #0
 800519c:	206a      	movs	r0, #106	; 0x6a
 800519e:	f7fb fd79 	bl	8000c94 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 80051a2:	2111      	movs	r1, #17
 80051a4:	2090      	movs	r0, #144	; 0x90
 80051a6:	f7fb fd75 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80051aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80051ae:	2092      	movs	r0, #146	; 0x92
 80051b0:	f7fb fd70 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 80051b4:	f240 4102 	movw	r1, #1026	; 0x402
 80051b8:	2093      	movs	r0, #147	; 0x93
 80051ba:	f7fb fd6b 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 80051be:	2102      	movs	r1, #2
 80051c0:	2094      	movs	r0, #148	; 0x94
 80051c2:	f7fb fd67 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(20);
 80051c6:	2014      	movs	r0, #20
 80051c8:	f002 ff58 	bl	800807c <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 80051cc:	2101      	movs	r1, #1
 80051ce:	2007      	movs	r0, #7
 80051d0:	f7fb fd60 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(20);
 80051d4:	2014      	movs	r0, #20
 80051d6:	f002 ff51 	bl	800807c <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 80051da:	2161      	movs	r1, #97	; 0x61
 80051dc:	2007      	movs	r0, #7
 80051de:	f7fb fd59 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 80051e2:	f240 1173 	movw	r1, #371	; 0x173
 80051e6:	2007      	movs	r0, #7
 80051e8:	f7fb fd54 	bl	8000c94 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 80051ec:	2100      	movs	r1, #0
 80051ee:	2020      	movs	r0, #32
 80051f0:	f7fb fd50 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 80051f4:	2100      	movs	r1, #0
 80051f6:	2021      	movs	r0, #33	; 0x21
 80051f8:	f7fb fd4c 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 80051fc:	2122      	movs	r1, #34	; 0x22
 80051fe:	2000      	movs	r0, #0
 8005200:	f7fb fd48 	bl	8000c94 <LCD_WriteReg>
 8005204:	f000 beca 	b.w	8005f9c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8005208:	4b6b      	ldr	r3, [pc, #428]	; (80053b8 <LCD_Init+0x3250>)
 800520a:	889b      	ldrh	r3, [r3, #4]
 800520c:	f24c 5205 	movw	r2, #50437	; 0xc505
 8005210:	4293      	cmp	r3, r2
 8005212:	f040 80d3 	bne.w	80053bc <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 8005216:	2100      	movs	r1, #0
 8005218:	2000      	movs	r0, #0
 800521a:	f7fb fd3b 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800521e:	2100      	movs	r1, #0
 8005220:	2000      	movs	r0, #0
 8005222:	f7fb fd37 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(20);
 8005226:	2014      	movs	r0, #20
 8005228:	f002 ff28 	bl	800807c <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 800522c:	2100      	movs	r1, #0
 800522e:	2000      	movs	r0, #0
 8005230:	f7fb fd30 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005234:	2100      	movs	r1, #0
 8005236:	2000      	movs	r0, #0
 8005238:	f7fb fd2c 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800523c:	2100      	movs	r1, #0
 800523e:	2000      	movs	r0, #0
 8005240:	f7fb fd28 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005244:	2100      	movs	r1, #0
 8005246:	2000      	movs	r0, #0
 8005248:	f7fb fd24 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 800524c:	2101      	movs	r1, #1
 800524e:	20a4      	movs	r0, #164	; 0xa4
 8005250:	f7fb fd20 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(20);
 8005254:	2014      	movs	r0, #20
 8005256:	f002 ff11 	bl	800807c <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 800525a:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800525e:	2060      	movs	r0, #96	; 0x60
 8005260:	f7fb fd18 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 8005264:	f640 0106 	movw	r1, #2054	; 0x806
 8005268:	2008      	movs	r0, #8
 800526a:	f7fb fd13 	bl	8000c94 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 800526e:	f240 7103 	movw	r1, #1795	; 0x703
 8005272:	2030      	movs	r0, #48	; 0x30
 8005274:	f7fb fd0e 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8005278:	2101      	movs	r1, #1
 800527a:	2031      	movs	r0, #49	; 0x31
 800527c:	f7fb fd0a 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8005280:	2104      	movs	r1, #4
 8005282:	2032      	movs	r0, #50	; 0x32
 8005284:	f7fb fd06 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8005288:	f44f 7181 	mov.w	r1, #258	; 0x102
 800528c:	2033      	movs	r0, #51	; 0x33
 800528e:	f7fb fd01 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 8005292:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005296:	2034      	movs	r0, #52	; 0x34
 8005298:	f7fb fcfc 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 800529c:	f240 1103 	movw	r1, #259	; 0x103
 80052a0:	2035      	movs	r0, #53	; 0x35
 80052a2:	f7fb fcf7 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 80052a6:	211f      	movs	r1, #31
 80052a8:	2036      	movs	r0, #54	; 0x36
 80052aa:	f7fb fcf3 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 80052ae:	f240 7103 	movw	r1, #1795	; 0x703
 80052b2:	2037      	movs	r0, #55	; 0x37
 80052b4:	f7fb fcee 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 80052b8:	2101      	movs	r1, #1
 80052ba:	2038      	movs	r0, #56	; 0x38
 80052bc:	f7fb fcea 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 80052c0:	2104      	movs	r1, #4
 80052c2:	2039      	movs	r0, #57	; 0x39
 80052c4:	f7fb fce6 	bl	8000c94 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 80052c8:	2115      	movs	r1, #21
 80052ca:	2090      	movs	r0, #144	; 0x90
 80052cc:	f7fb fce2 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 80052d0:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80052d4:	2010      	movs	r0, #16
 80052d6:	f7fb fcdd 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 80052da:	f240 2147 	movw	r1, #583	; 0x247
 80052de:	2011      	movs	r0, #17
 80052e0:	f7fb fcd8 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 80052e4:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80052e8:	2012      	movs	r0, #18
 80052ea:	f7fb fcd3 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 80052ee:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 80052f2:	2013      	movs	r0, #19
 80052f4:	f7fb fcce 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(120);
 80052f8:	2078      	movs	r0, #120	; 0x78
 80052fa:	f002 febf 	bl	800807c <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 80052fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005302:	2001      	movs	r0, #1
 8005304:	f7fb fcc6 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8005308:	f44f 7100 	mov.w	r1, #512	; 0x200
 800530c:	2002      	movs	r0, #2
 800530e:	f7fb fcc1 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8005312:	f241 0130 	movw	r1, #4144	; 0x1030
 8005316:	2003      	movs	r0, #3
 8005318:	f7fb fcbc 	bl	8000c94 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 800531c:	2108      	movs	r1, #8
 800531e:	200a      	movs	r0, #10
 8005320:	f7fb fcb8 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8005324:	2100      	movs	r1, #0
 8005326:	200c      	movs	r0, #12
 8005328:	f7fb fcb4 	bl	8000c94 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 800532c:	2120      	movs	r1, #32
 800532e:	200e      	movs	r0, #14
 8005330:	f7fb fcb0 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8005334:	2100      	movs	r1, #0
 8005336:	200f      	movs	r0, #15
 8005338:	f7fb fcac 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 800533c:	2100      	movs	r1, #0
 800533e:	2020      	movs	r0, #32
 8005340:	f7fb fca8 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 8005344:	2100      	movs	r1, #0
 8005346:	2021      	movs	r0, #33	; 0x21
 8005348:	f7fb fca4 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 800534c:	213d      	movs	r1, #61	; 0x3d
 800534e:	202a      	movs	r0, #42	; 0x2a
 8005350:	f7fb fca0 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(20);
 8005354:	2014      	movs	r0, #20
 8005356:	f002 fe91 	bl	800807c <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 800535a:	212d      	movs	r1, #45	; 0x2d
 800535c:	2029      	movs	r0, #41	; 0x29
 800535e:	f7fb fc99 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8005362:	2100      	movs	r1, #0
 8005364:	2050      	movs	r0, #80	; 0x50
 8005366:	f7fb fc95 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 800536a:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 800536e:	2051      	movs	r0, #81	; 0x51
 8005370:	f7fb fc90 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8005374:	2100      	movs	r1, #0
 8005376:	2052      	movs	r0, #82	; 0x52
 8005378:	f7fb fc8c 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 800537c:	f240 113f 	movw	r1, #319	; 0x13f
 8005380:	2053      	movs	r0, #83	; 0x53
 8005382:	f7fb fc87 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 8005386:	2100      	movs	r1, #0
 8005388:	2061      	movs	r0, #97	; 0x61
 800538a:	f7fb fc83 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 800538e:	2100      	movs	r1, #0
 8005390:	206a      	movs	r0, #106	; 0x6a
 8005392:	f7fb fc7f 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8005396:	f44f 7140 	mov.w	r1, #768	; 0x300
 800539a:	2092      	movs	r0, #146	; 0x92
 800539c:	f7fb fc7a 	bl	8000c94 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 80053a0:	2105      	movs	r1, #5
 80053a2:	2093      	movs	r0, #147	; 0x93
 80053a4:	f7fb fc76 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 80053a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053ac:	2007      	movs	r0, #7
 80053ae:	f7fb fc71 	bl	8000c94 <LCD_WriteReg>
 80053b2:	f000 bdf3 	b.w	8005f9c <LCD_Init+0x3e34>
 80053b6:	bf00      	nop
 80053b8:	200005d4 	.word	0x200005d4
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 80053bc:	4bc2      	ldr	r3, [pc, #776]	; (80056c8 <LCD_Init+0x3560>)
 80053be:	889b      	ldrh	r3, [r3, #4]
 80053c0:	f648 1289 	movw	r2, #35209	; 0x8989
 80053c4:	4293      	cmp	r3, r2
 80053c6:	f040 80bc 	bne.w	8005542 <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 80053ca:	2101      	movs	r1, #1
 80053cc:	2000      	movs	r0, #0
 80053ce:	f7fb fc61 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 80053d2:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 80053d6:	2003      	movs	r0, #3
 80053d8:	f7fb fc5c 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80053dc:	2100      	movs	r1, #0
 80053de:	200c      	movs	r0, #12
 80053e0:	f7fb fc58 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 80053e4:	f640 010c 	movw	r1, #2060	; 0x80c
 80053e8:	200d      	movs	r0, #13
 80053ea:	f7fb fc53 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 80053ee:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 80053f2:	200e      	movs	r0, #14
 80053f4:	f7fb fc4e 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 80053f8:	21b0      	movs	r1, #176	; 0xb0
 80053fa:	201e      	movs	r0, #30
 80053fc:	f7fb fc4a 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 8005400:	f642 313f 	movw	r1, #11071	; 0x2b3f
 8005404:	2001      	movs	r0, #1
 8005406:	f7fb fc45 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 800540a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800540e:	2002      	movs	r0, #2
 8005410:	f7fb fc40 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8005414:	2100      	movs	r1, #0
 8005416:	2010      	movs	r0, #16
 8005418:	f7fb fc3c 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 800541c:	f246 0178 	movw	r1, #24696	; 0x6078
 8005420:	2011      	movs	r0, #17
 8005422:	f7fb fc37 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 8005426:	2100      	movs	r1, #0
 8005428:	2005      	movs	r0, #5
 800542a:	f7fb fc33 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 800542e:	2100      	movs	r1, #0
 8005430:	2006      	movs	r0, #6
 8005432:	f7fb fc2f 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 8005436:	f64e 711c 	movw	r1, #61212	; 0xef1c
 800543a:	2016      	movs	r0, #22
 800543c:	f7fb fc2a 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8005440:	2103      	movs	r1, #3
 8005442:	2017      	movs	r0, #23
 8005444:	f7fb fc26 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8005448:	f240 2133 	movw	r1, #563	; 0x233
 800544c:	2007      	movs	r0, #7
 800544e:	f7fb fc21 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 8005452:	2100      	movs	r1, #0
 8005454:	200b      	movs	r0, #11
 8005456:	f7fb fc1d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 800545a:	2100      	movs	r1, #0
 800545c:	200f      	movs	r0, #15
 800545e:	f7fb fc19 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 8005462:	2100      	movs	r1, #0
 8005464:	2041      	movs	r0, #65	; 0x41
 8005466:	f7fb fc15 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 800546a:	2100      	movs	r1, #0
 800546c:	2042      	movs	r0, #66	; 0x42
 800546e:	f7fb fc11 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 8005472:	2100      	movs	r1, #0
 8005474:	2048      	movs	r0, #72	; 0x48
 8005476:	f7fb fc0d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 800547a:	f240 113f 	movw	r1, #319	; 0x13f
 800547e:	2049      	movs	r0, #73	; 0x49
 8005480:	f7fb fc08 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 8005484:	2100      	movs	r1, #0
 8005486:	204a      	movs	r0, #74	; 0x4a
 8005488:	f7fb fc04 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 800548c:	2100      	movs	r1, #0
 800548e:	204b      	movs	r0, #75	; 0x4b
 8005490:	f7fb fc00 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 8005494:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8005498:	2044      	movs	r0, #68	; 0x44
 800549a:	f7fb fbfb 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 800549e:	2100      	movs	r1, #0
 80054a0:	2045      	movs	r0, #69	; 0x45
 80054a2:	f7fb fbf7 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 80054a6:	f240 113f 	movw	r1, #319	; 0x13f
 80054aa:	2046      	movs	r0, #70	; 0x46
 80054ac:	f7fb fbf2 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 80054b0:	f240 7107 	movw	r1, #1799	; 0x707
 80054b4:	2030      	movs	r0, #48	; 0x30
 80054b6:	f7fb fbed 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 80054ba:	f44f 7101 	mov.w	r1, #516	; 0x204
 80054be:	2031      	movs	r0, #49	; 0x31
 80054c0:	f7fb fbe8 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 80054c4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80054c8:	2032      	movs	r0, #50	; 0x32
 80054ca:	f7fb fbe3 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 80054ce:	f240 5102 	movw	r1, #1282	; 0x502
 80054d2:	2033      	movs	r0, #51	; 0x33
 80054d4:	f7fb fbde 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 80054d8:	f240 5107 	movw	r1, #1287	; 0x507
 80054dc:	2034      	movs	r0, #52	; 0x34
 80054de:	f7fb fbd9 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 80054e2:	f44f 7101 	mov.w	r1, #516	; 0x204
 80054e6:	2035      	movs	r0, #53	; 0x35
 80054e8:	f7fb fbd4 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 80054ec:	f44f 7101 	mov.w	r1, #516	; 0x204
 80054f0:	2036      	movs	r0, #54	; 0x36
 80054f2:	f7fb fbcf 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 80054f6:	f240 5102 	movw	r1, #1282	; 0x502
 80054fa:	2037      	movs	r0, #55	; 0x37
 80054fc:	f7fb fbca 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 8005500:	f240 3102 	movw	r1, #770	; 0x302
 8005504:	203a      	movs	r0, #58	; 0x3a
 8005506:	f7fb fbc5 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 800550a:	f240 3102 	movw	r1, #770	; 0x302
 800550e:	203b      	movs	r0, #59	; 0x3b
 8005510:	f7fb fbc0 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 8005514:	2100      	movs	r1, #0
 8005516:	2023      	movs	r0, #35	; 0x23
 8005518:	f7fb fbbc 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 800551c:	2100      	movs	r1, #0
 800551e:	2024      	movs	r0, #36	; 0x24
 8005520:	f7fb fbb8 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 8005524:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005528:	2025      	movs	r0, #37	; 0x25
 800552a:	f7fb fbb3 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 800552e:	2100      	movs	r1, #0
 8005530:	204f      	movs	r0, #79	; 0x4f
 8005532:	f7fb fbaf 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 8005536:	2100      	movs	r1, #0
 8005538:	204e      	movs	r0, #78	; 0x4e
 800553a:	f7fb fbab 	bl	8000c94 <LCD_WriteReg>
 800553e:	f000 bd2d 	b.w	8005f9c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 8005542:	4b61      	ldr	r3, [pc, #388]	; (80056c8 <LCD_Init+0x3560>)
 8005544:	889b      	ldrh	r3, [r3, #4]
 8005546:	f244 5231 	movw	r2, #17713	; 0x4531
 800554a:	4293      	cmp	r3, r2
 800554c:	f040 80be 	bne.w	80056cc <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8005550:	2101      	movs	r1, #1
 8005552:	2000      	movs	r0, #0
 8005554:	f7fb fb9e 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(10);
 8005558:	200a      	movs	r0, #10
 800555a:	f002 fd8f 	bl	800807c <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 800555e:	f241 6128 	movw	r1, #5672	; 0x1628
 8005562:	2010      	movs	r0, #16
 8005564:	f7fb fb96 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8005568:	210e      	movs	r1, #14
 800556a:	2012      	movs	r0, #18
 800556c:	f7fb fb92 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8005570:	f640 2139 	movw	r1, #2617	; 0xa39
 8005574:	2013      	movs	r0, #19
 8005576:	f7fb fb8d 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(10);
 800557a:	200a      	movs	r0, #10
 800557c:	f002 fd7e 	bl	800807c <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8005580:	2140      	movs	r1, #64	; 0x40
 8005582:	2011      	movs	r0, #17
 8005584:	f7fb fb86 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 8005588:	2150      	movs	r1, #80	; 0x50
 800558a:	2015      	movs	r0, #21
 800558c:	f7fb fb82 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(10);
 8005590:	200a      	movs	r0, #10
 8005592:	f002 fd73 	bl	800807c <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 8005596:	211e      	movs	r1, #30
 8005598:	2012      	movs	r0, #18
 800559a:	f7fb fb7b 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(10);
 800559e:	200a      	movs	r0, #10
 80055a0:	f002 fd6c 	bl	800807c <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 80055a4:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 80055a8:	2010      	movs	r0, #16
 80055aa:	f7fb fb73 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 80055ae:	f642 2139 	movw	r1, #10809	; 0x2a39
 80055b2:	2013      	movs	r0, #19
 80055b4:	f7fb fb6e 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(10);
 80055b8:	200a      	movs	r0, #10
 80055ba:	f002 fd5f 	bl	800807c <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 80055be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055c2:	2001      	movs	r0, #1
 80055c4:	f7fb fb66 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80055c8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80055cc:	2002      	movs	r0, #2
 80055ce:	f7fb fb61 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 80055d2:	f241 0138 	movw	r1, #4152	; 0x1038
 80055d6:	2003      	movs	r0, #3
 80055d8:	f7fb fb5c 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 80055dc:	f240 2102 	movw	r1, #514	; 0x202
 80055e0:	2008      	movs	r0, #8
 80055e2:	f7fb fb57 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 80055e6:	2108      	movs	r1, #8
 80055e8:	200a      	movs	r0, #10
 80055ea:	f7fb fb53 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 80055ee:	2100      	movs	r1, #0
 80055f0:	2030      	movs	r0, #48	; 0x30
 80055f2:	f7fb fb4f 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 80055f6:	f240 4102 	movw	r1, #1026	; 0x402
 80055fa:	2031      	movs	r0, #49	; 0x31
 80055fc:	f7fb fb4a 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 8005600:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005604:	2032      	movs	r0, #50	; 0x32
 8005606:	f7fb fb45 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 800560a:	f240 5103 	movw	r1, #1283	; 0x503
 800560e:	2033      	movs	r0, #51	; 0x33
 8005610:	f7fb fb40 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 8005614:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005618:	2034      	movs	r0, #52	; 0x34
 800561a:	f7fb fb3b 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 800561e:	f240 3101 	movw	r1, #769	; 0x301
 8005622:	2035      	movs	r0, #53	; 0x35
 8005624:	f7fb fb36 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005628:	f240 7107 	movw	r1, #1799	; 0x707
 800562c:	2036      	movs	r0, #54	; 0x36
 800562e:	f7fb fb31 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8005632:	f240 3105 	movw	r1, #773	; 0x305
 8005636:	2037      	movs	r0, #55	; 0x37
 8005638:	f7fb fb2c 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 800563c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005640:	2038      	movs	r0, #56	; 0x38
 8005642:	f7fb fb27 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 8005646:	f640 710b 	movw	r1, #3851	; 0xf0b
 800564a:	2039      	movs	r0, #57	; 0x39
 800564c:	f7fb fb22 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8005650:	2102      	movs	r1, #2
 8005652:	2041      	movs	r0, #65	; 0x41
 8005654:	f7fb fb1e 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8005658:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800565c:	2060      	movs	r0, #96	; 0x60
 800565e:	f7fb fb19 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8005662:	2101      	movs	r1, #1
 8005664:	2061      	movs	r0, #97	; 0x61
 8005666:	f7fb fb15 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 800566a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800566e:	2090      	movs	r0, #144	; 0x90
 8005670:	f7fb fb10 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 8005674:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005678:	2092      	movs	r0, #146	; 0x92
 800567a:	f7fb fb0b 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 800567e:	2104      	movs	r1, #4
 8005680:	2093      	movs	r0, #147	; 0x93
 8005682:	f7fb fb07 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 8005686:	f44f 7180 	mov.w	r1, #256	; 0x100
 800568a:	20a0      	movs	r0, #160	; 0xa0
 800568c:	f7fb fb02 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8005690:	2101      	movs	r1, #1
 8005692:	2007      	movs	r0, #7
 8005694:	f7fb fafe 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8005698:	2121      	movs	r1, #33	; 0x21
 800569a:	2007      	movs	r0, #7
 800569c:	f7fb fafa 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 80056a0:	2123      	movs	r1, #35	; 0x23
 80056a2:	2007      	movs	r0, #7
 80056a4:	f7fb faf6 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 80056a8:	2133      	movs	r1, #51	; 0x33
 80056aa:	2007      	movs	r0, #7
 80056ac:	f7fb faf2 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 80056b0:	f240 1133 	movw	r1, #307	; 0x133
 80056b4:	2007      	movs	r0, #7
 80056b6:	f7fb faed 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 80056ba:	2100      	movs	r1, #0
 80056bc:	20a0      	movs	r0, #160	; 0xa0
 80056be:	f7fb fae9 	bl	8000c94 <LCD_WriteReg>
 80056c2:	f000 bc6b 	b.w	8005f9c <LCD_Init+0x3e34>
 80056c6:	bf00      	nop
 80056c8:	200005d4 	.word	0x200005d4
	} else if (lcddev.id == 0x4535) {
 80056cc:	4b5b      	ldr	r3, [pc, #364]	; (800583c <LCD_Init+0x36d4>)
 80056ce:	889b      	ldrh	r3, [r3, #4]
 80056d0:	f244 5235 	movw	r2, #17717	; 0x4535
 80056d4:	4293      	cmp	r3, r2
 80056d6:	f040 80b3 	bne.w	8005840 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 80056da:	2130      	movs	r1, #48	; 0x30
 80056dc:	2015      	movs	r0, #21
 80056de:	f7fb fad9 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 80056e2:	2110      	movs	r1, #16
 80056e4:	209a      	movs	r0, #154	; 0x9a
 80056e6:	f7fb fad5 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 80056ea:	2120      	movs	r1, #32
 80056ec:	2011      	movs	r0, #17
 80056ee:	f7fb fad1 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 80056f2:	f243 4128 	movw	r1, #13352	; 0x3428
 80056f6:	2010      	movs	r0, #16
 80056f8:	f7fb facc 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 80056fc:	2102      	movs	r1, #2
 80056fe:	2012      	movs	r0, #18
 8005700:	f7fb fac8 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 8005704:	f241 0138 	movw	r1, #4152	; 0x1038
 8005708:	2013      	movs	r0, #19
 800570a:	f7fb fac3 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(40);
 800570e:	2028      	movs	r0, #40	; 0x28
 8005710:	f002 fcb4 	bl	800807c <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 8005714:	2112      	movs	r1, #18
 8005716:	2012      	movs	r0, #18
 8005718:	f7fb fabc 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(40);
 800571c:	2028      	movs	r0, #40	; 0x28
 800571e:	f002 fcad 	bl	800807c <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 8005722:	f243 4120 	movw	r1, #13344	; 0x3420
 8005726:	2010      	movs	r0, #16
 8005728:	f7fb fab4 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 800572c:	f243 0138 	movw	r1, #12344	; 0x3038
 8005730:	2013      	movs	r0, #19
 8005732:	f7fb faaf 	bl	8000c94 <LCD_WriteReg>
		HAL_Delay(70);
 8005736:	2046      	movs	r0, #70	; 0x46
 8005738:	f002 fca0 	bl	800807c <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 800573c:	2100      	movs	r1, #0
 800573e:	2030      	movs	r0, #48	; 0x30
 8005740:	f7fb faa8 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8005744:	f240 4102 	movw	r1, #1026	; 0x402
 8005748:	2031      	movs	r0, #49	; 0x31
 800574a:	f7fb faa3 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 800574e:	f240 3107 	movw	r1, #775	; 0x307
 8005752:	2032      	movs	r0, #50	; 0x32
 8005754:	f7fb fa9e 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 8005758:	f44f 7141 	mov.w	r1, #772	; 0x304
 800575c:	2033      	movs	r0, #51	; 0x33
 800575e:	f7fb fa99 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 8005762:	2104      	movs	r1, #4
 8005764:	2034      	movs	r0, #52	; 0x34
 8005766:	f7fb fa95 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 800576a:	f240 4101 	movw	r1, #1025	; 0x401
 800576e:	2035      	movs	r0, #53	; 0x35
 8005770:	f7fb fa90 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005774:	f240 7107 	movw	r1, #1799	; 0x707
 8005778:	2036      	movs	r0, #54	; 0x36
 800577a:	f7fb fa8b 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 800577e:	f240 3105 	movw	r1, #773	; 0x305
 8005782:	2037      	movs	r0, #55	; 0x37
 8005784:	f7fb fa86 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 8005788:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800578c:	2038      	movs	r0, #56	; 0x38
 800578e:	f7fb fa81 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 8005792:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005796:	2039      	movs	r0, #57	; 0x39
 8005798:	f7fb fa7c 	bl	8000c94 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 800579c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057a0:	2001      	movs	r0, #1
 80057a2:	f7fb fa77 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80057a6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80057aa:	2002      	movs	r0, #2
 80057ac:	f7fb fa72 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 80057b0:	f241 0130 	movw	r1, #4144	; 0x1030
 80057b4:	2003      	movs	r0, #3
 80057b6:	f7fb fa6d 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 80057ba:	f640 0108 	movw	r1, #2056	; 0x808
 80057be:	2008      	movs	r0, #8
 80057c0:	f7fb fa68 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 80057c4:	2108      	movs	r1, #8
 80057c6:	200a      	movs	r0, #10
 80057c8:	f7fb fa64 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 80057cc:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80057d0:	2060      	movs	r0, #96	; 0x60
 80057d2:	f7fb fa5f 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 80057d6:	2101      	movs	r1, #1
 80057d8:	2061      	movs	r0, #97	; 0x61
 80057da:	f7fb fa5b 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 80057de:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80057e2:	2090      	movs	r0, #144	; 0x90
 80057e4:	f7fb fa56 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 80057e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057ec:	2092      	movs	r0, #146	; 0x92
 80057ee:	f7fb fa51 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 80057f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057f6:	2093      	movs	r0, #147	; 0x93
 80057f8:	f7fb fa4c 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 80057fc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005800:	20a0      	movs	r0, #160	; 0xa0
 8005802:	f7fb fa47 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 8005806:	2110      	movs	r1, #16
 8005808:	20a3      	movs	r0, #163	; 0xa3
 800580a:	f7fb fa43 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 800580e:	2101      	movs	r1, #1
 8005810:	2007      	movs	r0, #7
 8005812:	f7fb fa3f 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8005816:	2121      	movs	r1, #33	; 0x21
 8005818:	2007      	movs	r0, #7
 800581a:	f7fb fa3b 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 800581e:	2123      	movs	r1, #35	; 0x23
 8005820:	2007      	movs	r0, #7
 8005822:	f7fb fa37 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8005826:	2133      	movs	r1, #51	; 0x33
 8005828:	2007      	movs	r0, #7
 800582a:	f7fb fa33 	bl	8000c94 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 800582e:	f240 1133 	movw	r1, #307	; 0x133
 8005832:	2007      	movs	r0, #7
 8005834:	f7fb fa2e 	bl	8000c94 <LCD_WriteReg>
 8005838:	e3b0      	b.n	8005f9c <LCD_Init+0x3e34>
 800583a:	bf00      	nop
 800583c:	200005d4 	.word	0x200005d4
	} else if (lcddev.id == 0X1963) {
 8005840:	4ba8      	ldr	r3, [pc, #672]	; (8005ae4 <LCD_Init+0x397c>)
 8005842:	889b      	ldrh	r3, [r3, #4]
 8005844:	f641 1263 	movw	r2, #6499	; 0x1963
 8005848:	4293      	cmp	r3, r2
 800584a:	f040 83a7 	bne.w	8005f9c <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 800584e:	20e2      	movs	r0, #226	; 0xe2
 8005850:	f7fb f994 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 8005854:	4ba4      	ldr	r3, [pc, #656]	; (8005ae8 <LCD_Init+0x3980>)
 8005856:	f44f 7280 	mov.w	r2, #256	; 0x100
 800585a:	611a      	str	r2, [r3, #16]
 800585c:	4ba2      	ldr	r3, [pc, #648]	; (8005ae8 <LCD_Init+0x3980>)
 800585e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005862:	615a      	str	r2, [r3, #20]
 8005864:	4ba1      	ldr	r3, [pc, #644]	; (8005aec <LCD_Init+0x3984>)
 8005866:	221d      	movs	r2, #29
 8005868:	60da      	str	r2, [r3, #12]
 800586a:	4b9f      	ldr	r3, [pc, #636]	; (8005ae8 <LCD_Init+0x3980>)
 800586c:	2280      	movs	r2, #128	; 0x80
 800586e:	615a      	str	r2, [r3, #20]
 8005870:	4b9d      	ldr	r3, [pc, #628]	; (8005ae8 <LCD_Init+0x3980>)
 8005872:	2280      	movs	r2, #128	; 0x80
 8005874:	611a      	str	r2, [r3, #16]
 8005876:	4b9c      	ldr	r3, [pc, #624]	; (8005ae8 <LCD_Init+0x3980>)
 8005878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800587c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 800587e:	4b9a      	ldr	r3, [pc, #616]	; (8005ae8 <LCD_Init+0x3980>)
 8005880:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005884:	611a      	str	r2, [r3, #16]
 8005886:	4b98      	ldr	r3, [pc, #608]	; (8005ae8 <LCD_Init+0x3980>)
 8005888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800588c:	615a      	str	r2, [r3, #20]
 800588e:	4b97      	ldr	r3, [pc, #604]	; (8005aec <LCD_Init+0x3984>)
 8005890:	2202      	movs	r2, #2
 8005892:	60da      	str	r2, [r3, #12]
 8005894:	4b94      	ldr	r3, [pc, #592]	; (8005ae8 <LCD_Init+0x3980>)
 8005896:	2280      	movs	r2, #128	; 0x80
 8005898:	615a      	str	r2, [r3, #20]
 800589a:	4b93      	ldr	r3, [pc, #588]	; (8005ae8 <LCD_Init+0x3980>)
 800589c:	2280      	movs	r2, #128	; 0x80
 800589e:	611a      	str	r2, [r3, #16]
 80058a0:	4b91      	ldr	r3, [pc, #580]	; (8005ae8 <LCD_Init+0x3980>)
 80058a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058a6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 80058a8:	4b8f      	ldr	r3, [pc, #572]	; (8005ae8 <LCD_Init+0x3980>)
 80058aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058ae:	611a      	str	r2, [r3, #16]
 80058b0:	4b8d      	ldr	r3, [pc, #564]	; (8005ae8 <LCD_Init+0x3980>)
 80058b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058b6:	615a      	str	r2, [r3, #20]
 80058b8:	4b8c      	ldr	r3, [pc, #560]	; (8005aec <LCD_Init+0x3984>)
 80058ba:	2204      	movs	r2, #4
 80058bc:	60da      	str	r2, [r3, #12]
 80058be:	4b8a      	ldr	r3, [pc, #552]	; (8005ae8 <LCD_Init+0x3980>)
 80058c0:	2280      	movs	r2, #128	; 0x80
 80058c2:	615a      	str	r2, [r3, #20]
 80058c4:	4b88      	ldr	r3, [pc, #544]	; (8005ae8 <LCD_Init+0x3980>)
 80058c6:	2280      	movs	r2, #128	; 0x80
 80058c8:	611a      	str	r2, [r3, #16]
 80058ca:	4b87      	ldr	r3, [pc, #540]	; (8005ae8 <LCD_Init+0x3980>)
 80058cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058d0:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 80058d2:	2001      	movs	r0, #1
 80058d4:	f002 fbd2 	bl	800807c <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 80058d8:	20e0      	movs	r0, #224	; 0xe0
 80058da:	f7fb f94f 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 80058de:	4b82      	ldr	r3, [pc, #520]	; (8005ae8 <LCD_Init+0x3980>)
 80058e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058e4:	611a      	str	r2, [r3, #16]
 80058e6:	4b80      	ldr	r3, [pc, #512]	; (8005ae8 <LCD_Init+0x3980>)
 80058e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058ec:	615a      	str	r2, [r3, #20]
 80058ee:	4b7f      	ldr	r3, [pc, #508]	; (8005aec <LCD_Init+0x3984>)
 80058f0:	2201      	movs	r2, #1
 80058f2:	60da      	str	r2, [r3, #12]
 80058f4:	4b7c      	ldr	r3, [pc, #496]	; (8005ae8 <LCD_Init+0x3980>)
 80058f6:	2280      	movs	r2, #128	; 0x80
 80058f8:	615a      	str	r2, [r3, #20]
 80058fa:	4b7b      	ldr	r3, [pc, #492]	; (8005ae8 <LCD_Init+0x3980>)
 80058fc:	2280      	movs	r2, #128	; 0x80
 80058fe:	611a      	str	r2, [r3, #16]
 8005900:	4b79      	ldr	r3, [pc, #484]	; (8005ae8 <LCD_Init+0x3980>)
 8005902:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005906:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 8005908:	200a      	movs	r0, #10
 800590a:	f002 fbb7 	bl	800807c <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 800590e:	20e0      	movs	r0, #224	; 0xe0
 8005910:	f7fb f934 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 8005914:	4b74      	ldr	r3, [pc, #464]	; (8005ae8 <LCD_Init+0x3980>)
 8005916:	f44f 7280 	mov.w	r2, #256	; 0x100
 800591a:	611a      	str	r2, [r3, #16]
 800591c:	4b72      	ldr	r3, [pc, #456]	; (8005ae8 <LCD_Init+0x3980>)
 800591e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005922:	615a      	str	r2, [r3, #20]
 8005924:	4b71      	ldr	r3, [pc, #452]	; (8005aec <LCD_Init+0x3984>)
 8005926:	2203      	movs	r2, #3
 8005928:	60da      	str	r2, [r3, #12]
 800592a:	4b6f      	ldr	r3, [pc, #444]	; (8005ae8 <LCD_Init+0x3980>)
 800592c:	2280      	movs	r2, #128	; 0x80
 800592e:	615a      	str	r2, [r3, #20]
 8005930:	4b6d      	ldr	r3, [pc, #436]	; (8005ae8 <LCD_Init+0x3980>)
 8005932:	2280      	movs	r2, #128	; 0x80
 8005934:	611a      	str	r2, [r3, #16]
 8005936:	4b6c      	ldr	r3, [pc, #432]	; (8005ae8 <LCD_Init+0x3980>)
 8005938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800593c:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 800593e:	200c      	movs	r0, #12
 8005940:	f002 fb9c 	bl	800807c <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8005944:	2001      	movs	r0, #1
 8005946:	f7fb f919 	bl	8000b7c <LCD_WR_REG>
		HAL_Delay(10);
 800594a:	200a      	movs	r0, #10
 800594c:	f002 fb96 	bl	800807c <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8005950:	20e6      	movs	r0, #230	; 0xe6
 8005952:	f7fb f913 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 8005956:	4b64      	ldr	r3, [pc, #400]	; (8005ae8 <LCD_Init+0x3980>)
 8005958:	f44f 7280 	mov.w	r2, #256	; 0x100
 800595c:	611a      	str	r2, [r3, #16]
 800595e:	4b62      	ldr	r3, [pc, #392]	; (8005ae8 <LCD_Init+0x3980>)
 8005960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005964:	615a      	str	r2, [r3, #20]
 8005966:	4b61      	ldr	r3, [pc, #388]	; (8005aec <LCD_Init+0x3984>)
 8005968:	222f      	movs	r2, #47	; 0x2f
 800596a:	60da      	str	r2, [r3, #12]
 800596c:	4b5e      	ldr	r3, [pc, #376]	; (8005ae8 <LCD_Init+0x3980>)
 800596e:	2280      	movs	r2, #128	; 0x80
 8005970:	615a      	str	r2, [r3, #20]
 8005972:	4b5d      	ldr	r3, [pc, #372]	; (8005ae8 <LCD_Init+0x3980>)
 8005974:	2280      	movs	r2, #128	; 0x80
 8005976:	611a      	str	r2, [r3, #16]
 8005978:	4b5b      	ldr	r3, [pc, #364]	; (8005ae8 <LCD_Init+0x3980>)
 800597a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800597e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005980:	4b59      	ldr	r3, [pc, #356]	; (8005ae8 <LCD_Init+0x3980>)
 8005982:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005986:	611a      	str	r2, [r3, #16]
 8005988:	4b57      	ldr	r3, [pc, #348]	; (8005ae8 <LCD_Init+0x3980>)
 800598a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800598e:	615a      	str	r2, [r3, #20]
 8005990:	4b56      	ldr	r3, [pc, #344]	; (8005aec <LCD_Init+0x3984>)
 8005992:	22ff      	movs	r2, #255	; 0xff
 8005994:	60da      	str	r2, [r3, #12]
 8005996:	4b54      	ldr	r3, [pc, #336]	; (8005ae8 <LCD_Init+0x3980>)
 8005998:	2280      	movs	r2, #128	; 0x80
 800599a:	615a      	str	r2, [r3, #20]
 800599c:	4b52      	ldr	r3, [pc, #328]	; (8005ae8 <LCD_Init+0x3980>)
 800599e:	2280      	movs	r2, #128	; 0x80
 80059a0:	611a      	str	r2, [r3, #16]
 80059a2:	4b51      	ldr	r3, [pc, #324]	; (8005ae8 <LCD_Init+0x3980>)
 80059a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059a8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 80059aa:	4b4f      	ldr	r3, [pc, #316]	; (8005ae8 <LCD_Init+0x3980>)
 80059ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059b0:	611a      	str	r2, [r3, #16]
 80059b2:	4b4d      	ldr	r3, [pc, #308]	; (8005ae8 <LCD_Init+0x3980>)
 80059b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059b8:	615a      	str	r2, [r3, #20]
 80059ba:	4b4c      	ldr	r3, [pc, #304]	; (8005aec <LCD_Init+0x3984>)
 80059bc:	22ff      	movs	r2, #255	; 0xff
 80059be:	60da      	str	r2, [r3, #12]
 80059c0:	4b49      	ldr	r3, [pc, #292]	; (8005ae8 <LCD_Init+0x3980>)
 80059c2:	2280      	movs	r2, #128	; 0x80
 80059c4:	615a      	str	r2, [r3, #20]
 80059c6:	4b48      	ldr	r3, [pc, #288]	; (8005ae8 <LCD_Init+0x3980>)
 80059c8:	2280      	movs	r2, #128	; 0x80
 80059ca:	611a      	str	r2, [r3, #16]
 80059cc:	4b46      	ldr	r3, [pc, #280]	; (8005ae8 <LCD_Init+0x3980>)
 80059ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059d2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 80059d4:	20b0      	movs	r0, #176	; 0xb0
 80059d6:	f7fb f8d1 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 80059da:	4b43      	ldr	r3, [pc, #268]	; (8005ae8 <LCD_Init+0x3980>)
 80059dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059e0:	611a      	str	r2, [r3, #16]
 80059e2:	4b41      	ldr	r3, [pc, #260]	; (8005ae8 <LCD_Init+0x3980>)
 80059e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059e8:	615a      	str	r2, [r3, #20]
 80059ea:	4b40      	ldr	r3, [pc, #256]	; (8005aec <LCD_Init+0x3984>)
 80059ec:	2220      	movs	r2, #32
 80059ee:	60da      	str	r2, [r3, #12]
 80059f0:	4b3d      	ldr	r3, [pc, #244]	; (8005ae8 <LCD_Init+0x3980>)
 80059f2:	2280      	movs	r2, #128	; 0x80
 80059f4:	615a      	str	r2, [r3, #20]
 80059f6:	4b3c      	ldr	r3, [pc, #240]	; (8005ae8 <LCD_Init+0x3980>)
 80059f8:	2280      	movs	r2, #128	; 0x80
 80059fa:	611a      	str	r2, [r3, #16]
 80059fc:	4b3a      	ldr	r3, [pc, #232]	; (8005ae8 <LCD_Init+0x3980>)
 80059fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a02:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 8005a04:	4b38      	ldr	r3, [pc, #224]	; (8005ae8 <LCD_Init+0x3980>)
 8005a06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a0a:	611a      	str	r2, [r3, #16]
 8005a0c:	4b36      	ldr	r3, [pc, #216]	; (8005ae8 <LCD_Init+0x3980>)
 8005a0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a12:	615a      	str	r2, [r3, #20]
 8005a14:	4b35      	ldr	r3, [pc, #212]	; (8005aec <LCD_Init+0x3984>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	60da      	str	r2, [r3, #12]
 8005a1a:	4b33      	ldr	r3, [pc, #204]	; (8005ae8 <LCD_Init+0x3980>)
 8005a1c:	2280      	movs	r2, #128	; 0x80
 8005a1e:	615a      	str	r2, [r3, #20]
 8005a20:	4b31      	ldr	r3, [pc, #196]	; (8005ae8 <LCD_Init+0x3980>)
 8005a22:	2280      	movs	r2, #128	; 0x80
 8005a24:	611a      	str	r2, [r3, #16]
 8005a26:	4b30      	ldr	r3, [pc, #192]	; (8005ae8 <LCD_Init+0x3980>)
 8005a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a2c:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 8005a2e:	4b2e      	ldr	r3, [pc, #184]	; (8005ae8 <LCD_Init+0x3980>)
 8005a30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a34:	611a      	str	r2, [r3, #16]
 8005a36:	4b2c      	ldr	r3, [pc, #176]	; (8005ae8 <LCD_Init+0x3980>)
 8005a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a3c:	615a      	str	r2, [r3, #20]
 8005a3e:	4b2b      	ldr	r3, [pc, #172]	; (8005aec <LCD_Init+0x3984>)
 8005a40:	2203      	movs	r2, #3
 8005a42:	60da      	str	r2, [r3, #12]
 8005a44:	4b28      	ldr	r3, [pc, #160]	; (8005ae8 <LCD_Init+0x3980>)
 8005a46:	2280      	movs	r2, #128	; 0x80
 8005a48:	615a      	str	r2, [r3, #20]
 8005a4a:	4b27      	ldr	r3, [pc, #156]	; (8005ae8 <LCD_Init+0x3980>)
 8005a4c:	2280      	movs	r2, #128	; 0x80
 8005a4e:	611a      	str	r2, [r3, #16]
 8005a50:	4b25      	ldr	r3, [pc, #148]	; (8005ae8 <LCD_Init+0x3980>)
 8005a52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a56:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8005a58:	4b23      	ldr	r3, [pc, #140]	; (8005ae8 <LCD_Init+0x3980>)
 8005a5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a5e:	611a      	str	r2, [r3, #16]
 8005a60:	4b21      	ldr	r3, [pc, #132]	; (8005ae8 <LCD_Init+0x3980>)
 8005a62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a66:	615a      	str	r2, [r3, #20]
 8005a68:	4b20      	ldr	r3, [pc, #128]	; (8005aec <LCD_Init+0x3984>)
 8005a6a:	f240 321f 	movw	r2, #799	; 0x31f
 8005a6e:	60da      	str	r2, [r3, #12]
 8005a70:	4b1d      	ldr	r3, [pc, #116]	; (8005ae8 <LCD_Init+0x3980>)
 8005a72:	2280      	movs	r2, #128	; 0x80
 8005a74:	615a      	str	r2, [r3, #20]
 8005a76:	4b1c      	ldr	r3, [pc, #112]	; (8005ae8 <LCD_Init+0x3980>)
 8005a78:	2280      	movs	r2, #128	; 0x80
 8005a7a:	611a      	str	r2, [r3, #16]
 8005a7c:	4b1a      	ldr	r3, [pc, #104]	; (8005ae8 <LCD_Init+0x3980>)
 8005a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a82:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 8005a84:	4b18      	ldr	r3, [pc, #96]	; (8005ae8 <LCD_Init+0x3980>)
 8005a86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a8a:	611a      	str	r2, [r3, #16]
 8005a8c:	4b16      	ldr	r3, [pc, #88]	; (8005ae8 <LCD_Init+0x3980>)
 8005a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a92:	615a      	str	r2, [r3, #20]
 8005a94:	4b15      	ldr	r3, [pc, #84]	; (8005aec <LCD_Init+0x3984>)
 8005a96:	2201      	movs	r2, #1
 8005a98:	60da      	str	r2, [r3, #12]
 8005a9a:	4b13      	ldr	r3, [pc, #76]	; (8005ae8 <LCD_Init+0x3980>)
 8005a9c:	2280      	movs	r2, #128	; 0x80
 8005a9e:	615a      	str	r2, [r3, #20]
 8005aa0:	4b11      	ldr	r3, [pc, #68]	; (8005ae8 <LCD_Init+0x3980>)
 8005aa2:	2280      	movs	r2, #128	; 0x80
 8005aa4:	611a      	str	r2, [r3, #16]
 8005aa6:	4b10      	ldr	r3, [pc, #64]	; (8005ae8 <LCD_Init+0x3980>)
 8005aa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aac:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8005aae:	4b0e      	ldr	r3, [pc, #56]	; (8005ae8 <LCD_Init+0x3980>)
 8005ab0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ab4:	611a      	str	r2, [r3, #16]
 8005ab6:	4b0c      	ldr	r3, [pc, #48]	; (8005ae8 <LCD_Init+0x3980>)
 8005ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005abc:	615a      	str	r2, [r3, #20]
 8005abe:	4b0b      	ldr	r3, [pc, #44]	; (8005aec <LCD_Init+0x3984>)
 8005ac0:	f240 12df 	movw	r2, #479	; 0x1df
 8005ac4:	60da      	str	r2, [r3, #12]
 8005ac6:	4b08      	ldr	r3, [pc, #32]	; (8005ae8 <LCD_Init+0x3980>)
 8005ac8:	2280      	movs	r2, #128	; 0x80
 8005aca:	615a      	str	r2, [r3, #20]
 8005acc:	4b06      	ldr	r3, [pc, #24]	; (8005ae8 <LCD_Init+0x3980>)
 8005ace:	2280      	movs	r2, #128	; 0x80
 8005ad0:	611a      	str	r2, [r3, #16]
 8005ad2:	4b05      	ldr	r3, [pc, #20]	; (8005ae8 <LCD_Init+0x3980>)
 8005ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ad8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 8005ada:	4b03      	ldr	r3, [pc, #12]	; (8005ae8 <LCD_Init+0x3980>)
 8005adc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ae0:	e006      	b.n	8005af0 <LCD_Init+0x3988>
 8005ae2:	bf00      	nop
 8005ae4:	200005d4 	.word	0x200005d4
 8005ae8:	40011000 	.word	0x40011000
 8005aec:	40010c00 	.word	0x40010c00
 8005af0:	611a      	str	r2, [r3, #16]
 8005af2:	4ba3      	ldr	r3, [pc, #652]	; (8005d80 <LCD_Init+0x3c18>)
 8005af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005af8:	615a      	str	r2, [r3, #20]
 8005afa:	4ba2      	ldr	r3, [pc, #648]	; (8005d84 <LCD_Init+0x3c1c>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	60da      	str	r2, [r3, #12]
 8005b00:	4b9f      	ldr	r3, [pc, #636]	; (8005d80 <LCD_Init+0x3c18>)
 8005b02:	2280      	movs	r2, #128	; 0x80
 8005b04:	615a      	str	r2, [r3, #20]
 8005b06:	4b9e      	ldr	r3, [pc, #632]	; (8005d80 <LCD_Init+0x3c18>)
 8005b08:	2280      	movs	r2, #128	; 0x80
 8005b0a:	611a      	str	r2, [r3, #16]
 8005b0c:	4b9c      	ldr	r3, [pc, #624]	; (8005d80 <LCD_Init+0x3c18>)
 8005b0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b12:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 8005b14:	20b4      	movs	r0, #180	; 0xb4
 8005b16:	f7fb f831 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8005b1a:	4b99      	ldr	r3, [pc, #612]	; (8005d80 <LCD_Init+0x3c18>)
 8005b1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b20:	611a      	str	r2, [r3, #16]
 8005b22:	4b97      	ldr	r3, [pc, #604]	; (8005d80 <LCD_Init+0x3c18>)
 8005b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b28:	615a      	str	r2, [r3, #20]
 8005b2a:	4b96      	ldr	r3, [pc, #600]	; (8005d84 <LCD_Init+0x3c1c>)
 8005b2c:	2204      	movs	r2, #4
 8005b2e:	60da      	str	r2, [r3, #12]
 8005b30:	4b93      	ldr	r3, [pc, #588]	; (8005d80 <LCD_Init+0x3c18>)
 8005b32:	2280      	movs	r2, #128	; 0x80
 8005b34:	615a      	str	r2, [r3, #20]
 8005b36:	4b92      	ldr	r3, [pc, #584]	; (8005d80 <LCD_Init+0x3c18>)
 8005b38:	2280      	movs	r2, #128	; 0x80
 8005b3a:	611a      	str	r2, [r3, #16]
 8005b3c:	4b90      	ldr	r3, [pc, #576]	; (8005d80 <LCD_Init+0x3c18>)
 8005b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b42:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 8005b44:	4b8e      	ldr	r3, [pc, #568]	; (8005d80 <LCD_Init+0x3c18>)
 8005b46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b4a:	611a      	str	r2, [r3, #16]
 8005b4c:	4b8c      	ldr	r3, [pc, #560]	; (8005d80 <LCD_Init+0x3c18>)
 8005b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b52:	615a      	str	r2, [r3, #20]
 8005b54:	4b8b      	ldr	r3, [pc, #556]	; (8005d84 <LCD_Init+0x3c1c>)
 8005b56:	f240 421f 	movw	r2, #1055	; 0x41f
 8005b5a:	60da      	str	r2, [r3, #12]
 8005b5c:	4b88      	ldr	r3, [pc, #544]	; (8005d80 <LCD_Init+0x3c18>)
 8005b5e:	2280      	movs	r2, #128	; 0x80
 8005b60:	615a      	str	r2, [r3, #20]
 8005b62:	4b87      	ldr	r3, [pc, #540]	; (8005d80 <LCD_Init+0x3c18>)
 8005b64:	2280      	movs	r2, #128	; 0x80
 8005b66:	611a      	str	r2, [r3, #16]
 8005b68:	4b85      	ldr	r3, [pc, #532]	; (8005d80 <LCD_Init+0x3c18>)
 8005b6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b6e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 8005b70:	4b83      	ldr	r3, [pc, #524]	; (8005d80 <LCD_Init+0x3c18>)
 8005b72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b76:	611a      	str	r2, [r3, #16]
 8005b78:	4b81      	ldr	r3, [pc, #516]	; (8005d80 <LCD_Init+0x3c18>)
 8005b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b7e:	615a      	str	r2, [r3, #20]
 8005b80:	4b80      	ldr	r3, [pc, #512]	; (8005d84 <LCD_Init+0x3c1c>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	60da      	str	r2, [r3, #12]
 8005b86:	4b7e      	ldr	r3, [pc, #504]	; (8005d80 <LCD_Init+0x3c18>)
 8005b88:	2280      	movs	r2, #128	; 0x80
 8005b8a:	615a      	str	r2, [r3, #20]
 8005b8c:	4b7c      	ldr	r3, [pc, #496]	; (8005d80 <LCD_Init+0x3c18>)
 8005b8e:	2280      	movs	r2, #128	; 0x80
 8005b90:	611a      	str	r2, [r3, #16]
 8005b92:	4b7b      	ldr	r3, [pc, #492]	; (8005d80 <LCD_Init+0x3c18>)
 8005b94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b98:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 8005b9a:	4b79      	ldr	r3, [pc, #484]	; (8005d80 <LCD_Init+0x3c18>)
 8005b9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ba0:	611a      	str	r2, [r3, #16]
 8005ba2:	4b77      	ldr	r3, [pc, #476]	; (8005d80 <LCD_Init+0x3c18>)
 8005ba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ba8:	615a      	str	r2, [r3, #20]
 8005baa:	4b76      	ldr	r3, [pc, #472]	; (8005d84 <LCD_Init+0x3c1c>)
 8005bac:	222e      	movs	r2, #46	; 0x2e
 8005bae:	60da      	str	r2, [r3, #12]
 8005bb0:	4b73      	ldr	r3, [pc, #460]	; (8005d80 <LCD_Init+0x3c18>)
 8005bb2:	2280      	movs	r2, #128	; 0x80
 8005bb4:	615a      	str	r2, [r3, #20]
 8005bb6:	4b72      	ldr	r3, [pc, #456]	; (8005d80 <LCD_Init+0x3c18>)
 8005bb8:	2280      	movs	r2, #128	; 0x80
 8005bba:	611a      	str	r2, [r3, #16]
 8005bbc:	4b70      	ldr	r3, [pc, #448]	; (8005d80 <LCD_Init+0x3c18>)
 8005bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bc2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8005bc4:	4b6e      	ldr	r3, [pc, #440]	; (8005d80 <LCD_Init+0x3c18>)
 8005bc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bca:	611a      	str	r2, [r3, #16]
 8005bcc:	4b6c      	ldr	r3, [pc, #432]	; (8005d80 <LCD_Init+0x3c18>)
 8005bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bd2:	615a      	str	r2, [r3, #20]
 8005bd4:	4b6b      	ldr	r3, [pc, #428]	; (8005d84 <LCD_Init+0x3c1c>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	60da      	str	r2, [r3, #12]
 8005bda:	4b69      	ldr	r3, [pc, #420]	; (8005d80 <LCD_Init+0x3c18>)
 8005bdc:	2280      	movs	r2, #128	; 0x80
 8005bde:	615a      	str	r2, [r3, #20]
 8005be0:	4b67      	ldr	r3, [pc, #412]	; (8005d80 <LCD_Init+0x3c18>)
 8005be2:	2280      	movs	r2, #128	; 0x80
 8005be4:	611a      	str	r2, [r3, #16]
 8005be6:	4b66      	ldr	r3, [pc, #408]	; (8005d80 <LCD_Init+0x3c18>)
 8005be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bec:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005bee:	4b64      	ldr	r3, [pc, #400]	; (8005d80 <LCD_Init+0x3c18>)
 8005bf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bf4:	611a      	str	r2, [r3, #16]
 8005bf6:	4b62      	ldr	r3, [pc, #392]	; (8005d80 <LCD_Init+0x3c18>)
 8005bf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bfc:	615a      	str	r2, [r3, #20]
 8005bfe:	4b61      	ldr	r3, [pc, #388]	; (8005d84 <LCD_Init+0x3c1c>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	60da      	str	r2, [r3, #12]
 8005c04:	4b5e      	ldr	r3, [pc, #376]	; (8005d80 <LCD_Init+0x3c18>)
 8005c06:	2280      	movs	r2, #128	; 0x80
 8005c08:	615a      	str	r2, [r3, #20]
 8005c0a:	4b5d      	ldr	r3, [pc, #372]	; (8005d80 <LCD_Init+0x3c18>)
 8005c0c:	2280      	movs	r2, #128	; 0x80
 8005c0e:	611a      	str	r2, [r3, #16]
 8005c10:	4b5b      	ldr	r3, [pc, #364]	; (8005d80 <LCD_Init+0x3c18>)
 8005c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c16:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005c18:	4b59      	ldr	r3, [pc, #356]	; (8005d80 <LCD_Init+0x3c18>)
 8005c1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c1e:	611a      	str	r2, [r3, #16]
 8005c20:	4b57      	ldr	r3, [pc, #348]	; (8005d80 <LCD_Init+0x3c18>)
 8005c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c26:	615a      	str	r2, [r3, #20]
 8005c28:	4b56      	ldr	r3, [pc, #344]	; (8005d84 <LCD_Init+0x3c1c>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	60da      	str	r2, [r3, #12]
 8005c2e:	4b54      	ldr	r3, [pc, #336]	; (8005d80 <LCD_Init+0x3c18>)
 8005c30:	2280      	movs	r2, #128	; 0x80
 8005c32:	615a      	str	r2, [r3, #20]
 8005c34:	4b52      	ldr	r3, [pc, #328]	; (8005d80 <LCD_Init+0x3c18>)
 8005c36:	2280      	movs	r2, #128	; 0x80
 8005c38:	611a      	str	r2, [r3, #16]
 8005c3a:	4b51      	ldr	r3, [pc, #324]	; (8005d80 <LCD_Init+0x3c18>)
 8005c3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c40:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005c42:	4b4f      	ldr	r3, [pc, #316]	; (8005d80 <LCD_Init+0x3c18>)
 8005c44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c48:	611a      	str	r2, [r3, #16]
 8005c4a:	4b4d      	ldr	r3, [pc, #308]	; (8005d80 <LCD_Init+0x3c18>)
 8005c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c50:	615a      	str	r2, [r3, #20]
 8005c52:	4b4c      	ldr	r3, [pc, #304]	; (8005d84 <LCD_Init+0x3c1c>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	60da      	str	r2, [r3, #12]
 8005c58:	4b49      	ldr	r3, [pc, #292]	; (8005d80 <LCD_Init+0x3c18>)
 8005c5a:	2280      	movs	r2, #128	; 0x80
 8005c5c:	615a      	str	r2, [r3, #20]
 8005c5e:	4b48      	ldr	r3, [pc, #288]	; (8005d80 <LCD_Init+0x3c18>)
 8005c60:	2280      	movs	r2, #128	; 0x80
 8005c62:	611a      	str	r2, [r3, #16]
 8005c64:	4b46      	ldr	r3, [pc, #280]	; (8005d80 <LCD_Init+0x3c18>)
 8005c66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c6a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 8005c6c:	20b6      	movs	r0, #182	; 0xb6
 8005c6e:	f7fa ff85 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8005c72:	4b43      	ldr	r3, [pc, #268]	; (8005d80 <LCD_Init+0x3c18>)
 8005c74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c78:	611a      	str	r2, [r3, #16]
 8005c7a:	4b41      	ldr	r3, [pc, #260]	; (8005d80 <LCD_Init+0x3c18>)
 8005c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c80:	615a      	str	r2, [r3, #20]
 8005c82:	4b40      	ldr	r3, [pc, #256]	; (8005d84 <LCD_Init+0x3c1c>)
 8005c84:	2202      	movs	r2, #2
 8005c86:	60da      	str	r2, [r3, #12]
 8005c88:	4b3d      	ldr	r3, [pc, #244]	; (8005d80 <LCD_Init+0x3c18>)
 8005c8a:	2280      	movs	r2, #128	; 0x80
 8005c8c:	615a      	str	r2, [r3, #20]
 8005c8e:	4b3c      	ldr	r3, [pc, #240]	; (8005d80 <LCD_Init+0x3c18>)
 8005c90:	2280      	movs	r2, #128	; 0x80
 8005c92:	611a      	str	r2, [r3, #16]
 8005c94:	4b3a      	ldr	r3, [pc, #232]	; (8005d80 <LCD_Init+0x3c18>)
 8005c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c9a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 8005c9c:	4b38      	ldr	r3, [pc, #224]	; (8005d80 <LCD_Init+0x3c18>)
 8005c9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ca2:	611a      	str	r2, [r3, #16]
 8005ca4:	4b36      	ldr	r3, [pc, #216]	; (8005d80 <LCD_Init+0x3c18>)
 8005ca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005caa:	615a      	str	r2, [r3, #20]
 8005cac:	4b35      	ldr	r3, [pc, #212]	; (8005d84 <LCD_Init+0x3c1c>)
 8005cae:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8005cb2:	60da      	str	r2, [r3, #12]
 8005cb4:	4b32      	ldr	r3, [pc, #200]	; (8005d80 <LCD_Init+0x3c18>)
 8005cb6:	2280      	movs	r2, #128	; 0x80
 8005cb8:	615a      	str	r2, [r3, #20]
 8005cba:	4b31      	ldr	r3, [pc, #196]	; (8005d80 <LCD_Init+0x3c18>)
 8005cbc:	2280      	movs	r2, #128	; 0x80
 8005cbe:	611a      	str	r2, [r3, #16]
 8005cc0:	4b2f      	ldr	r3, [pc, #188]	; (8005d80 <LCD_Init+0x3c18>)
 8005cc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cc6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8005cc8:	4b2d      	ldr	r3, [pc, #180]	; (8005d80 <LCD_Init+0x3c18>)
 8005cca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cce:	611a      	str	r2, [r3, #16]
 8005cd0:	4b2b      	ldr	r3, [pc, #172]	; (8005d80 <LCD_Init+0x3c18>)
 8005cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cd6:	615a      	str	r2, [r3, #20]
 8005cd8:	4b2a      	ldr	r3, [pc, #168]	; (8005d84 <LCD_Init+0x3c1c>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	60da      	str	r2, [r3, #12]
 8005cde:	4b28      	ldr	r3, [pc, #160]	; (8005d80 <LCD_Init+0x3c18>)
 8005ce0:	2280      	movs	r2, #128	; 0x80
 8005ce2:	615a      	str	r2, [r3, #20]
 8005ce4:	4b26      	ldr	r3, [pc, #152]	; (8005d80 <LCD_Init+0x3c18>)
 8005ce6:	2280      	movs	r2, #128	; 0x80
 8005ce8:	611a      	str	r2, [r3, #16]
 8005cea:	4b25      	ldr	r3, [pc, #148]	; (8005d80 <LCD_Init+0x3c18>)
 8005cec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cf0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 8005cf2:	4b23      	ldr	r3, [pc, #140]	; (8005d80 <LCD_Init+0x3c18>)
 8005cf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cf8:	611a      	str	r2, [r3, #16]
 8005cfa:	4b21      	ldr	r3, [pc, #132]	; (8005d80 <LCD_Init+0x3c18>)
 8005cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d00:	615a      	str	r2, [r3, #20]
 8005d02:	4b20      	ldr	r3, [pc, #128]	; (8005d84 <LCD_Init+0x3c1c>)
 8005d04:	2217      	movs	r2, #23
 8005d06:	60da      	str	r2, [r3, #12]
 8005d08:	4b1d      	ldr	r3, [pc, #116]	; (8005d80 <LCD_Init+0x3c18>)
 8005d0a:	2280      	movs	r2, #128	; 0x80
 8005d0c:	615a      	str	r2, [r3, #20]
 8005d0e:	4b1c      	ldr	r3, [pc, #112]	; (8005d80 <LCD_Init+0x3c18>)
 8005d10:	2280      	movs	r2, #128	; 0x80
 8005d12:	611a      	str	r2, [r3, #16]
 8005d14:	4b1a      	ldr	r3, [pc, #104]	; (8005d80 <LCD_Init+0x3c18>)
 8005d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d1a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8005d1c:	4b18      	ldr	r3, [pc, #96]	; (8005d80 <LCD_Init+0x3c18>)
 8005d1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d22:	611a      	str	r2, [r3, #16]
 8005d24:	4b16      	ldr	r3, [pc, #88]	; (8005d80 <LCD_Init+0x3c18>)
 8005d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d2a:	615a      	str	r2, [r3, #20]
 8005d2c:	4b15      	ldr	r3, [pc, #84]	; (8005d84 <LCD_Init+0x3c1c>)
 8005d2e:	2215      	movs	r2, #21
 8005d30:	60da      	str	r2, [r3, #12]
 8005d32:	4b13      	ldr	r3, [pc, #76]	; (8005d80 <LCD_Init+0x3c18>)
 8005d34:	2280      	movs	r2, #128	; 0x80
 8005d36:	615a      	str	r2, [r3, #20]
 8005d38:	4b11      	ldr	r3, [pc, #68]	; (8005d80 <LCD_Init+0x3c18>)
 8005d3a:	2280      	movs	r2, #128	; 0x80
 8005d3c:	611a      	str	r2, [r3, #16]
 8005d3e:	4b10      	ldr	r3, [pc, #64]	; (8005d80 <LCD_Init+0x3c18>)
 8005d40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d44:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005d46:	4b0e      	ldr	r3, [pc, #56]	; (8005d80 <LCD_Init+0x3c18>)
 8005d48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d4c:	611a      	str	r2, [r3, #16]
 8005d4e:	4b0c      	ldr	r3, [pc, #48]	; (8005d80 <LCD_Init+0x3c18>)
 8005d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d54:	615a      	str	r2, [r3, #20]
 8005d56:	4b0b      	ldr	r3, [pc, #44]	; (8005d84 <LCD_Init+0x3c1c>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	60da      	str	r2, [r3, #12]
 8005d5c:	4b08      	ldr	r3, [pc, #32]	; (8005d80 <LCD_Init+0x3c18>)
 8005d5e:	2280      	movs	r2, #128	; 0x80
 8005d60:	615a      	str	r2, [r3, #20]
 8005d62:	4b07      	ldr	r3, [pc, #28]	; (8005d80 <LCD_Init+0x3c18>)
 8005d64:	2280      	movs	r2, #128	; 0x80
 8005d66:	611a      	str	r2, [r3, #16]
 8005d68:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <LCD_Init+0x3c18>)
 8005d6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d6e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005d70:	4b03      	ldr	r3, [pc, #12]	; (8005d80 <LCD_Init+0x3c18>)
 8005d72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d76:	611a      	str	r2, [r3, #16]
 8005d78:	4b01      	ldr	r3, [pc, #4]	; (8005d80 <LCD_Init+0x3c18>)
 8005d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d7e:	e003      	b.n	8005d88 <LCD_Init+0x3c20>
 8005d80:	40011000 	.word	0x40011000
 8005d84:	40010c00 	.word	0x40010c00
 8005d88:	615a      	str	r2, [r3, #20]
 8005d8a:	4b8b      	ldr	r3, [pc, #556]	; (8005fb8 <LCD_Init+0x3e50>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	60da      	str	r2, [r3, #12]
 8005d90:	4b8a      	ldr	r3, [pc, #552]	; (8005fbc <LCD_Init+0x3e54>)
 8005d92:	2280      	movs	r2, #128	; 0x80
 8005d94:	615a      	str	r2, [r3, #20]
 8005d96:	4b89      	ldr	r3, [pc, #548]	; (8005fbc <LCD_Init+0x3e54>)
 8005d98:	2280      	movs	r2, #128	; 0x80
 8005d9a:	611a      	str	r2, [r3, #16]
 8005d9c:	4b87      	ldr	r3, [pc, #540]	; (8005fbc <LCD_Init+0x3e54>)
 8005d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005da2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 8005da4:	20f0      	movs	r0, #240	; 0xf0
 8005da6:	f7fa fee9 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 8005daa:	4b84      	ldr	r3, [pc, #528]	; (8005fbc <LCD_Init+0x3e54>)
 8005dac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005db0:	611a      	str	r2, [r3, #16]
 8005db2:	4b82      	ldr	r3, [pc, #520]	; (8005fbc <LCD_Init+0x3e54>)
 8005db4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005db8:	615a      	str	r2, [r3, #20]
 8005dba:	4b7f      	ldr	r3, [pc, #508]	; (8005fb8 <LCD_Init+0x3e50>)
 8005dbc:	2203      	movs	r2, #3
 8005dbe:	60da      	str	r2, [r3, #12]
 8005dc0:	4b7e      	ldr	r3, [pc, #504]	; (8005fbc <LCD_Init+0x3e54>)
 8005dc2:	2280      	movs	r2, #128	; 0x80
 8005dc4:	615a      	str	r2, [r3, #20]
 8005dc6:	4b7d      	ldr	r3, [pc, #500]	; (8005fbc <LCD_Init+0x3e54>)
 8005dc8:	2280      	movs	r2, #128	; 0x80
 8005dca:	611a      	str	r2, [r3, #16]
 8005dcc:	4b7b      	ldr	r3, [pc, #492]	; (8005fbc <LCD_Init+0x3e54>)
 8005dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dd2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8005dd4:	2029      	movs	r0, #41	; 0x29
 8005dd6:	f7fa fed1 	bl	8000b7c <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8005dda:	20d0      	movs	r0, #208	; 0xd0
 8005ddc:	f7fa fece 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8005de0:	4b76      	ldr	r3, [pc, #472]	; (8005fbc <LCD_Init+0x3e54>)
 8005de2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005de6:	611a      	str	r2, [r3, #16]
 8005de8:	4b74      	ldr	r3, [pc, #464]	; (8005fbc <LCD_Init+0x3e54>)
 8005dea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dee:	615a      	str	r2, [r3, #20]
 8005df0:	4b71      	ldr	r3, [pc, #452]	; (8005fb8 <LCD_Init+0x3e50>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	60da      	str	r2, [r3, #12]
 8005df6:	4b71      	ldr	r3, [pc, #452]	; (8005fbc <LCD_Init+0x3e54>)
 8005df8:	2280      	movs	r2, #128	; 0x80
 8005dfa:	615a      	str	r2, [r3, #20]
 8005dfc:	4b6f      	ldr	r3, [pc, #444]	; (8005fbc <LCD_Init+0x3e54>)
 8005dfe:	2280      	movs	r2, #128	; 0x80
 8005e00:	611a      	str	r2, [r3, #16]
 8005e02:	4b6e      	ldr	r3, [pc, #440]	; (8005fbc <LCD_Init+0x3e54>)
 8005e04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e08:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 8005e0a:	20be      	movs	r0, #190	; 0xbe
 8005e0c:	f7fa feb6 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8005e10:	4b6a      	ldr	r3, [pc, #424]	; (8005fbc <LCD_Init+0x3e54>)
 8005e12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e16:	611a      	str	r2, [r3, #16]
 8005e18:	4b68      	ldr	r3, [pc, #416]	; (8005fbc <LCD_Init+0x3e54>)
 8005e1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e1e:	615a      	str	r2, [r3, #20]
 8005e20:	4b65      	ldr	r3, [pc, #404]	; (8005fb8 <LCD_Init+0x3e50>)
 8005e22:	2205      	movs	r2, #5
 8005e24:	60da      	str	r2, [r3, #12]
 8005e26:	4b65      	ldr	r3, [pc, #404]	; (8005fbc <LCD_Init+0x3e54>)
 8005e28:	2280      	movs	r2, #128	; 0x80
 8005e2a:	615a      	str	r2, [r3, #20]
 8005e2c:	4b63      	ldr	r3, [pc, #396]	; (8005fbc <LCD_Init+0x3e54>)
 8005e2e:	2280      	movs	r2, #128	; 0x80
 8005e30:	611a      	str	r2, [r3, #16]
 8005e32:	4b62      	ldr	r3, [pc, #392]	; (8005fbc <LCD_Init+0x3e54>)
 8005e34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e38:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8005e3a:	4b60      	ldr	r3, [pc, #384]	; (8005fbc <LCD_Init+0x3e54>)
 8005e3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e40:	611a      	str	r2, [r3, #16]
 8005e42:	4b5e      	ldr	r3, [pc, #376]	; (8005fbc <LCD_Init+0x3e54>)
 8005e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e48:	615a      	str	r2, [r3, #20]
 8005e4a:	4b5b      	ldr	r3, [pc, #364]	; (8005fb8 <LCD_Init+0x3e50>)
 8005e4c:	22fe      	movs	r2, #254	; 0xfe
 8005e4e:	60da      	str	r2, [r3, #12]
 8005e50:	4b5a      	ldr	r3, [pc, #360]	; (8005fbc <LCD_Init+0x3e54>)
 8005e52:	2280      	movs	r2, #128	; 0x80
 8005e54:	615a      	str	r2, [r3, #20]
 8005e56:	4b59      	ldr	r3, [pc, #356]	; (8005fbc <LCD_Init+0x3e54>)
 8005e58:	2280      	movs	r2, #128	; 0x80
 8005e5a:	611a      	str	r2, [r3, #16]
 8005e5c:	4b57      	ldr	r3, [pc, #348]	; (8005fbc <LCD_Init+0x3e54>)
 8005e5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e62:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 8005e64:	4b55      	ldr	r3, [pc, #340]	; (8005fbc <LCD_Init+0x3e54>)
 8005e66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e6a:	611a      	str	r2, [r3, #16]
 8005e6c:	4b53      	ldr	r3, [pc, #332]	; (8005fbc <LCD_Init+0x3e54>)
 8005e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e72:	615a      	str	r2, [r3, #20]
 8005e74:	4b50      	ldr	r3, [pc, #320]	; (8005fb8 <LCD_Init+0x3e50>)
 8005e76:	2201      	movs	r2, #1
 8005e78:	60da      	str	r2, [r3, #12]
 8005e7a:	4b50      	ldr	r3, [pc, #320]	; (8005fbc <LCD_Init+0x3e54>)
 8005e7c:	2280      	movs	r2, #128	; 0x80
 8005e7e:	615a      	str	r2, [r3, #20]
 8005e80:	4b4e      	ldr	r3, [pc, #312]	; (8005fbc <LCD_Init+0x3e54>)
 8005e82:	2280      	movs	r2, #128	; 0x80
 8005e84:	611a      	str	r2, [r3, #16]
 8005e86:	4b4d      	ldr	r3, [pc, #308]	; (8005fbc <LCD_Init+0x3e54>)
 8005e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e8c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 8005e8e:	4b4b      	ldr	r3, [pc, #300]	; (8005fbc <LCD_Init+0x3e54>)
 8005e90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e94:	611a      	str	r2, [r3, #16]
 8005e96:	4b49      	ldr	r3, [pc, #292]	; (8005fbc <LCD_Init+0x3e54>)
 8005e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e9c:	615a      	str	r2, [r3, #20]
 8005e9e:	4b46      	ldr	r3, [pc, #280]	; (8005fb8 <LCD_Init+0x3e50>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	60da      	str	r2, [r3, #12]
 8005ea4:	4b45      	ldr	r3, [pc, #276]	; (8005fbc <LCD_Init+0x3e54>)
 8005ea6:	2280      	movs	r2, #128	; 0x80
 8005ea8:	615a      	str	r2, [r3, #20]
 8005eaa:	4b44      	ldr	r3, [pc, #272]	; (8005fbc <LCD_Init+0x3e54>)
 8005eac:	2280      	movs	r2, #128	; 0x80
 8005eae:	611a      	str	r2, [r3, #16]
 8005eb0:	4b42      	ldr	r3, [pc, #264]	; (8005fbc <LCD_Init+0x3e54>)
 8005eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eb6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8005eb8:	4b40      	ldr	r3, [pc, #256]	; (8005fbc <LCD_Init+0x3e54>)
 8005eba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ebe:	611a      	str	r2, [r3, #16]
 8005ec0:	4b3e      	ldr	r3, [pc, #248]	; (8005fbc <LCD_Init+0x3e54>)
 8005ec2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ec6:	615a      	str	r2, [r3, #20]
 8005ec8:	4b3b      	ldr	r3, [pc, #236]	; (8005fb8 <LCD_Init+0x3e50>)
 8005eca:	2200      	movs	r2, #0
 8005ecc:	60da      	str	r2, [r3, #12]
 8005ece:	4b3b      	ldr	r3, [pc, #236]	; (8005fbc <LCD_Init+0x3e54>)
 8005ed0:	2280      	movs	r2, #128	; 0x80
 8005ed2:	615a      	str	r2, [r3, #20]
 8005ed4:	4b39      	ldr	r3, [pc, #228]	; (8005fbc <LCD_Init+0x3e54>)
 8005ed6:	2280      	movs	r2, #128	; 0x80
 8005ed8:	611a      	str	r2, [r3, #16]
 8005eda:	4b38      	ldr	r3, [pc, #224]	; (8005fbc <LCD_Init+0x3e54>)
 8005edc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ee0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 8005ee2:	4b36      	ldr	r3, [pc, #216]	; (8005fbc <LCD_Init+0x3e54>)
 8005ee4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ee8:	611a      	str	r2, [r3, #16]
 8005eea:	4b34      	ldr	r3, [pc, #208]	; (8005fbc <LCD_Init+0x3e54>)
 8005eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ef0:	615a      	str	r2, [r3, #20]
 8005ef2:	4b31      	ldr	r3, [pc, #196]	; (8005fb8 <LCD_Init+0x3e50>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	60da      	str	r2, [r3, #12]
 8005ef8:	4b30      	ldr	r3, [pc, #192]	; (8005fbc <LCD_Init+0x3e54>)
 8005efa:	2280      	movs	r2, #128	; 0x80
 8005efc:	615a      	str	r2, [r3, #20]
 8005efe:	4b2f      	ldr	r3, [pc, #188]	; (8005fbc <LCD_Init+0x3e54>)
 8005f00:	2280      	movs	r2, #128	; 0x80
 8005f02:	611a      	str	r2, [r3, #16]
 8005f04:	4b2d      	ldr	r3, [pc, #180]	; (8005fbc <LCD_Init+0x3e54>)
 8005f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f0a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8005f0c:	20b8      	movs	r0, #184	; 0xb8
 8005f0e:	f7fa fe35 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8005f12:	4b2a      	ldr	r3, [pc, #168]	; (8005fbc <LCD_Init+0x3e54>)
 8005f14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f18:	611a      	str	r2, [r3, #16]
 8005f1a:	4b28      	ldr	r3, [pc, #160]	; (8005fbc <LCD_Init+0x3e54>)
 8005f1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f20:	615a      	str	r2, [r3, #20]
 8005f22:	4b25      	ldr	r3, [pc, #148]	; (8005fb8 <LCD_Init+0x3e50>)
 8005f24:	2203      	movs	r2, #3
 8005f26:	60da      	str	r2, [r3, #12]
 8005f28:	4b24      	ldr	r3, [pc, #144]	; (8005fbc <LCD_Init+0x3e54>)
 8005f2a:	2280      	movs	r2, #128	; 0x80
 8005f2c:	615a      	str	r2, [r3, #20]
 8005f2e:	4b23      	ldr	r3, [pc, #140]	; (8005fbc <LCD_Init+0x3e54>)
 8005f30:	2280      	movs	r2, #128	; 0x80
 8005f32:	611a      	str	r2, [r3, #16]
 8005f34:	4b21      	ldr	r3, [pc, #132]	; (8005fbc <LCD_Init+0x3e54>)
 8005f36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f3a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 8005f3c:	4b1f      	ldr	r3, [pc, #124]	; (8005fbc <LCD_Init+0x3e54>)
 8005f3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f42:	611a      	str	r2, [r3, #16]
 8005f44:	4b1d      	ldr	r3, [pc, #116]	; (8005fbc <LCD_Init+0x3e54>)
 8005f46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f4a:	615a      	str	r2, [r3, #20]
 8005f4c:	4b1a      	ldr	r3, [pc, #104]	; (8005fb8 <LCD_Init+0x3e50>)
 8005f4e:	2201      	movs	r2, #1
 8005f50:	60da      	str	r2, [r3, #12]
 8005f52:	4b1a      	ldr	r3, [pc, #104]	; (8005fbc <LCD_Init+0x3e54>)
 8005f54:	2280      	movs	r2, #128	; 0x80
 8005f56:	615a      	str	r2, [r3, #20]
 8005f58:	4b18      	ldr	r3, [pc, #96]	; (8005fbc <LCD_Init+0x3e54>)
 8005f5a:	2280      	movs	r2, #128	; 0x80
 8005f5c:	611a      	str	r2, [r3, #16]
 8005f5e:	4b17      	ldr	r3, [pc, #92]	; (8005fbc <LCD_Init+0x3e54>)
 8005f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f64:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 8005f66:	20ba      	movs	r0, #186	; 0xba
 8005f68:	f7fa fe08 	bl	8000b7c <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8005f6c:	4b13      	ldr	r3, [pc, #76]	; (8005fbc <LCD_Init+0x3e54>)
 8005f6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f72:	611a      	str	r2, [r3, #16]
 8005f74:	4b11      	ldr	r3, [pc, #68]	; (8005fbc <LCD_Init+0x3e54>)
 8005f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f7a:	615a      	str	r2, [r3, #20]
 8005f7c:	4b0e      	ldr	r3, [pc, #56]	; (8005fb8 <LCD_Init+0x3e50>)
 8005f7e:	2201      	movs	r2, #1
 8005f80:	60da      	str	r2, [r3, #12]
 8005f82:	4b0e      	ldr	r3, [pc, #56]	; (8005fbc <LCD_Init+0x3e54>)
 8005f84:	2280      	movs	r2, #128	; 0x80
 8005f86:	615a      	str	r2, [r3, #20]
 8005f88:	4b0c      	ldr	r3, [pc, #48]	; (8005fbc <LCD_Init+0x3e54>)
 8005f8a:	2280      	movs	r2, #128	; 0x80
 8005f8c:	611a      	str	r2, [r3, #16]
 8005f8e:	4b0b      	ldr	r3, [pc, #44]	; (8005fbc <LCD_Init+0x3e54>)
 8005f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f94:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 8005f96:	2064      	movs	r0, #100	; 0x64
 8005f98:	f7fb ff36 	bl	8001e08 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 8005f9c:	2000      	movs	r0, #0
 8005f9e:	f7fb ffd7 	bl	8001f50 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 8005fa2:	4b07      	ldr	r3, [pc, #28]	; (8005fc0 <LCD_Init+0x3e58>)
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8005fa8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005fac:	f000 f80a 	bl	8005fc4 <LCD_Clear>
}
 8005fb0:	bf00      	nop
 8005fb2:	3718      	adds	r7, #24
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	40010c00 	.word	0x40010c00
 8005fbc:	40011000 	.word	0x40011000
 8005fc0:	422201a8 	.word	0x422201a8

08005fc4 <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	4603      	mov	r3, r0
 8005fcc:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 8005fd2:	4b2a      	ldr	r3, [pc, #168]	; (800607c <LCD_Clear+0xb8>)
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8005fd8:	4b28      	ldr	r3, [pc, #160]	; (800607c <LCD_Clear+0xb8>)
 8005fda:	885b      	ldrh	r3, [r3, #2]
 8005fdc:	461a      	mov	r2, r3
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	fb02 f303 	mul.w	r3, r2, r3
 8005fe4:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 8005fe6:	4b25      	ldr	r3, [pc, #148]	; (800607c <LCD_Clear+0xb8>)
 8005fe8:	889b      	ldrh	r3, [r3, #4]
 8005fea:	f646 0204 	movw	r2, #26628	; 0x6804
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d11a      	bne.n	8006028 <LCD_Clear+0x64>
 8005ff2:	4b22      	ldr	r3, [pc, #136]	; (800607c <LCD_Clear+0xb8>)
 8005ff4:	799b      	ldrb	r3, [r3, #6]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d116      	bne.n	8006028 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 8005ffa:	4b20      	ldr	r3, [pc, #128]	; (800607c <LCD_Clear+0xb8>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8006000:	4b1e      	ldr	r3, [pc, #120]	; (800607c <LCD_Clear+0xb8>)
 8006002:	222a      	movs	r2, #42	; 0x2a
 8006004:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8006006:	4b1d      	ldr	r3, [pc, #116]	; (800607c <LCD_Clear+0xb8>)
 8006008:	222b      	movs	r2, #43	; 0x2b
 800600a:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 800600c:	2100      	movs	r1, #0
 800600e:	2000      	movs	r0, #0
 8006010:	f7fa fe86 	bl	8000d20 <LCD_SetCursor>
		lcddev.dir = 1;
 8006014:	4b19      	ldr	r3, [pc, #100]	; (800607c <LCD_Clear+0xb8>)
 8006016:	2201      	movs	r2, #1
 8006018:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 800601a:	4b18      	ldr	r3, [pc, #96]	; (800607c <LCD_Clear+0xb8>)
 800601c:	222b      	movs	r2, #43	; 0x2b
 800601e:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8006020:	4b16      	ldr	r3, [pc, #88]	; (800607c <LCD_Clear+0xb8>)
 8006022:	222a      	movs	r2, #42	; 0x2a
 8006024:	819a      	strh	r2, [r3, #12]
 8006026:	e003      	b.n	8006030 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8006028:	2100      	movs	r1, #0
 800602a:	2000      	movs	r0, #0
 800602c:	f7fa fe78 	bl	8000d20 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8006030:	f7fa fe6a 	bl	8000d08 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 8006034:	2300      	movs	r3, #0
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	e017      	b.n	800606a <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 800603a:	4b11      	ldr	r3, [pc, #68]	; (8006080 <LCD_Clear+0xbc>)
 800603c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006040:	611a      	str	r2, [r3, #16]
 8006042:	4b0f      	ldr	r3, [pc, #60]	; (8006080 <LCD_Clear+0xbc>)
 8006044:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006048:	615a      	str	r2, [r3, #20]
 800604a:	4a0e      	ldr	r2, [pc, #56]	; (8006084 <LCD_Clear+0xc0>)
 800604c:	88fb      	ldrh	r3, [r7, #6]
 800604e:	60d3      	str	r3, [r2, #12]
 8006050:	4b0b      	ldr	r3, [pc, #44]	; (8006080 <LCD_Clear+0xbc>)
 8006052:	2280      	movs	r2, #128	; 0x80
 8006054:	615a      	str	r2, [r3, #20]
 8006056:	4b0a      	ldr	r3, [pc, #40]	; (8006080 <LCD_Clear+0xbc>)
 8006058:	2280      	movs	r2, #128	; 0x80
 800605a:	611a      	str	r2, [r3, #16]
 800605c:	4b08      	ldr	r3, [pc, #32]	; (8006080 <LCD_Clear+0xbc>)
 800605e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006062:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	3301      	adds	r3, #1
 8006068:	60fb      	str	r3, [r7, #12]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	429a      	cmp	r2, r3
 8006070:	d3e3      	bcc.n	800603a <LCD_Clear+0x76>
}
 8006072:	bf00      	nop
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	200005d4 	.word	0x200005d4
 8006080:	40011000 	.word	0x40011000
 8006084:	40010c00 	.word	0x40010c00

08006088 <LCD_Fill>:
// Fill the area with color
// :(xend-xsta+1)*(yend-ysta+1)
void LCD_Fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey,
		uint16_t color) {
 8006088:	b590      	push	{r4, r7, lr}
 800608a:	b087      	sub	sp, #28
 800608c:	af02      	add	r7, sp, #8
 800608e:	4604      	mov	r4, r0
 8006090:	4608      	mov	r0, r1
 8006092:	4611      	mov	r1, r2
 8006094:	461a      	mov	r2, r3
 8006096:	4623      	mov	r3, r4
 8006098:	80fb      	strh	r3, [r7, #6]
 800609a:	4603      	mov	r3, r0
 800609c:	80bb      	strh	r3, [r7, #4]
 800609e:	460b      	mov	r3, r1
 80060a0:	807b      	strh	r3, [r7, #2]
 80060a2:	4613      	mov	r3, r2
 80060a4:	803b      	strh	r3, [r7, #0]
	uint16_t i, j;
	uint16_t xlen = 0;
 80060a6:	2300      	movs	r3, #0
 80060a8:	817b      	strh	r3, [r7, #10]
	uint16_t temp;
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1))	//6804横屏的时候特殊处理
 80060aa:	4b3a      	ldr	r3, [pc, #232]	; (8006194 <LCD_Fill+0x10c>)
 80060ac:	889b      	ldrh	r3, [r3, #4]
 80060ae:	f646 0204 	movw	r2, #26628	; 0x6804
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d133      	bne.n	800611e <LCD_Fill+0x96>
 80060b6:	4b37      	ldr	r3, [pc, #220]	; (8006194 <LCD_Fill+0x10c>)
 80060b8:	799b      	ldrb	r3, [r3, #6]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d12f      	bne.n	800611e <LCD_Fill+0x96>
			{
		temp = sx;
 80060be:	88fb      	ldrh	r3, [r7, #6]
 80060c0:	813b      	strh	r3, [r7, #8]
		sx = sy;
 80060c2:	88bb      	ldrh	r3, [r7, #4]
 80060c4:	80fb      	strh	r3, [r7, #6]
		sy = lcddev.width - ex - 1;
 80060c6:	4b33      	ldr	r3, [pc, #204]	; (8006194 <LCD_Fill+0x10c>)
 80060c8:	881a      	ldrh	r2, [r3, #0]
 80060ca:	887b      	ldrh	r3, [r7, #2]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	3b01      	subs	r3, #1
 80060d2:	80bb      	strh	r3, [r7, #4]
		ex = ey;
 80060d4:	883b      	ldrh	r3, [r7, #0]
 80060d6:	807b      	strh	r3, [r7, #2]
		ey = lcddev.width - temp - 1;
 80060d8:	4b2e      	ldr	r3, [pc, #184]	; (8006194 <LCD_Fill+0x10c>)
 80060da:	881a      	ldrh	r2, [r3, #0]
 80060dc:	893b      	ldrh	r3, [r7, #8]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	3b01      	subs	r3, #1
 80060e4:	803b      	strh	r3, [r7, #0]
		lcddev.dir = 0;
 80060e6:	4b2b      	ldr	r3, [pc, #172]	; (8006194 <LCD_Fill+0x10c>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 80060ec:	4b29      	ldr	r3, [pc, #164]	; (8006194 <LCD_Fill+0x10c>)
 80060ee:	222a      	movs	r2, #42	; 0x2a
 80060f0:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 80060f2:	4b28      	ldr	r3, [pc, #160]	; (8006194 <LCD_Fill+0x10c>)
 80060f4:	222b      	movs	r2, #43	; 0x2b
 80060f6:	819a      	strh	r2, [r3, #12]
		LCD_Fill(sx, sy, ex, ey, color);
 80060f8:	883c      	ldrh	r4, [r7, #0]
 80060fa:	887a      	ldrh	r2, [r7, #2]
 80060fc:	88b9      	ldrh	r1, [r7, #4]
 80060fe:	88f8      	ldrh	r0, [r7, #6]
 8006100:	8c3b      	ldrh	r3, [r7, #32]
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	4623      	mov	r3, r4
 8006106:	f7ff ffbf 	bl	8006088 <LCD_Fill>
		lcddev.dir = 1;
 800610a:	4b22      	ldr	r3, [pc, #136]	; (8006194 <LCD_Fill+0x10c>)
 800610c:	2201      	movs	r2, #1
 800610e:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8006110:	4b20      	ldr	r3, [pc, #128]	; (8006194 <LCD_Fill+0x10c>)
 8006112:	222b      	movs	r2, #43	; 0x2b
 8006114:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8006116:	4b1f      	ldr	r3, [pc, #124]	; (8006194 <LCD_Fill+0x10c>)
 8006118:	222a      	movs	r2, #42	; 0x2a
 800611a:	819a      	strh	r2, [r3, #12]
 800611c:	e036      	b.n	800618c <LCD_Fill+0x104>
	} else {
		xlen = ex - sx + 1;
 800611e:	887a      	ldrh	r2, [r7, #2]
 8006120:	88fb      	ldrh	r3, [r7, #6]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	b29b      	uxth	r3, r3
 8006126:	3301      	adds	r3, #1
 8006128:	817b      	strh	r3, [r7, #10]
		for (i = sy; i <= ey; i++) {
 800612a:	88bb      	ldrh	r3, [r7, #4]
 800612c:	81fb      	strh	r3, [r7, #14]
 800612e:	e029      	b.n	8006184 <LCD_Fill+0xfc>
			LCD_SetCursor(sx, i);      				//设置光标位置
 8006130:	89fa      	ldrh	r2, [r7, #14]
 8006132:	88fb      	ldrh	r3, [r7, #6]
 8006134:	4611      	mov	r1, r2
 8006136:	4618      	mov	r0, r3
 8006138:	f7fa fdf2 	bl	8000d20 <LCD_SetCursor>
			LCD_WriteRAM_Prepare();     			//开始写入GRAM	  
 800613c:	f7fa fde4 	bl	8000d08 <LCD_WriteRAM_Prepare>
			for (j = 0; j < xlen; j++)
 8006140:	2300      	movs	r3, #0
 8006142:	81bb      	strh	r3, [r7, #12]
 8006144:	e017      	b.n	8006176 <LCD_Fill+0xee>
				LCD_WR_DATA(color);	//设置光标位置
 8006146:	4b14      	ldr	r3, [pc, #80]	; (8006198 <LCD_Fill+0x110>)
 8006148:	f44f 7280 	mov.w	r2, #256	; 0x100
 800614c:	611a      	str	r2, [r3, #16]
 800614e:	4b12      	ldr	r3, [pc, #72]	; (8006198 <LCD_Fill+0x110>)
 8006150:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006154:	615a      	str	r2, [r3, #20]
 8006156:	4a11      	ldr	r2, [pc, #68]	; (800619c <LCD_Fill+0x114>)
 8006158:	8c3b      	ldrh	r3, [r7, #32]
 800615a:	60d3      	str	r3, [r2, #12]
 800615c:	4b0e      	ldr	r3, [pc, #56]	; (8006198 <LCD_Fill+0x110>)
 800615e:	2280      	movs	r2, #128	; 0x80
 8006160:	615a      	str	r2, [r3, #20]
 8006162:	4b0d      	ldr	r3, [pc, #52]	; (8006198 <LCD_Fill+0x110>)
 8006164:	2280      	movs	r2, #128	; 0x80
 8006166:	611a      	str	r2, [r3, #16]
 8006168:	4b0b      	ldr	r3, [pc, #44]	; (8006198 <LCD_Fill+0x110>)
 800616a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800616e:	611a      	str	r2, [r3, #16]
			for (j = 0; j < xlen; j++)
 8006170:	89bb      	ldrh	r3, [r7, #12]
 8006172:	3301      	adds	r3, #1
 8006174:	81bb      	strh	r3, [r7, #12]
 8006176:	89ba      	ldrh	r2, [r7, #12]
 8006178:	897b      	ldrh	r3, [r7, #10]
 800617a:	429a      	cmp	r2, r3
 800617c:	d3e3      	bcc.n	8006146 <LCD_Fill+0xbe>
		for (i = sy; i <= ey; i++) {
 800617e:	89fb      	ldrh	r3, [r7, #14]
 8006180:	3301      	adds	r3, #1
 8006182:	81fb      	strh	r3, [r7, #14]
 8006184:	89fa      	ldrh	r2, [r7, #14]
 8006186:	883b      	ldrh	r3, [r7, #0]
 8006188:	429a      	cmp	r2, r3
 800618a:	d9d1      	bls.n	8006130 <LCD_Fill+0xa8>
		}
	}
}
 800618c:	bf00      	nop
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	bd90      	pop	{r4, r7, pc}
 8006194:	200005d4 	.word	0x200005d4
 8006198:	40011000 	.word	0x40011000
 800619c:	40010c00 	.word	0x40010c00

080061a0 <LCD_Color_Fill>:
// Fill the area with color
//(sx,sy),(ex,ey):填充矩形对角坐标,区域大小为:(ex-sx+1)*(ey-sy+1)
void LCD_Color_Fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey,
		uint16_t *color) {
 80061a0:	b590      	push	{r4, r7, lr}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	4604      	mov	r4, r0
 80061a8:	4608      	mov	r0, r1
 80061aa:	4611      	mov	r1, r2
 80061ac:	461a      	mov	r2, r3
 80061ae:	4623      	mov	r3, r4
 80061b0:	80fb      	strh	r3, [r7, #6]
 80061b2:	4603      	mov	r3, r0
 80061b4:	80bb      	strh	r3, [r7, #4]
 80061b6:	460b      	mov	r3, r1
 80061b8:	807b      	strh	r3, [r7, #2]
 80061ba:	4613      	mov	r3, r2
 80061bc:	803b      	strh	r3, [r7, #0]
	uint16_t height, width;
	uint16_t i, j;
	width = ex - sx + 1; 			//得到填充的宽度
 80061be:	887a      	ldrh	r2, [r7, #2]
 80061c0:	88fb      	ldrh	r3, [r7, #6]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	3301      	adds	r3, #1
 80061c8:	817b      	strh	r3, [r7, #10]
	height = ey - sy + 1;			//高度
 80061ca:	883a      	ldrh	r2, [r7, #0]
 80061cc:	88bb      	ldrh	r3, [r7, #4]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	3301      	adds	r3, #1
 80061d4:	813b      	strh	r3, [r7, #8]
	for (i = 0; i < height; i++) {
 80061d6:	2300      	movs	r3, #0
 80061d8:	81fb      	strh	r3, [r7, #14]
 80061da:	e035      	b.n	8006248 <LCD_Color_Fill+0xa8>
		LCD_SetCursor(sx, sy + i);   	//设置光标位置
 80061dc:	88ba      	ldrh	r2, [r7, #4]
 80061de:	89fb      	ldrh	r3, [r7, #14]
 80061e0:	4413      	add	r3, r2
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	88fb      	ldrh	r3, [r7, #6]
 80061e6:	4611      	mov	r1, r2
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7fa fd99 	bl	8000d20 <LCD_SetCursor>
		LCD_WriteRAM_Prepare();     //开始写入GRAM
 80061ee:	f7fa fd8b 	bl	8000d08 <LCD_WriteRAM_Prepare>
		for (j = 0; j < width; j++)
 80061f2:	2300      	movs	r3, #0
 80061f4:	81bb      	strh	r3, [r7, #12]
 80061f6:	e020      	b.n	800623a <LCD_Color_Fill+0x9a>
			LCD_WR_DATA(color[i * width + j]);     //写入数据
 80061f8:	4b17      	ldr	r3, [pc, #92]	; (8006258 <LCD_Color_Fill+0xb8>)
 80061fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061fe:	611a      	str	r2, [r3, #16]
 8006200:	4b15      	ldr	r3, [pc, #84]	; (8006258 <LCD_Color_Fill+0xb8>)
 8006202:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006206:	615a      	str	r2, [r3, #20]
 8006208:	89fb      	ldrh	r3, [r7, #14]
 800620a:	897a      	ldrh	r2, [r7, #10]
 800620c:	fb02 f203 	mul.w	r2, r2, r3
 8006210:	89bb      	ldrh	r3, [r7, #12]
 8006212:	4413      	add	r3, r2
 8006214:	005b      	lsls	r3, r3, #1
 8006216:	6a3a      	ldr	r2, [r7, #32]
 8006218:	4413      	add	r3, r2
 800621a:	881a      	ldrh	r2, [r3, #0]
 800621c:	4b0f      	ldr	r3, [pc, #60]	; (800625c <LCD_Color_Fill+0xbc>)
 800621e:	60da      	str	r2, [r3, #12]
 8006220:	4b0d      	ldr	r3, [pc, #52]	; (8006258 <LCD_Color_Fill+0xb8>)
 8006222:	2280      	movs	r2, #128	; 0x80
 8006224:	615a      	str	r2, [r3, #20]
 8006226:	4b0c      	ldr	r3, [pc, #48]	; (8006258 <LCD_Color_Fill+0xb8>)
 8006228:	2280      	movs	r2, #128	; 0x80
 800622a:	611a      	str	r2, [r3, #16]
 800622c:	4b0a      	ldr	r3, [pc, #40]	; (8006258 <LCD_Color_Fill+0xb8>)
 800622e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006232:	611a      	str	r2, [r3, #16]
		for (j = 0; j < width; j++)
 8006234:	89bb      	ldrh	r3, [r7, #12]
 8006236:	3301      	adds	r3, #1
 8006238:	81bb      	strh	r3, [r7, #12]
 800623a:	89ba      	ldrh	r2, [r7, #12]
 800623c:	897b      	ldrh	r3, [r7, #10]
 800623e:	429a      	cmp	r2, r3
 8006240:	d3da      	bcc.n	80061f8 <LCD_Color_Fill+0x58>
	for (i = 0; i < height; i++) {
 8006242:	89fb      	ldrh	r3, [r7, #14]
 8006244:	3301      	adds	r3, #1
 8006246:	81fb      	strh	r3, [r7, #14]
 8006248:	89fa      	ldrh	r2, [r7, #14]
 800624a:	893b      	ldrh	r3, [r7, #8]
 800624c:	429a      	cmp	r2, r3
 800624e:	d3c5      	bcc.n	80061dc <LCD_Color_Fill+0x3c>
	}
}
 8006250:	bf00      	nop
 8006252:	3714      	adds	r7, #20
 8006254:	46bd      	mov	sp, r7
 8006256:	bd90      	pop	{r4, r7, pc}
 8006258:	40011000 	.word	0x40011000
 800625c:	40010c00 	.word	0x40010c00

08006260 <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 8006260:	b590      	push	{r4, r7, lr}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	4604      	mov	r4, r0
 8006268:	4608      	mov	r0, r1
 800626a:	4611      	mov	r1, r2
 800626c:	461a      	mov	r2, r3
 800626e:	4623      	mov	r3, r4
 8006270:	80fb      	strh	r3, [r7, #6]
 8006272:	4603      	mov	r3, r0
 8006274:	80bb      	strh	r3, [r7, #4]
 8006276:	460b      	mov	r3, r1
 8006278:	70fb      	strb	r3, [r7, #3]
 800627a:	4613      	mov	r3, r2
 800627c:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 800627e:	88bb      	ldrh	r3, [r7, #4]
 8006280:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 8006282:	78bb      	ldrb	r3, [r7, #2]
 8006284:	08db      	lsrs	r3, r3, #3
 8006286:	b2db      	uxtb	r3, r3
 8006288:	461a      	mov	r2, r3
 800628a:	78bb      	ldrb	r3, [r7, #2]
 800628c:	f003 0307 	and.w	r3, r3, #7
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	bf14      	ite	ne
 8006296:	2301      	movne	r3, #1
 8006298:	2300      	moveq	r3, #0
 800629a:	b2db      	uxtb	r3, r3
 800629c:	4413      	add	r3, r2
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	78ba      	ldrb	r2, [r7, #2]
 80062a2:	0852      	lsrs	r2, r2, #1
 80062a4:	b2d2      	uxtb	r2, r2
 80062a6:	fb02 f303 	mul.w	r3, r2, r3
 80062aa:	727b      	strb	r3, [r7, #9]
	num = num - ' ';		//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 80062ac:	78fb      	ldrb	r3, [r7, #3]
 80062ae:	3b20      	subs	r3, #32
 80062b0:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++) {
 80062b2:	2300      	movs	r3, #0
 80062b4:	737b      	strb	r3, [r7, #13]
 80062b6:	e069      	b.n	800638c <LCD_ShowChar+0x12c>
		if (size == 12)
 80062b8:	78bb      	ldrb	r3, [r7, #2]
 80062ba:	2b0c      	cmp	r3, #12
 80062bc:	d10b      	bne.n	80062d6 <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 80062be:	78fa      	ldrb	r2, [r7, #3]
 80062c0:	7b79      	ldrb	r1, [r7, #13]
 80062c2:	4838      	ldr	r0, [pc, #224]	; (80063a4 <LCD_ShowChar+0x144>)
 80062c4:	4613      	mov	r3, r2
 80062c6:	005b      	lsls	r3, r3, #1
 80062c8:	4413      	add	r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4403      	add	r3, r0
 80062ce:	440b      	add	r3, r1
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	73fb      	strb	r3, [r7, #15]
 80062d4:	e019      	b.n	800630a <LCD_ShowChar+0xaa>
		else if (size == 16)
 80062d6:	78bb      	ldrb	r3, [r7, #2]
 80062d8:	2b10      	cmp	r3, #16
 80062da:	d108      	bne.n	80062ee <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t];	//调用1608字体
 80062dc:	78fa      	ldrb	r2, [r7, #3]
 80062de:	7b7b      	ldrb	r3, [r7, #13]
 80062e0:	4931      	ldr	r1, [pc, #196]	; (80063a8 <LCD_ShowChar+0x148>)
 80062e2:	0112      	lsls	r2, r2, #4
 80062e4:	440a      	add	r2, r1
 80062e6:	4413      	add	r3, r2
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	73fb      	strb	r3, [r7, #15]
 80062ec:	e00d      	b.n	800630a <LCD_ShowChar+0xaa>
		else if (size == 24)
 80062ee:	78bb      	ldrb	r3, [r7, #2]
 80062f0:	2b18      	cmp	r3, #24
 80062f2:	d150      	bne.n	8006396 <LCD_ShowChar+0x136>
			temp = asc2_2412[num][t];	//调用2412字体
 80062f4:	78fa      	ldrb	r2, [r7, #3]
 80062f6:	7b79      	ldrb	r1, [r7, #13]
 80062f8:	482c      	ldr	r0, [pc, #176]	; (80063ac <LCD_ShowChar+0x14c>)
 80062fa:	4613      	mov	r3, r2
 80062fc:	00db      	lsls	r3, r3, #3
 80062fe:	4413      	add	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4403      	add	r3, r0
 8006304:	440b      	add	r3, r1
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 800630a:	2300      	movs	r3, #0
 800630c:	73bb      	strb	r3, [r7, #14]
 800630e:	e035      	b.n	800637c <LCD_ShowChar+0x11c>
			if (temp & 0x80)
 8006310:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006314:	2b00      	cmp	r3, #0
 8006316:	da07      	bge.n	8006328 <LCD_ShowChar+0xc8>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 8006318:	4b25      	ldr	r3, [pc, #148]	; (80063b0 <LCD_ShowChar+0x150>)
 800631a:	881a      	ldrh	r2, [r3, #0]
 800631c:	88b9      	ldrh	r1, [r7, #4]
 800631e:	88fb      	ldrh	r3, [r7, #6]
 8006320:	4618      	mov	r0, r3
 8006322:	f7fb fadb 	bl	80018dc <LCD_Fast_DrawPoint>
 8006326:	e00a      	b.n	800633e <LCD_ShowChar+0xde>
			else if (mode == 0)
 8006328:	f897 3020 	ldrb.w	r3, [r7, #32]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d106      	bne.n	800633e <LCD_ShowChar+0xde>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 8006330:	4b20      	ldr	r3, [pc, #128]	; (80063b4 <LCD_ShowChar+0x154>)
 8006332:	881a      	ldrh	r2, [r3, #0]
 8006334:	88b9      	ldrh	r1, [r7, #4]
 8006336:	88fb      	ldrh	r3, [r7, #6]
 8006338:	4618      	mov	r0, r3
 800633a:	f7fb facf 	bl	80018dc <LCD_Fast_DrawPoint>
			temp <<= 1;
 800633e:	7bfb      	ldrb	r3, [r7, #15]
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	73fb      	strb	r3, [r7, #15]
			y++;
 8006344:	88bb      	ldrh	r3, [r7, #4]
 8006346:	3301      	adds	r3, #1
 8006348:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 800634a:	4b1b      	ldr	r3, [pc, #108]	; (80063b8 <LCD_ShowChar+0x158>)
 800634c:	885b      	ldrh	r3, [r3, #2]
 800634e:	88ba      	ldrh	r2, [r7, #4]
 8006350:	429a      	cmp	r2, r3
 8006352:	d222      	bcs.n	800639a <LCD_ShowChar+0x13a>
				return;		//超区域了
			if ((y - y0) == size) {
 8006354:	88ba      	ldrh	r2, [r7, #4]
 8006356:	897b      	ldrh	r3, [r7, #10]
 8006358:	1ad2      	subs	r2, r2, r3
 800635a:	78bb      	ldrb	r3, [r7, #2]
 800635c:	429a      	cmp	r2, r3
 800635e:	d10a      	bne.n	8006376 <LCD_ShowChar+0x116>
				y = y0;
 8006360:	897b      	ldrh	r3, [r7, #10]
 8006362:	80bb      	strh	r3, [r7, #4]
				x++;
 8006364:	88fb      	ldrh	r3, [r7, #6]
 8006366:	3301      	adds	r3, #1
 8006368:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 800636a:	4b13      	ldr	r3, [pc, #76]	; (80063b8 <LCD_ShowChar+0x158>)
 800636c:	881b      	ldrh	r3, [r3, #0]
 800636e:	88fa      	ldrh	r2, [r7, #6]
 8006370:	429a      	cmp	r2, r3
 8006372:	d307      	bcc.n	8006384 <LCD_ShowChar+0x124>
					return;	//超区域了
 8006374:	e012      	b.n	800639c <LCD_ShowChar+0x13c>
		for (t1 = 0; t1 < 8; t1++) {
 8006376:	7bbb      	ldrb	r3, [r7, #14]
 8006378:	3301      	adds	r3, #1
 800637a:	73bb      	strb	r3, [r7, #14]
 800637c:	7bbb      	ldrb	r3, [r7, #14]
 800637e:	2b07      	cmp	r3, #7
 8006380:	d9c6      	bls.n	8006310 <LCD_ShowChar+0xb0>
 8006382:	e000      	b.n	8006386 <LCD_ShowChar+0x126>
				break;
 8006384:	bf00      	nop
	for (t = 0; t < csize; t++) {
 8006386:	7b7b      	ldrb	r3, [r7, #13]
 8006388:	3301      	adds	r3, #1
 800638a:	737b      	strb	r3, [r7, #13]
 800638c:	7b7a      	ldrb	r2, [r7, #13]
 800638e:	7a7b      	ldrb	r3, [r7, #9]
 8006390:	429a      	cmp	r2, r3
 8006392:	d391      	bcc.n	80062b8 <LCD_ShowChar+0x58>
 8006394:	e002      	b.n	800639c <LCD_ShowChar+0x13c>
			return;								//没有的字库
 8006396:	bf00      	nop
 8006398:	e000      	b.n	800639c <LCD_ShowChar+0x13c>
				return;		//超区域了
 800639a:	bf00      	nop
			}
		}
	}
}
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd90      	pop	{r4, r7, pc}
 80063a2:	bf00      	nop
 80063a4:	0800badc 	.word	0x0800badc
 80063a8:	0800bf50 	.word	0x0800bf50
 80063ac:	0800c540 	.word	0x0800c540
 80063b0:	200005ac 	.word	0x200005ac
 80063b4:	20000000 	.word	0x20000000
 80063b8:	200005d4 	.word	0x200005d4

080063bc <LCD_Pow>:
//m^n函数
//返回值:m^n次方.
uint32_t LCD_Pow(uint8_t m, uint8_t n) {
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	4603      	mov	r3, r0
 80063c4:	460a      	mov	r2, r1
 80063c6:	71fb      	strb	r3, [r7, #7]
 80063c8:	4613      	mov	r3, r2
 80063ca:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 80063cc:	2301      	movs	r3, #1
 80063ce:	60fb      	str	r3, [r7, #12]
	while (n--)
 80063d0:	e004      	b.n	80063dc <LCD_Pow+0x20>
		result *= m;
 80063d2:	79fa      	ldrb	r2, [r7, #7]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	fb02 f303 	mul.w	r3, r2, r3
 80063da:	60fb      	str	r3, [r7, #12]
	while (n--)
 80063dc:	79bb      	ldrb	r3, [r7, #6]
 80063de:	1e5a      	subs	r2, r3, #1
 80063e0:	71ba      	strb	r2, [r7, #6]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1f5      	bne.n	80063d2 <LCD_Pow+0x16>
	return result;
 80063e6:	68fb      	ldr	r3, [r7, #12]
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3714      	adds	r7, #20
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bc80      	pop	{r7}
 80063f0:	4770      	bx	lr
	...

080063f4 <LCD_ShowNum>:
// Display number without the leading zeros
// x,y: starting coordinate
// len: number of digits
// size: font size 12/16/24
void LCD_ShowNum(uint16_t x, uint16_t y, uint32_t num, uint8_t len,
		uint8_t size) {
 80063f4:	b590      	push	{r4, r7, lr}
 80063f6:	b089      	sub	sp, #36	; 0x24
 80063f8:	af02      	add	r7, sp, #8
 80063fa:	60ba      	str	r2, [r7, #8]
 80063fc:	461a      	mov	r2, r3
 80063fe:	4603      	mov	r3, r0
 8006400:	81fb      	strh	r3, [r7, #14]
 8006402:	460b      	mov	r3, r1
 8006404:	81bb      	strh	r3, [r7, #12]
 8006406:	4613      	mov	r3, r2
 8006408:	71fb      	strb	r3, [r7, #7]
	uint8_t t, temp;
	uint8_t enshow = 0;
 800640a:	2300      	movs	r3, #0
 800640c:	75bb      	strb	r3, [r7, #22]
	for (t = 0; t < len; t++) {
 800640e:	2300      	movs	r3, #0
 8006410:	75fb      	strb	r3, [r7, #23]
 8006412:	e057      	b.n	80064c4 <LCD_ShowNum+0xd0>
		temp = (num / LCD_Pow(10, len - t - 1)) % 10;
 8006414:	79fa      	ldrb	r2, [r7, #7]
 8006416:	7dfb      	ldrb	r3, [r7, #23]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	b2db      	uxtb	r3, r3
 800641c:	3b01      	subs	r3, #1
 800641e:	b2db      	uxtb	r3, r3
 8006420:	4619      	mov	r1, r3
 8006422:	200a      	movs	r0, #10
 8006424:	f7ff ffca 	bl	80063bc <LCD_Pow>
 8006428:	4602      	mov	r2, r0
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006430:	4b28      	ldr	r3, [pc, #160]	; (80064d4 <LCD_ShowNum+0xe0>)
 8006432:	fba3 2301 	umull	r2, r3, r3, r1
 8006436:	08da      	lsrs	r2, r3, #3
 8006438:	4613      	mov	r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4413      	add	r3, r2
 800643e:	005b      	lsls	r3, r3, #1
 8006440:	1aca      	subs	r2, r1, r3
 8006442:	4613      	mov	r3, r2
 8006444:	757b      	strb	r3, [r7, #21]
		if (enshow == 0 && t < (len - 1)) {
 8006446:	7dbb      	ldrb	r3, [r7, #22]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d120      	bne.n	800648e <LCD_ShowNum+0x9a>
 800644c:	7dfa      	ldrb	r2, [r7, #23]
 800644e:	79fb      	ldrb	r3, [r7, #7]
 8006450:	3b01      	subs	r3, #1
 8006452:	429a      	cmp	r2, r3
 8006454:	da1b      	bge.n	800648e <LCD_ShowNum+0x9a>
			if (temp == 0) {
 8006456:	7d7b      	ldrb	r3, [r7, #21]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d116      	bne.n	800648a <LCD_ShowNum+0x96>
				LCD_ShowChar(x + (size / 2) * t, y, ' ', size, 0);
 800645c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006460:	085b      	lsrs	r3, r3, #1
 8006462:	b2db      	uxtb	r3, r3
 8006464:	b29b      	uxth	r3, r3
 8006466:	7dfa      	ldrb	r2, [r7, #23]
 8006468:	b292      	uxth	r2, r2
 800646a:	fb02 f303 	mul.w	r3, r2, r3
 800646e:	b29a      	uxth	r2, r3
 8006470:	89fb      	ldrh	r3, [r7, #14]
 8006472:	4413      	add	r3, r2
 8006474:	b298      	uxth	r0, r3
 8006476:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800647a:	89b9      	ldrh	r1, [r7, #12]
 800647c:	2300      	movs	r3, #0
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	4613      	mov	r3, r2
 8006482:	2220      	movs	r2, #32
 8006484:	f7ff feec 	bl	8006260 <LCD_ShowChar>
				continue;
 8006488:	e019      	b.n	80064be <LCD_ShowNum+0xca>
			} else
				enshow = 1;
 800648a:	2301      	movs	r3, #1
 800648c:	75bb      	strb	r3, [r7, #22]

		}
		LCD_ShowChar(x + (size / 2) * t, y, temp + '0', size, 0);
 800648e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006492:	085b      	lsrs	r3, r3, #1
 8006494:	b2db      	uxtb	r3, r3
 8006496:	b29b      	uxth	r3, r3
 8006498:	7dfa      	ldrb	r2, [r7, #23]
 800649a:	b292      	uxth	r2, r2
 800649c:	fb02 f303 	mul.w	r3, r2, r3
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	89fb      	ldrh	r3, [r7, #14]
 80064a4:	4413      	add	r3, r2
 80064a6:	b298      	uxth	r0, r3
 80064a8:	7d7b      	ldrb	r3, [r7, #21]
 80064aa:	3330      	adds	r3, #48	; 0x30
 80064ac:	b2da      	uxtb	r2, r3
 80064ae:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 80064b2:	89b9      	ldrh	r1, [r7, #12]
 80064b4:	2300      	movs	r3, #0
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	4623      	mov	r3, r4
 80064ba:	f7ff fed1 	bl	8006260 <LCD_ShowChar>
	for (t = 0; t < len; t++) {
 80064be:	7dfb      	ldrb	r3, [r7, #23]
 80064c0:	3301      	adds	r3, #1
 80064c2:	75fb      	strb	r3, [r7, #23]
 80064c4:	7dfa      	ldrb	r2, [r7, #23]
 80064c6:	79fb      	ldrb	r3, [r7, #7]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d3a3      	bcc.n	8006414 <LCD_ShowNum+0x20>
	}
}
 80064cc:	bf00      	nop
 80064ce:	371c      	adds	r7, #28
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd90      	pop	{r4, r7, pc}
 80064d4:	cccccccd 	.word	0xcccccccd

080064d8 <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 80064d8:	b590      	push	{r4, r7, lr}
 80064da:	b087      	sub	sp, #28
 80064dc:	af02      	add	r7, sp, #8
 80064de:	4604      	mov	r4, r0
 80064e0:	4608      	mov	r0, r1
 80064e2:	4611      	mov	r1, r2
 80064e4:	461a      	mov	r2, r3
 80064e6:	4623      	mov	r3, r4
 80064e8:	80fb      	strh	r3, [r7, #6]
 80064ea:	4603      	mov	r3, r0
 80064ec:	80bb      	strh	r3, [r7, #4]
 80064ee:	460b      	mov	r3, r1
 80064f0:	807b      	strh	r3, [r7, #2]
 80064f2:	4613      	mov	r3, r2
 80064f4:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 80064f6:	88fb      	ldrh	r3, [r7, #6]
 80064f8:	73fb      	strb	r3, [r7, #15]
	width += x;
 80064fa:	887a      	ldrh	r2, [r7, #2]
 80064fc:	88fb      	ldrh	r3, [r7, #6]
 80064fe:	4413      	add	r3, r2
 8006500:	807b      	strh	r3, [r7, #2]
	height += y;
 8006502:	883a      	ldrh	r2, [r7, #0]
 8006504:	88bb      	ldrh	r3, [r7, #4]
 8006506:	4413      	add	r3, r2
 8006508:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 800650a:	e025      	b.n	8006558 <LCD_ShowString+0x80>
	{
		if (x >= width) {
 800650c:	88fa      	ldrh	r2, [r7, #6]
 800650e:	887b      	ldrh	r3, [r7, #2]
 8006510:	429a      	cmp	r2, r3
 8006512:	d307      	bcc.n	8006524 <LCD_ShowString+0x4c>
			x = x0;
 8006514:	7bfb      	ldrb	r3, [r7, #15]
 8006516:	80fb      	strh	r3, [r7, #6]
			y += size;
 8006518:	f897 3020 	ldrb.w	r3, [r7, #32]
 800651c:	b29a      	uxth	r2, r3
 800651e:	88bb      	ldrh	r3, [r7, #4]
 8006520:	4413      	add	r3, r2
 8006522:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 8006524:	88ba      	ldrh	r2, [r7, #4]
 8006526:	883b      	ldrh	r3, [r7, #0]
 8006528:	429a      	cmp	r2, r3
 800652a:	d21e      	bcs.n	800656a <LCD_ShowString+0x92>
			break;	//退出
		LCD_ShowChar(x, y, *p, size, 0);
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	781a      	ldrb	r2, [r3, #0]
 8006530:	f897 4020 	ldrb.w	r4, [r7, #32]
 8006534:	88b9      	ldrh	r1, [r7, #4]
 8006536:	88f8      	ldrh	r0, [r7, #6]
 8006538:	2300      	movs	r3, #0
 800653a:	9300      	str	r3, [sp, #0]
 800653c:	4623      	mov	r3, r4
 800653e:	f7ff fe8f 	bl	8006260 <LCD_ShowChar>
		x += size / 2;
 8006542:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006546:	085b      	lsrs	r3, r3, #1
 8006548:	b2db      	uxtb	r3, r3
 800654a:	b29a      	uxth	r2, r3
 800654c:	88fb      	ldrh	r3, [r7, #6]
 800654e:	4413      	add	r3, r2
 8006550:	80fb      	strh	r3, [r7, #6]
		p++;
 8006552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006554:	3301      	adds	r3, #1
 8006556:	627b      	str	r3, [r7, #36]	; 0x24
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	2b7e      	cmp	r3, #126	; 0x7e
 800655e:	d805      	bhi.n	800656c <LCD_ShowString+0x94>
 8006560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	2b1f      	cmp	r3, #31
 8006566:	d8d1      	bhi.n	800650c <LCD_ShowString+0x34>
	}
}
 8006568:	e000      	b.n	800656c <LCD_ShowString+0x94>
			break;	//退出
 800656a:	bf00      	nop
}
 800656c:	bf00      	nop
 800656e:	3714      	adds	r7, #20
 8006570:	46bd      	mov	sp, r7
 8006572:	bd90      	pop	{r4, r7, pc}

08006574 <reset_flags>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void reset_flags() {
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af02      	add	r7, sp, #8
	send_flag = 0;
 800657a:	4b19      	ldr	r3, [pc, #100]	; (80065e0 <reset_flags+0x6c>)
 800657c:	2200      	movs	r2, #0
 800657e:	701a      	strb	r2, [r3, #0]
	recv_flag = 0;
 8006580:	4b18      	ldr	r3, [pc, #96]	; (80065e4 <reset_flags+0x70>)
 8006582:	2200      	movs	r2, #0
 8006584:	701a      	strb	r2, [r3, #0]
	state = 0;
 8006586:	4b18      	ldr	r3, [pc, #96]	; (80065e8 <reset_flags+0x74>)
 8006588:	2200      	movs	r2, #0
 800658a:	601a      	str	r2, [r3, #0]
	conn_init_flag = 0;
 800658c:	4b17      	ldr	r3, [pc, #92]	; (80065ec <reset_flags+0x78>)
 800658e:	2200      	movs	r2, #0
 8006590:	601a      	str	r2, [r3, #0]
	counter = 0;
 8006592:	4b17      	ldr	r3, [pc, #92]	; (80065f0 <reset_flags+0x7c>)
 8006594:	2200      	movs	r2, #0
 8006596:	701a      	strb	r2, [r3, #0]
	lastOutput = 0;
 8006598:	4b16      	ldr	r3, [pc, #88]	; (80065f4 <reset_flags+0x80>)
 800659a:	2200      	movs	r2, #0
 800659c:	601a      	str	r2, [r3, #0]
	cmd_flag = 0;
 800659e:	4b16      	ldr	r3, [pc, #88]	; (80065f8 <reset_flags+0x84>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	701a      	strb	r2, [r3, #0]

	init = 1;
 80065a4:	4b15      	ldr	r3, [pc, #84]	; (80065fc <reset_flags+0x88>)
 80065a6:	2201      	movs	r2, #1
 80065a8:	701a      	strb	r2, [r3, #0]
	LCD_Rec();
 80065aa:	f000 f865 	bl	8006678 <LCD_Rec>
//	NRF24L01_TX_Mode();
	NRF24L01_Init();
 80065ae:	f001 f855 	bl	800765c <NRF24L01_Init>
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80065b2:	2201      	movs	r2, #1
 80065b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80065b8:	4811      	ldr	r0, [pc, #68]	; (8006600 <reset_flags+0x8c>)
 80065ba:	f002 f918 	bl	80087ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80065be:	2201      	movs	r2, #1
 80065c0:	2104      	movs	r1, #4
 80065c2:	4810      	ldr	r0, [pc, #64]	; (8006604 <reset_flags+0x90>)
 80065c4:	f002 f913 	bl	80087ee <HAL_GPIO_WritePin>
	LCD_Fill(181, 21, 199, 29, YELLOW);
 80065c8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	231d      	movs	r3, #29
 80065d0:	22c7      	movs	r2, #199	; 0xc7
 80065d2:	2115      	movs	r1, #21
 80065d4:	20b5      	movs	r0, #181	; 0xb5
 80065d6:	f7ff fd57 	bl	8006088 <LCD_Fill>
}
 80065da:	bf00      	nop
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	200005c4 	.word	0x200005c4
 80065e4:	200005c5 	.word	0x200005c5
 80065e8:	200005b8 	.word	0x200005b8
 80065ec:	200005bc 	.word	0x200005bc
 80065f0:	200005b4 	.word	0x200005b4
 80065f4:	200005b0 	.word	0x200005b0
 80065f8:	200005ae 	.word	0x200005ae
 80065fc:	20000002 	.word	0x20000002
 8006600:	40010800 	.word	0x40010800
 8006604:	40011400 	.word	0x40011400

08006608 <substr>:
int substr(char dst[], char src[], int start, int len) {
 8006608:	b580      	push	{r7, lr}
 800660a:	b088      	sub	sp, #32
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	607a      	str	r2, [r7, #4]
 8006614:	603b      	str	r3, [r7, #0]
	char *p = src + start;   //定义指针变量指向�??要提取的字符的地�??
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	4413      	add	r3, r2
 800661c:	61bb      	str	r3, [r7, #24]
	int n = strlen(p);       //求字符串长度
 800661e:	69b8      	ldr	r0, [r7, #24]
 8006620:	f7f9 fe02 	bl	8000228 <strlen>
 8006624:	4603      	mov	r3, r0
 8006626:	617b      	str	r3, [r7, #20]
	int i = 0;
 8006628:	2300      	movs	r3, #0
 800662a:	61fb      	str	r3, [r7, #28]
	if (n < len) {
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	429a      	cmp	r2, r3
 8006632:	da13      	bge.n	800665c <substr+0x54>
		len = n;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	603b      	str	r3, [r7, #0]

	}
	while (len != 0) {
 8006638:	e010      	b.n	800665c <substr+0x54>
		dst[i] = src[i + start];
 800663a:	69fa      	ldr	r2, [r7, #28]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4413      	add	r3, r2
 8006640:	461a      	mov	r2, r3
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	441a      	add	r2, r3
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	68f9      	ldr	r1, [r7, #12]
 800664a:	440b      	add	r3, r1
 800664c:	7812      	ldrb	r2, [r2, #0]
 800664e:	701a      	strb	r2, [r3, #0]
		len--;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	3b01      	subs	r3, #1
 8006654:	603b      	str	r3, [r7, #0]
		i++;
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	3301      	adds	r3, #1
 800665a:	61fb      	str	r3, [r7, #28]
	while (len != 0) {
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1eb      	bne.n	800663a <substr+0x32>
	}                        //复制字符串到dst�??
	dst[i] = '\0';
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	4413      	add	r3, r2
 8006668:	2200      	movs	r2, #0
 800666a:	701a      	strb	r2, [r3, #0]
	return 0;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3720      	adds	r7, #32
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
	...

08006678 <LCD_Rec>:

void LCD_Rec() {
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af02      	add	r7, sp, #8
	if (init == 1) {
 800667e:	4b20      	ldr	r3, [pc, #128]	; (8006700 <LCD_Rec+0x88>)
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d139      	bne.n	80066fa <LCD_Rec+0x82>
		LCD_Clear(GRAY);
 8006686:	f248 4030 	movw	r0, #33840	; 0x8430
 800668a:	f7ff fc9b 	bl	8005fc4 <LCD_Clear>

		LCD_Fill(10, 10, 220, 90, WHITE);
 800668e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006692:	9300      	str	r3, [sp, #0]
 8006694:	235a      	movs	r3, #90	; 0x5a
 8006696:	22dc      	movs	r2, #220	; 0xdc
 8006698:	210a      	movs	r1, #10
 800669a:	200a      	movs	r0, #10
 800669c:	f7ff fcf4 	bl	8006088 <LCD_Fill>
		LCD_Fill(5, 5, 10, 95, YELLOW);
 80066a0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80066a4:	9300      	str	r3, [sp, #0]
 80066a6:	235f      	movs	r3, #95	; 0x5f
 80066a8:	220a      	movs	r2, #10
 80066aa:	2105      	movs	r1, #5
 80066ac:	2005      	movs	r0, #5
 80066ae:	f7ff fceb 	bl	8006088 <LCD_Fill>
		LCD_Fill(10, 5, 50, 10, YELLOW);
 80066b2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	230a      	movs	r3, #10
 80066ba:	2232      	movs	r2, #50	; 0x32
 80066bc:	2105      	movs	r1, #5
 80066be:	200a      	movs	r0, #10
 80066c0:	f7ff fce2 	bl	8006088 <LCD_Fill>
		LCD_Fill(230, 100, 240, 310, YELLOW);
 80066c4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80066c8:	9300      	str	r3, [sp, #0]
 80066ca:	f44f 739b 	mov.w	r3, #310	; 0x136
 80066ce:	22f0      	movs	r2, #240	; 0xf0
 80066d0:	2164      	movs	r1, #100	; 0x64
 80066d2:	20e6      	movs	r0, #230	; 0xe6
 80066d4:	f7ff fcd8 	bl	8006088 <LCD_Fill>
		LCD_Fill(100, 310, 240, 320, YELLOW);
 80066d8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80066e2:	22f0      	movs	r2, #240	; 0xf0
 80066e4:	f44f 719b 	mov.w	r1, #310	; 0x136
 80066e8:	2064      	movs	r0, #100	; 0x64
 80066ea:	f7ff fccd 	bl	8006088 <LCD_Fill>
		POINT_COLOR = BLACK;
 80066ee:	4b05      	ldr	r3, [pc, #20]	; (8006704 <LCD_Rec+0x8c>)
 80066f0:	2200      	movs	r2, #0
 80066f2:	801a      	strh	r2, [r3, #0]
		init = 0;
 80066f4:	4b02      	ldr	r3, [pc, #8]	; (8006700 <LCD_Rec+0x88>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	701a      	strb	r2, [r3, #0]

	}
}
 80066fa:	bf00      	nop
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	20000002 	.word	0x20000002
 8006704:	200005ac 	.word	0x200005ac

08006708 <LCD_Head>:
void LCD_Head() {
 8006708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800670a:	b08d      	sub	sp, #52	; 0x34
 800670c:	af04      	add	r7, sp, #16
	uint8_t temp[32];
	POINT_COLOR = RED;
 800670e:	4b49      	ldr	r3, [pc, #292]	; (8006834 <LCD_Head+0x12c>)
 8006710:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006714:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(15, 15, 200, 24, 24, (uint8_t*) "Group: 30");
 8006716:	4b48      	ldr	r3, [pc, #288]	; (8006838 <LCD_Head+0x130>)
 8006718:	9301      	str	r3, [sp, #4]
 800671a:	2318      	movs	r3, #24
 800671c:	9300      	str	r3, [sp, #0]
 800671e:	2318      	movs	r3, #24
 8006720:	22c8      	movs	r2, #200	; 0xc8
 8006722:	210f      	movs	r1, #15
 8006724:	200f      	movs	r0, #15
 8006726:	f7ff fed7 	bl	80064d8 <LCD_ShowString>
	LCD_ShowNum(155, 20, TLE_SCALE, 3, 12);
 800672a:	4b44      	ldr	r3, [pc, #272]	; (800683c <LCD_Head+0x134>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	461a      	mov	r2, r3
 8006730:	230c      	movs	r3, #12
 8006732:	9300      	str	r3, [sp, #0]
 8006734:	2303      	movs	r3, #3
 8006736:	2114      	movs	r1, #20
 8006738:	209b      	movs	r0, #155	; 0x9b
 800673a:	f7ff fe5b 	bl	80063f4 <LCD_ShowNum>
	char LocalMac[] = { };
	POINT_COLOR = BLUE;
 800673e:	4b3d      	ldr	r3, [pc, #244]	; (8006834 <LCD_Head+0x12c>)
 8006740:	221f      	movs	r2, #31
 8006742:	801a      	strh	r2, [r3, #0]
	sprintf(temp, "S: %02x.%02x.%02x.%02x.%02x / %d", TX_ADDRESS[0],
 8006744:	4b3e      	ldr	r3, [pc, #248]	; (8006840 <LCD_Head+0x138>)
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	461d      	mov	r5, r3
			TX_ADDRESS[1], TX_ADDRESS[2], TX_ADDRESS[3], TX_ADDRESS[4],
 800674a:	4b3d      	ldr	r3, [pc, #244]	; (8006840 <LCD_Head+0x138>)
 800674c:	785b      	ldrb	r3, [r3, #1]
	sprintf(temp, "S: %02x.%02x.%02x.%02x.%02x / %d", TX_ADDRESS[0],
 800674e:	461e      	mov	r6, r3
			TX_ADDRESS[1], TX_ADDRESS[2], TX_ADDRESS[3], TX_ADDRESS[4],
 8006750:	4b3b      	ldr	r3, [pc, #236]	; (8006840 <LCD_Head+0x138>)
 8006752:	789b      	ldrb	r3, [r3, #2]
	sprintf(temp, "S: %02x.%02x.%02x.%02x.%02x / %d", TX_ADDRESS[0],
 8006754:	461a      	mov	r2, r3
			TX_ADDRESS[1], TX_ADDRESS[2], TX_ADDRESS[3], TX_ADDRESS[4],
 8006756:	4b3a      	ldr	r3, [pc, #232]	; (8006840 <LCD_Head+0x138>)
 8006758:	78db      	ldrb	r3, [r3, #3]
	sprintf(temp, "S: %02x.%02x.%02x.%02x.%02x / %d", TX_ADDRESS[0],
 800675a:	4619      	mov	r1, r3
			TX_ADDRESS[1], TX_ADDRESS[2], TX_ADDRESS[3], TX_ADDRESS[4],
 800675c:	4b38      	ldr	r3, [pc, #224]	; (8006840 <LCD_Head+0x138>)
 800675e:	791b      	ldrb	r3, [r3, #4]
	sprintf(temp, "S: %02x.%02x.%02x.%02x.%02x / %d", TX_ADDRESS[0],
 8006760:	461c      	mov	r4, r3
 8006762:	4b38      	ldr	r3, [pc, #224]	; (8006844 <LCD_Head+0x13c>)
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	4638      	mov	r0, r7
 8006768:	9303      	str	r3, [sp, #12]
 800676a:	9402      	str	r4, [sp, #8]
 800676c:	9101      	str	r1, [sp, #4]
 800676e:	9200      	str	r2, [sp, #0]
 8006770:	4633      	mov	r3, r6
 8006772:	462a      	mov	r2, r5
 8006774:	4934      	ldr	r1, [pc, #208]	; (8006848 <LCD_Head+0x140>)
 8006776:	f003 fd6d 	bl	800a254 <siprintf>
			send_ch);
	LCD_ShowString(55, 50, 200, 24, 12, (uint8_t*) temp);
 800677a:	463b      	mov	r3, r7
 800677c:	9301      	str	r3, [sp, #4]
 800677e:	230c      	movs	r3, #12
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	2318      	movs	r3, #24
 8006784:	22c8      	movs	r2, #200	; 0xc8
 8006786:	2132      	movs	r1, #50	; 0x32
 8006788:	2037      	movs	r0, #55	; 0x37
 800678a:	f7ff fea5 	bl	80064d8 <LCD_ShowString>

	sprintf(temp, "R: %02x.%02x.%02x.%02x.%02x / %d", RX_ADDRESS[0],
 800678e:	4b2f      	ldr	r3, [pc, #188]	; (800684c <LCD_Head+0x144>)
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	461d      	mov	r5, r3
			RX_ADDRESS[1], RX_ADDRESS[2], RX_ADDRESS[3], RX_ADDRESS[4],
 8006794:	4b2d      	ldr	r3, [pc, #180]	; (800684c <LCD_Head+0x144>)
 8006796:	785b      	ldrb	r3, [r3, #1]
	sprintf(temp, "R: %02x.%02x.%02x.%02x.%02x / %d", RX_ADDRESS[0],
 8006798:	461e      	mov	r6, r3
			RX_ADDRESS[1], RX_ADDRESS[2], RX_ADDRESS[3], RX_ADDRESS[4],
 800679a:	4b2c      	ldr	r3, [pc, #176]	; (800684c <LCD_Head+0x144>)
 800679c:	789b      	ldrb	r3, [r3, #2]
	sprintf(temp, "R: %02x.%02x.%02x.%02x.%02x / %d", RX_ADDRESS[0],
 800679e:	461a      	mov	r2, r3
			RX_ADDRESS[1], RX_ADDRESS[2], RX_ADDRESS[3], RX_ADDRESS[4],
 80067a0:	4b2a      	ldr	r3, [pc, #168]	; (800684c <LCD_Head+0x144>)
 80067a2:	78db      	ldrb	r3, [r3, #3]
	sprintf(temp, "R: %02x.%02x.%02x.%02x.%02x / %d", RX_ADDRESS[0],
 80067a4:	4619      	mov	r1, r3
			RX_ADDRESS[1], RX_ADDRESS[2], RX_ADDRESS[3], RX_ADDRESS[4],
 80067a6:	4b29      	ldr	r3, [pc, #164]	; (800684c <LCD_Head+0x144>)
 80067a8:	791b      	ldrb	r3, [r3, #4]
	sprintf(temp, "R: %02x.%02x.%02x.%02x.%02x / %d", RX_ADDRESS[0],
 80067aa:	461c      	mov	r4, r3
 80067ac:	4b28      	ldr	r3, [pc, #160]	; (8006850 <LCD_Head+0x148>)
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	4638      	mov	r0, r7
 80067b2:	9303      	str	r3, [sp, #12]
 80067b4:	9402      	str	r4, [sp, #8]
 80067b6:	9101      	str	r1, [sp, #4]
 80067b8:	9200      	str	r2, [sp, #0]
 80067ba:	4633      	mov	r3, r6
 80067bc:	462a      	mov	r2, r5
 80067be:	4925      	ldr	r1, [pc, #148]	; (8006854 <LCD_Head+0x14c>)
 80067c0:	f003 fd48 	bl	800a254 <siprintf>
			recv_ch);
	LCD_ShowString(55, 65, 200, 24, 12, (uint8_t*) temp);
 80067c4:	463b      	mov	r3, r7
 80067c6:	9301      	str	r3, [sp, #4]
 80067c8:	230c      	movs	r3, #12
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	2318      	movs	r3, #24
 80067ce:	22c8      	movs	r2, #200	; 0xc8
 80067d0:	2141      	movs	r1, #65	; 0x41
 80067d2:	2037      	movs	r0, #55	; 0x37
 80067d4:	f7ff fe80 	bl	80064d8 <LCD_ShowString>
	/*LCD_ShowString(10, 45, 200, 24, 12, (uint8_t*) TX_ADDRESS); //local mac
	 LCD_ShowString(10, 60, 200, 24, 12, (uint8_t*) RX_ADDRESS); //pair mac
	 LCD_ShowString(70, 45, 200, 24, 12, (uint8_t*) recv_ch); //local ch
	 LCD_ShowString(70, 60, 200, 24, 12, (uint8_t*) send_ch); //pair ch*/

	if (NRF24L01_Check() == 1) {
 80067d8:	f000 ffba 	bl	8007750 <NRF24L01_Check>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d109      	bne.n	80067f6 <LCD_Head+0xee>
//		POINT_COLOR = RED;
//		LCD_DrawRectangle(180, 20, 200, 30);
		LCD_Fill(181, 21, 199, 29, RED);
 80067e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	231d      	movs	r3, #29
 80067ea:	22c7      	movs	r2, #199	; 0xc7
 80067ec:	2115      	movs	r1, #21
 80067ee:	20b5      	movs	r0, #181	; 0xb5
 80067f0:	f7ff fc4a 	bl	8006088 <LCD_Fill>
		} else {
			LCD_Fill(181, 21, 199, 29, YELLOW);
		}

	}
}
 80067f4:	e01a      	b.n	800682c <LCD_Head+0x124>
		if (state == STATE_TRY_SEND || state == STATE_TRY_RECV) {
 80067f6:	4b18      	ldr	r3, [pc, #96]	; (8006858 <LCD_Head+0x150>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2b04      	cmp	r3, #4
 80067fc:	d003      	beq.n	8006806 <LCD_Head+0xfe>
 80067fe:	4b16      	ldr	r3, [pc, #88]	; (8006858 <LCD_Head+0x150>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b05      	cmp	r3, #5
 8006804:	d109      	bne.n	800681a <LCD_Head+0x112>
			LCD_Fill(181, 21, 199, 29, GREEN);
 8006806:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	231d      	movs	r3, #29
 800680e:	22c7      	movs	r2, #199	; 0xc7
 8006810:	2115      	movs	r1, #21
 8006812:	20b5      	movs	r0, #181	; 0xb5
 8006814:	f7ff fc38 	bl	8006088 <LCD_Fill>
}
 8006818:	e008      	b.n	800682c <LCD_Head+0x124>
			LCD_Fill(181, 21, 199, 29, YELLOW);
 800681a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	231d      	movs	r3, #29
 8006822:	22c7      	movs	r2, #199	; 0xc7
 8006824:	2115      	movs	r1, #21
 8006826:	20b5      	movs	r0, #181	; 0xb5
 8006828:	f7ff fc2e 	bl	8006088 <LCD_Fill>
}
 800682c:	bf00      	nop
 800682e:	3724      	adds	r7, #36	; 0x24
 8006830:	46bd      	mov	sp, r7
 8006832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006834:	200005ac 	.word	0x200005ac
 8006838:	0800b584 	.word	0x0800b584
 800683c:	20000028 	.word	0x20000028
 8006840:	200003a4 	.word	0x200003a4
 8006844:	200003b2 	.word	0x200003b2
 8006848:	0800b590 	.word	0x0800b590
 800684c:	200003ac 	.word	0x200003ac
 8006850:	200003b1 	.word	0x200003b1
 8006854:	0800b5b4 	.word	0x0800b5b4
 8006858:	200005b8 	.word	0x200005b8

0800685c <LCD_Unconn>:

void LCD_Unconn() {
 800685c:	b580      	push	{r7, lr}
 800685e:	af00      	add	r7, sp, #0
	//LCD_Head();
	LCD_Rec();
 8006860:	f7ff ff0a 	bl	8006678 <LCD_Rec>
//	LCD_ShowString(10, 90, 200, 24, 12,
//			(uint8_t*) "Use \"\" to set new pair MAC");
//	LCD_ShowString(10, 105, 200, 24, 12,
//			(uint8_t*) "Use \"\" to set new channel");

}
 8006864:	bf00      	nop
 8006866:	bd80      	pop	{r7, pc}

08006868 <LCD_Conn>:

void LCD_Conn() {
 8006868:	b580      	push	{r7, lr}
 800686a:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 800686e:	af02      	add	r7, sp, #8
	if (send_flag == 0 && recv_flag == 0) {
 8006870:	4b8b      	ldr	r3, [pc, #556]	; (8006aa0 <LCD_Conn+0x238>)
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d10b      	bne.n	8006890 <LCD_Conn+0x28>
 8006878:	4b8a      	ldr	r3, [pc, #552]	; (8006aa4 <LCD_Conn+0x23c>)
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d107      	bne.n	8006890 <LCD_Conn+0x28>
		if (conn_init_flag == 0) {
 8006880:	4b89      	ldr	r3, [pc, #548]	; (8006aa8 <LCD_Conn+0x240>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 8106 	beq.w	8006a96 <LCD_Conn+0x22e>
			return;
		} else {
			conn_init_flag = 0;
 800688a:	4b87      	ldr	r3, [pc, #540]	; (8006aa8 <LCD_Conn+0x240>)
 800688c:	2200      	movs	r2, #0
 800688e:	601a      	str	r2, [r3, #0]
		}

	}
	char *white_space = "                    ";
 8006890:	4b86      	ldr	r3, [pc, #536]	; (8006aac <LCD_Conn+0x244>)
 8006892:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
	char inputData[1024] = { 0 };
 8006896:	463b      	mov	r3, r7
 8006898:	4618      	mov	r0, r3
 800689a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800689e:	461a      	mov	r2, r3
 80068a0:	2100      	movs	r1, #0
 80068a2:	f003 fc3f 	bl	800a124 <memset>
	//LCD_Head();

	POINT_COLOR = YELLOW;
 80068a6:	4b82      	ldr	r3, [pc, #520]	; (8006ab0 <LCD_Conn+0x248>)
 80068a8:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80068ac:	801a      	strh	r2, [r3, #0]
	LCD_Color_Fill(10, 110, 220, 300, WHITE);
 80068ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80068b8:	22dc      	movs	r2, #220	; 0xdc
 80068ba:	216e      	movs	r1, #110	; 0x6e
 80068bc:	200a      	movs	r0, #10
 80068be:	f7ff fc6f 	bl	80061a0 <LCD_Color_Fill>

	//inputData = {};

	if (send_flag == 1 && state == STATE_TRY_SEND) {
 80068c2:	4b77      	ldr	r3, [pc, #476]	; (8006aa0 <LCD_Conn+0x238>)
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d167      	bne.n	800699a <LCD_Conn+0x132>
 80068ca:	4b7a      	ldr	r3, [pc, #488]	; (8006ab4 <LCD_Conn+0x24c>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b04      	cmp	r3, #4
 80068d0:	d163      	bne.n	800699a <LCD_Conn+0x132>
		int size_s = strlen(send_buff);
 80068d2:	4879      	ldr	r0, [pc, #484]	; (8006ab8 <LCD_Conn+0x250>)
 80068d4:	f7f9 fca8 	bl	8000228 <strlen>
 80068d8:	4603      	mov	r3, r0
 80068da:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
		int start_s = 0;
 80068de:	2300      	movs	r3, #0
 80068e0:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418

		while (size_s > 0) {
 80068e4:	e055      	b.n	8006992 <LCD_Conn+0x12a>
			if (size_s < l) {
 80068e6:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80068ea:	2b15      	cmp	r3, #21
 80068ec:	dc2a      	bgt.n	8006944 <LCD_Conn+0xdc>
				strcpy(outputData[lastOutput], white_space);
 80068ee:	4b73      	ldr	r3, [pc, #460]	; (8006abc <LCD_Conn+0x254>)
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	4613      	mov	r3, r2
 80068f4:	005b      	lsls	r3, r3, #1
 80068f6:	4413      	add	r3, r2
 80068f8:	00db      	lsls	r3, r3, #3
 80068fa:	1a9b      	subs	r3, r3, r2
 80068fc:	4a70      	ldr	r2, [pc, #448]	; (8006ac0 <LCD_Conn+0x258>)
 80068fe:	4413      	add	r3, r2
 8006900:	f8d7 1404 	ldr.w	r1, [r7, #1028]	; 0x404
 8006904:	4618      	mov	r0, r3
 8006906:	f003 fcc5 	bl	800a294 <strcpy>
				int white_space_size = l - size_s;
 800690a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800690e:	f1c3 0316 	rsb	r3, r3, #22
 8006912:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
				substr(outputData[lastOutput] + white_space_size, send_buff,
 8006916:	4b69      	ldr	r3, [pc, #420]	; (8006abc <LCD_Conn+0x254>)
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	4613      	mov	r3, r2
 800691c:	005b      	lsls	r3, r3, #1
 800691e:	4413      	add	r3, r2
 8006920:	00db      	lsls	r3, r3, #3
 8006922:	1a9b      	subs	r3, r3, r2
 8006924:	4a66      	ldr	r2, [pc, #408]	; (8006ac0 <LCD_Conn+0x258>)
 8006926:	441a      	add	r2, r3
 8006928:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 800692c:	18d0      	adds	r0, r2, r3
 800692e:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8006932:	2216      	movs	r2, #22
 8006934:	fb02 f203 	mul.w	r2, r2, r3
 8006938:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800693c:	495e      	ldr	r1, [pc, #376]	; (8006ab8 <LCD_Conn+0x250>)
 800693e:	f7ff fe63 	bl	8006608 <substr>
 8006942:	e011      	b.n	8006968 <LCD_Conn+0x100>
						start_s * l, size_s);
			} else {
				substr(outputData[lastOutput], send_buff, start_s * l, l);
 8006944:	4b5d      	ldr	r3, [pc, #372]	; (8006abc <LCD_Conn+0x254>)
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	4613      	mov	r3, r2
 800694a:	005b      	lsls	r3, r3, #1
 800694c:	4413      	add	r3, r2
 800694e:	00db      	lsls	r3, r3, #3
 8006950:	1a9b      	subs	r3, r3, r2
 8006952:	4a5b      	ldr	r2, [pc, #364]	; (8006ac0 <LCD_Conn+0x258>)
 8006954:	1898      	adds	r0, r3, r2
 8006956:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 800695a:	2216      	movs	r2, #22
 800695c:	fb02 f203 	mul.w	r2, r2, r3
 8006960:	2316      	movs	r3, #22
 8006962:	4955      	ldr	r1, [pc, #340]	; (8006ab8 <LCD_Conn+0x250>)
 8006964:	f7ff fe50 	bl	8006608 <substr>
			}
			fontColor[lastOutput] = 0;
 8006968:	4b54      	ldr	r3, [pc, #336]	; (8006abc <LCD_Conn+0x254>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a55      	ldr	r2, [pc, #340]	; (8006ac4 <LCD_Conn+0x25c>)
 800696e:	2100      	movs	r1, #0
 8006970:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			size_s -= l;
 8006974:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8006978:	3b16      	subs	r3, #22
 800697a:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
			++start_s;
 800697e:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8006982:	3301      	adds	r3, #1
 8006984:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418

			++lastOutput;
 8006988:	4b4c      	ldr	r3, [pc, #304]	; (8006abc <LCD_Conn+0x254>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	3301      	adds	r3, #1
 800698e:	4a4b      	ldr	r2, [pc, #300]	; (8006abc <LCD_Conn+0x254>)
 8006990:	6013      	str	r3, [r2, #0]
		while (size_s > 0) {
 8006992:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8006996:	2b00      	cmp	r3, #0
 8006998:	dca5      	bgt.n	80068e6 <LCD_Conn+0x7e>

		}
	}                        //send
	if (recv_flag == 1 && state == STATE_TRY_RECV) {
 800699a:	4b42      	ldr	r3, [pc, #264]	; (8006aa4 <LCD_Conn+0x23c>)
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d13b      	bne.n	8006a1a <LCD_Conn+0x1b2>
 80069a2:	4b44      	ldr	r3, [pc, #272]	; (8006ab4 <LCD_Conn+0x24c>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b05      	cmp	r3, #5
 80069a8:	d137      	bne.n	8006a1a <LCD_Conn+0x1b2>
		int size_r = strlen(recv_buff);
 80069aa:	4847      	ldr	r0, [pc, #284]	; (8006ac8 <LCD_Conn+0x260>)
 80069ac:	f7f9 fc3c 	bl	8000228 <strlen>
 80069b0:	4603      	mov	r3, r0
 80069b2:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
		int start_r = 0;
 80069b6:	2300      	movs	r3, #0
 80069b8:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
		while (size_r > 0) {
 80069bc:	e026      	b.n	8006a0c <LCD_Conn+0x1a4>
			substr(outputData[lastOutput], recv_buff, start_r * l, l);
 80069be:	4b3f      	ldr	r3, [pc, #252]	; (8006abc <LCD_Conn+0x254>)
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	4613      	mov	r3, r2
 80069c4:	005b      	lsls	r3, r3, #1
 80069c6:	4413      	add	r3, r2
 80069c8:	00db      	lsls	r3, r3, #3
 80069ca:	1a9b      	subs	r3, r3, r2
 80069cc:	4a3c      	ldr	r2, [pc, #240]	; (8006ac0 <LCD_Conn+0x258>)
 80069ce:	1898      	adds	r0, r3, r2
 80069d0:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80069d4:	2216      	movs	r2, #22
 80069d6:	fb02 f203 	mul.w	r2, r2, r3
 80069da:	2316      	movs	r3, #22
 80069dc:	493a      	ldr	r1, [pc, #232]	; (8006ac8 <LCD_Conn+0x260>)
 80069de:	f7ff fe13 	bl	8006608 <substr>
			++start_r;
 80069e2:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80069e6:	3301      	adds	r3, #1
 80069e8:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
			size_r -= l;
 80069ec:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80069f0:	3b16      	subs	r3, #22
 80069f2:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
			fontColor[lastOutput] = 1;
 80069f6:	4b31      	ldr	r3, [pc, #196]	; (8006abc <LCD_Conn+0x254>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a32      	ldr	r2, [pc, #200]	; (8006ac4 <LCD_Conn+0x25c>)
 80069fc:	2101      	movs	r1, #1
 80069fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			++lastOutput;
 8006a02:	4b2e      	ldr	r3, [pc, #184]	; (8006abc <LCD_Conn+0x254>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	3301      	adds	r3, #1
 8006a08:	4a2c      	ldr	r2, [pc, #176]	; (8006abc <LCD_Conn+0x254>)
 8006a0a:	6013      	str	r3, [r2, #0]
		while (size_r > 0) {
 8006a0c:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	dcd4      	bgt.n	80069be <LCD_Conn+0x156>
		} //receive
		recv_flag = 0;
 8006a14:	4b23      	ldr	r3, [pc, #140]	; (8006aa4 <LCD_Conn+0x23c>)
 8006a16:	2200      	movs	r2, #0
 8006a18:	701a      	strb	r2, [r3, #0]
	}
	int outpoint = lastOutput > 8 ? lastOutput - 8 : 0;
 8006a1a:	4b28      	ldr	r3, [pc, #160]	; (8006abc <LCD_Conn+0x254>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2b08      	cmp	r3, #8
 8006a20:	bfb8      	it	lt
 8006a22:	2308      	movlt	r3, #8
 8006a24:	3b08      	subs	r3, #8
 8006a26:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	int y = 110;
 8006a2a:	236e      	movs	r3, #110	; 0x6e
 8006a2c:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408

	while (outpoint < lastOutput) {
 8006a30:	e02a      	b.n	8006a88 <LCD_Conn+0x220>
		POINT_COLOR = fontColor[outpoint] == 0 ? BRRED : BLACK;
 8006a32:	4a24      	ldr	r2, [pc, #144]	; (8006ac4 <LCD_Conn+0x25c>)
 8006a34:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8006a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d102      	bne.n	8006a46 <LCD_Conn+0x1de>
 8006a40:	f64f 4207 	movw	r2, #64519	; 0xfc07
 8006a44:	e000      	b.n	8006a48 <LCD_Conn+0x1e0>
 8006a46:	2200      	movs	r2, #0
 8006a48:	4b19      	ldr	r3, [pc, #100]	; (8006ab0 <LCD_Conn+0x248>)
 8006a4a:	801a      	strh	r2, [r3, #0]
		LCD_ShowString(25, y, 200, 15, 16, (uint8_t*) outputData[outpoint]);
 8006a4c:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8006a50:	b299      	uxth	r1, r3
 8006a52:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8006a56:	4613      	mov	r3, r2
 8006a58:	005b      	lsls	r3, r3, #1
 8006a5a:	4413      	add	r3, r2
 8006a5c:	00db      	lsls	r3, r3, #3
 8006a5e:	1a9b      	subs	r3, r3, r2
 8006a60:	4a17      	ldr	r2, [pc, #92]	; (8006ac0 <LCD_Conn+0x258>)
 8006a62:	4413      	add	r3, r2
 8006a64:	9301      	str	r3, [sp, #4]
 8006a66:	2310      	movs	r3, #16
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	230f      	movs	r3, #15
 8006a6c:	22c8      	movs	r2, #200	; 0xc8
 8006a6e:	2019      	movs	r0, #25
 8006a70:	f7ff fd32 	bl	80064d8 <LCD_ShowString>
		y += 24;
 8006a74:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8006a78:	3318      	adds	r3, #24
 8006a7a:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
		++outpoint;
 8006a7e:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8006a82:	3301      	adds	r3, #1
 8006a84:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	while (outpoint < lastOutput) {
 8006a88:	4b0c      	ldr	r3, [pc, #48]	; (8006abc <LCD_Conn+0x254>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8006a90:	429a      	cmp	r2, r3
 8006a92:	dbce      	blt.n	8006a32 <LCD_Conn+0x1ca>
 8006a94:	e000      	b.n	8006a98 <LCD_Conn+0x230>
			return;
 8006a96:	bf00      	nop
	}
	//LCD_ShowString(10, 130, 200, 10, 16, (uint8_t*) "SPACE");

}
 8006a98:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	200005c4 	.word	0x200005c4
 8006aa4:	200005c5 	.word	0x200005c5
 8006aa8:	200005bc 	.word	0x200005bc
 8006aac:	0800b5d8 	.word	0x0800b5d8
 8006ab0:	200005ac 	.word	0x200005ac
 8006ab4:	200005b8 	.word	0x200005b8
 8006ab8:	2000006c 	.word	0x2000006c
 8006abc:	200005b0 	.word	0x200005b0
 8006ac0:	20000798 	.word	0x20000798
 8006ac4:	200005e4 	.word	0x200005e4
 8006ac8:	200000a8 	.word	0x200000a8

08006acc <get_hex_num>:

uint8_t get_hex_num(uint8_t c) {
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	71fb      	strb	r3, [r7, #7]
	if (c >= '0' && c <= '9') {
 8006ad6:	79fb      	ldrb	r3, [r7, #7]
 8006ad8:	2b2f      	cmp	r3, #47	; 0x2f
 8006ada:	d906      	bls.n	8006aea <get_hex_num+0x1e>
 8006adc:	79fb      	ldrb	r3, [r7, #7]
 8006ade:	2b39      	cmp	r3, #57	; 0x39
 8006ae0:	d803      	bhi.n	8006aea <get_hex_num+0x1e>
		return (uint8_t) (c - '0');
 8006ae2:	79fb      	ldrb	r3, [r7, #7]
 8006ae4:	3b30      	subs	r3, #48	; 0x30
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	e00a      	b.n	8006b00 <get_hex_num+0x34>
	} else if (c >= 'a' && c < 'z') {
 8006aea:	79fb      	ldrb	r3, [r7, #7]
 8006aec:	2b60      	cmp	r3, #96	; 0x60
 8006aee:	d906      	bls.n	8006afe <get_hex_num+0x32>
 8006af0:	79fb      	ldrb	r3, [r7, #7]
 8006af2:	2b79      	cmp	r3, #121	; 0x79
 8006af4:	d803      	bhi.n	8006afe <get_hex_num+0x32>
		return (uint8_t) (c - 'a' + 10);
 8006af6:	79fb      	ldrb	r3, [r7, #7]
 8006af8:	3b57      	subs	r3, #87	; 0x57
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	e000      	b.n	8006b00 <get_hex_num+0x34>
	}
	return (uint8_t) 1;
 8006afe:	2301      	movs	r3, #1
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bc80      	pop	{r7}
 8006b08:	4770      	bx	lr
	...

08006b0c <LED_control>:

void LED_control() {
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	af00      	add	r7, sp, #0
	if (counter % 20 == 0) {
 8006b10:	4b23      	ldr	r3, [pc, #140]	; (8006ba0 <LED_control+0x94>)
 8006b12:	781a      	ldrb	r2, [r3, #0]
 8006b14:	4b23      	ldr	r3, [pc, #140]	; (8006ba4 <LED_control+0x98>)
 8006b16:	fba3 1302 	umull	r1, r3, r3, r2
 8006b1a:	0919      	lsrs	r1, r3, #4
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	440b      	add	r3, r1
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d133      	bne.n	8006b94 <LED_control+0x88>
		switch (state) {
 8006b2c:	4b1e      	ldr	r3, [pc, #120]	; (8006ba8 <LED_control+0x9c>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2b05      	cmp	r3, #5
 8006b32:	d831      	bhi.n	8006b98 <LED_control+0x8c>
 8006b34:	a201      	add	r2, pc, #4	; (adr r2, 8006b3c <LED_control+0x30>)
 8006b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3a:	bf00      	nop
 8006b3c:	08006b99 	.word	0x08006b99
 8006b40:	08006b99 	.word	0x08006b99
 8006b44:	08006b55 	.word	0x08006b55
 8006b48:	08006b61 	.word	0x08006b61
 8006b4c:	08006b6d 	.word	0x08006b6d
 8006b50:	08006b81 	.word	0x08006b81
		case STATE_UNCHECK_MODE:
			break;
		case STATE_IDLE:
			break;
		case STATE_REQ_CONN:
			HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8006b54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b58:	4814      	ldr	r0, [pc, #80]	; (8006bac <LED_control+0xa0>)
 8006b5a:	f001 fe60 	bl	800881e <HAL_GPIO_TogglePin>
			break;
 8006b5e:	e01c      	b.n	8006b9a <LED_control+0x8e>
		case STATE_WAIT_CONN:
			HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8006b60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b64:	4811      	ldr	r0, [pc, #68]	; (8006bac <LED_control+0xa0>)
 8006b66:	f001 fe5a 	bl	800881e <HAL_GPIO_TogglePin>
			break;
 8006b6a:	e016      	b.n	8006b9a <LED_control+0x8e>
		case STATE_TRY_SEND:
			HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8006b6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b70:	480e      	ldr	r0, [pc, #56]	; (8006bac <LED_control+0xa0>)
 8006b72:	f001 fe54 	bl	800881e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8006b76:	2104      	movs	r1, #4
 8006b78:	480d      	ldr	r0, [pc, #52]	; (8006bb0 <LED_control+0xa4>)
 8006b7a:	f001 fe50 	bl	800881e <HAL_GPIO_TogglePin>
			break;
 8006b7e:	e00c      	b.n	8006b9a <LED_control+0x8e>
		case STATE_TRY_RECV:
			HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8006b80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b84:	4809      	ldr	r0, [pc, #36]	; (8006bac <LED_control+0xa0>)
 8006b86:	f001 fe4a 	bl	800881e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8006b8a:	2104      	movs	r1, #4
 8006b8c:	4808      	ldr	r0, [pc, #32]	; (8006bb0 <LED_control+0xa4>)
 8006b8e:	f001 fe46 	bl	800881e <HAL_GPIO_TogglePin>
			break;
 8006b92:	e002      	b.n	8006b9a <LED_control+0x8e>
		default:
			break;

		}
	}
 8006b94:	bf00      	nop
 8006b96:	e000      	b.n	8006b9a <LED_control+0x8e>
			break;
 8006b98:	bf00      	nop

}
 8006b9a:	bf00      	nop
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	200005b4 	.word	0x200005b4
 8006ba4:	cccccccd 	.word	0xcccccccd
 8006ba8:	200005b8 	.word	0x200005b8
 8006bac:	40010800 	.word	0x40010800
 8006bb0:	40011400 	.word	0x40011400

08006bb4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8006bb4:	b590      	push	{r4, r7, lr}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af02      	add	r7, sp, #8
 8006bba:	6078      	str	r0, [r7, #4]
//	char msg[40];
	/*uint8_t *plus = '+';
	 HAL_UART_Transmit(&huart1, (uint8_t*) plus, strlen(plus), 1000);*/

	if (huart->Instance == USART1) {
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a9b      	ldr	r2, [pc, #620]	; (8006e30 <HAL_UART_RxCpltCallback+0x27c>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	f040 8130 	bne.w	8006e28 <HAL_UART_RxCpltCallback+0x274>
		if (rxBuffer[0] == '\n') {
 8006bc8:	4b9a      	ldr	r3, [pc, #616]	; (8006e34 <HAL_UART_RxCpltCallback+0x280>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	2b0a      	cmp	r3, #10
 8006bce:	f040 8120 	bne.w	8006e12 <HAL_UART_RxCpltCallback+0x25e>
			inputData[uLength] = '\0';
 8006bd2:	4b99      	ldr	r3, [pc, #612]	; (8006e38 <HAL_UART_RxCpltCallback+0x284>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a99      	ldr	r2, [pc, #612]	; (8006e3c <HAL_UART_RxCpltCallback+0x288>)
 8006bd8:	2100      	movs	r1, #0
 8006bda:	54d1      	strb	r1, [r2, r3]
			printf("DEBUG: data input from UART --> ");
 8006bdc:	4898      	ldr	r0, [pc, #608]	; (8006e40 <HAL_UART_RxCpltCallback+0x28c>)
 8006bde:	f003 faa9 	bl	800a134 <iprintf>
			printf(inputData);
 8006be2:	4896      	ldr	r0, [pc, #600]	; (8006e3c <HAL_UART_RxCpltCallback+0x288>)
 8006be4:	f003 faa6 	bl	800a134 <iprintf>
			printf("\n");
 8006be8:	200a      	movs	r0, #10
 8006bea:	f003 fabb 	bl	800a164 <putchar>
			if (inputData[0] > '0' && inputData[0] < '9'
 8006bee:	4b93      	ldr	r3, [pc, #588]	; (8006e3c <HAL_UART_RxCpltCallback+0x288>)
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	2b30      	cmp	r3, #48	; 0x30
 8006bf4:	f240 8102 	bls.w	8006dfc <HAL_UART_RxCpltCallback+0x248>
 8006bf8:	4b90      	ldr	r3, [pc, #576]	; (8006e3c <HAL_UART_RxCpltCallback+0x288>)
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	2b38      	cmp	r3, #56	; 0x38
 8006bfe:	f200 80fd 	bhi.w	8006dfc <HAL_UART_RxCpltCallback+0x248>
					&& inputData[1] == ':') {
 8006c02:	4b8e      	ldr	r3, [pc, #568]	; (8006e3c <HAL_UART_RxCpltCallback+0x288>)
 8006c04:	785b      	ldrb	r3, [r3, #1]
 8006c06:	2b3a      	cmp	r3, #58	; 0x3a
 8006c08:	f040 80f8 	bne.w	8006dfc <HAL_UART_RxCpltCallback+0x248>
				cmd_flag = inputData[0] - '0';
 8006c0c:	4b8b      	ldr	r3, [pc, #556]	; (8006e3c <HAL_UART_RxCpltCallback+0x288>)
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	3b30      	subs	r3, #48	; 0x30
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	4b8b      	ldr	r3, [pc, #556]	; (8006e44 <HAL_UART_RxCpltCallback+0x290>)
 8006c16:	701a      	strb	r2, [r3, #0]
				strcpy(cmd_buff, inputData + 2);
 8006c18:	4b8b      	ldr	r3, [pc, #556]	; (8006e48 <HAL_UART_RxCpltCallback+0x294>)
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	488b      	ldr	r0, [pc, #556]	; (8006e4c <HAL_UART_RxCpltCallback+0x298>)
 8006c1e:	f003 fb39 	bl	800a294 <strcpy>
				switch (cmd_flag) {
 8006c22:	4b88      	ldr	r3, [pc, #544]	; (8006e44 <HAL_UART_RxCpltCallback+0x290>)
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	3b01      	subs	r3, #1
 8006c28:	2b07      	cmp	r3, #7
 8006c2a:	f200 80e3 	bhi.w	8006df4 <HAL_UART_RxCpltCallback+0x240>
 8006c2e:	a201      	add	r2, pc, #4	; (adr r2, 8006c34 <HAL_UART_RxCpltCallback+0x80>)
 8006c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c34:	08006c55 	.word	0x08006c55
 8006c38:	08006cc7 	.word	0x08006cc7
 8006c3c:	08006d39 	.word	0x08006d39
 8006c40:	08006d51 	.word	0x08006d51
 8006c44:	08006d69 	.word	0x08006d69
 8006c48:	08006d83 	.word	0x08006d83
 8006c4c:	08006d9f 	.word	0x08006d9f
 8006c50:	08006def 	.word	0x08006def
				case 1:
					for (int i = 0; i < 5; ++i) {
 8006c54:	2300      	movs	r3, #0
 8006c56:	60fb      	str	r3, [r7, #12]
 8006c58:	e01c      	b.n	8006c94 <HAL_UART_RxCpltCallback+0xe0>
						RX_ADDRESS[i] = get_hex_num(cmd_buff[2 * i]) * 16
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	005b      	lsls	r3, r3, #1
 8006c5e:	4a7b      	ldr	r2, [pc, #492]	; (8006e4c <HAL_UART_RxCpltCallback+0x298>)
 8006c60:	5cd3      	ldrb	r3, [r2, r3]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7ff ff32 	bl	8006acc <get_hex_num>
 8006c68:	4603      	mov	r3, r0
								+ get_hex_num(cmd_buff[2 * i + 1]);
 8006c6a:	011b      	lsls	r3, r3, #4
 8006c6c:	b2dc      	uxtb	r4, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	005b      	lsls	r3, r3, #1
 8006c72:	3301      	adds	r3, #1
 8006c74:	4a75      	ldr	r2, [pc, #468]	; (8006e4c <HAL_UART_RxCpltCallback+0x298>)
 8006c76:	5cd3      	ldrb	r3, [r2, r3]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7ff ff27 	bl	8006acc <get_hex_num>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	4423      	add	r3, r4
 8006c82:	b2d9      	uxtb	r1, r3
						RX_ADDRESS[i] = get_hex_num(cmd_buff[2 * i]) * 16
 8006c84:	4a72      	ldr	r2, [pc, #456]	; (8006e50 <HAL_UART_RxCpltCallback+0x29c>)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	4413      	add	r3, r2
 8006c8a:	460a      	mov	r2, r1
 8006c8c:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 5; ++i) {
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	3301      	adds	r3, #1
 8006c92:	60fb      	str	r3, [r7, #12]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2b04      	cmp	r3, #4
 8006c98:	dddf      	ble.n	8006c5a <HAL_UART_RxCpltCallback+0xa6>
					}
					printf("DEBUG: Change RX_ADDRESS to %02x%02x%02x%02x%02x\n",
							RX_ADDRESS[0], RX_ADDRESS[1], RX_ADDRESS[2],
 8006c9a:	4b6d      	ldr	r3, [pc, #436]	; (8006e50 <HAL_UART_RxCpltCallback+0x29c>)
 8006c9c:	781b      	ldrb	r3, [r3, #0]
					printf("DEBUG: Change RX_ADDRESS to %02x%02x%02x%02x%02x\n",
 8006c9e:	4619      	mov	r1, r3
							RX_ADDRESS[0], RX_ADDRESS[1], RX_ADDRESS[2],
 8006ca0:	4b6b      	ldr	r3, [pc, #428]	; (8006e50 <HAL_UART_RxCpltCallback+0x29c>)
 8006ca2:	785b      	ldrb	r3, [r3, #1]
					printf("DEBUG: Change RX_ADDRESS to %02x%02x%02x%02x%02x\n",
 8006ca4:	4618      	mov	r0, r3
							RX_ADDRESS[0], RX_ADDRESS[1], RX_ADDRESS[2],
 8006ca6:	4b6a      	ldr	r3, [pc, #424]	; (8006e50 <HAL_UART_RxCpltCallback+0x29c>)
 8006ca8:	789b      	ldrb	r3, [r3, #2]
					printf("DEBUG: Change RX_ADDRESS to %02x%02x%02x%02x%02x\n",
 8006caa:	461c      	mov	r4, r3
							RX_ADDRESS[3], RX_ADDRESS[4]);
 8006cac:	4b68      	ldr	r3, [pc, #416]	; (8006e50 <HAL_UART_RxCpltCallback+0x29c>)
 8006cae:	78db      	ldrb	r3, [r3, #3]
					printf("DEBUG: Change RX_ADDRESS to %02x%02x%02x%02x%02x\n",
 8006cb0:	461a      	mov	r2, r3
							RX_ADDRESS[3], RX_ADDRESS[4]);
 8006cb2:	4b67      	ldr	r3, [pc, #412]	; (8006e50 <HAL_UART_RxCpltCallback+0x29c>)
 8006cb4:	791b      	ldrb	r3, [r3, #4]
					printf("DEBUG: Change RX_ADDRESS to %02x%02x%02x%02x%02x\n",
 8006cb6:	9301      	str	r3, [sp, #4]
 8006cb8:	9200      	str	r2, [sp, #0]
 8006cba:	4623      	mov	r3, r4
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	4865      	ldr	r0, [pc, #404]	; (8006e54 <HAL_UART_RxCpltCallback+0x2a0>)
 8006cc0:	f003 fa38 	bl	800a134 <iprintf>
					break;
 8006cc4:	e099      	b.n	8006dfa <HAL_UART_RxCpltCallback+0x246>
				case 2:
					for (int i = 0; i < 5; ++i) {
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	60bb      	str	r3, [r7, #8]
 8006cca:	e01c      	b.n	8006d06 <HAL_UART_RxCpltCallback+0x152>
						TX_ADDRESS[i] = get_hex_num(cmd_buff[2 * i]) * 16
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	005b      	lsls	r3, r3, #1
 8006cd0:	4a5e      	ldr	r2, [pc, #376]	; (8006e4c <HAL_UART_RxCpltCallback+0x298>)
 8006cd2:	5cd3      	ldrb	r3, [r2, r3]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f7ff fef9 	bl	8006acc <get_hex_num>
 8006cda:	4603      	mov	r3, r0
								+ get_hex_num(cmd_buff[2 * i + 1]);
 8006cdc:	011b      	lsls	r3, r3, #4
 8006cde:	b2dc      	uxtb	r4, r3
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	005b      	lsls	r3, r3, #1
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	4a59      	ldr	r2, [pc, #356]	; (8006e4c <HAL_UART_RxCpltCallback+0x298>)
 8006ce8:	5cd3      	ldrb	r3, [r2, r3]
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7ff feee 	bl	8006acc <get_hex_num>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	4423      	add	r3, r4
 8006cf4:	b2d9      	uxtb	r1, r3
						TX_ADDRESS[i] = get_hex_num(cmd_buff[2 * i]) * 16
 8006cf6:	4a58      	ldr	r2, [pc, #352]	; (8006e58 <HAL_UART_RxCpltCallback+0x2a4>)
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	460a      	mov	r2, r1
 8006cfe:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 5; ++i) {
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	3301      	adds	r3, #1
 8006d04:	60bb      	str	r3, [r7, #8]
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	2b04      	cmp	r3, #4
 8006d0a:	dddf      	ble.n	8006ccc <HAL_UART_RxCpltCallback+0x118>
					}
					printf("DEBUG: Change TX_ADDRESS to %02x%02x%02x%02x%02x\n",
							TX_ADDRESS[0], TX_ADDRESS[1], TX_ADDRESS[2],
 8006d0c:	4b52      	ldr	r3, [pc, #328]	; (8006e58 <HAL_UART_RxCpltCallback+0x2a4>)
 8006d0e:	781b      	ldrb	r3, [r3, #0]
					printf("DEBUG: Change TX_ADDRESS to %02x%02x%02x%02x%02x\n",
 8006d10:	4619      	mov	r1, r3
							TX_ADDRESS[0], TX_ADDRESS[1], TX_ADDRESS[2],
 8006d12:	4b51      	ldr	r3, [pc, #324]	; (8006e58 <HAL_UART_RxCpltCallback+0x2a4>)
 8006d14:	785b      	ldrb	r3, [r3, #1]
					printf("DEBUG: Change TX_ADDRESS to %02x%02x%02x%02x%02x\n",
 8006d16:	4618      	mov	r0, r3
							TX_ADDRESS[0], TX_ADDRESS[1], TX_ADDRESS[2],
 8006d18:	4b4f      	ldr	r3, [pc, #316]	; (8006e58 <HAL_UART_RxCpltCallback+0x2a4>)
 8006d1a:	789b      	ldrb	r3, [r3, #2]
					printf("DEBUG: Change TX_ADDRESS to %02x%02x%02x%02x%02x\n",
 8006d1c:	461c      	mov	r4, r3
							TX_ADDRESS[3], TX_ADDRESS[4]);
 8006d1e:	4b4e      	ldr	r3, [pc, #312]	; (8006e58 <HAL_UART_RxCpltCallback+0x2a4>)
 8006d20:	78db      	ldrb	r3, [r3, #3]
					printf("DEBUG: Change TX_ADDRESS to %02x%02x%02x%02x%02x\n",
 8006d22:	461a      	mov	r2, r3
							TX_ADDRESS[3], TX_ADDRESS[4]);
 8006d24:	4b4c      	ldr	r3, [pc, #304]	; (8006e58 <HAL_UART_RxCpltCallback+0x2a4>)
 8006d26:	791b      	ldrb	r3, [r3, #4]
					printf("DEBUG: Change TX_ADDRESS to %02x%02x%02x%02x%02x\n",
 8006d28:	9301      	str	r3, [sp, #4]
 8006d2a:	9200      	str	r2, [sp, #0]
 8006d2c:	4623      	mov	r3, r4
 8006d2e:	4602      	mov	r2, r0
 8006d30:	484a      	ldr	r0, [pc, #296]	; (8006e5c <HAL_UART_RxCpltCallback+0x2a8>)
 8006d32:	f003 f9ff 	bl	800a134 <iprintf>
					break;
 8006d36:	e060      	b.n	8006dfa <HAL_UART_RxCpltCallback+0x246>
				case 3:
					recv_ch = atoi(cmd_buff);
 8006d38:	4844      	ldr	r0, [pc, #272]	; (8006e4c <HAL_UART_RxCpltCallback+0x298>)
 8006d3a:	f003 f9c5 	bl	800a0c8 <atoi>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	4b47      	ldr	r3, [pc, #284]	; (8006e60 <HAL_UART_RxCpltCallback+0x2ac>)
 8006d44:	701a      	strb	r2, [r3, #0]
					printf("DEBUG: Change recv_ch to %s\n", cmd_buff);
 8006d46:	4941      	ldr	r1, [pc, #260]	; (8006e4c <HAL_UART_RxCpltCallback+0x298>)
 8006d48:	4846      	ldr	r0, [pc, #280]	; (8006e64 <HAL_UART_RxCpltCallback+0x2b0>)
 8006d4a:	f003 f9f3 	bl	800a134 <iprintf>
					break;
 8006d4e:	e054      	b.n	8006dfa <HAL_UART_RxCpltCallback+0x246>
				case 4:
					send_ch = atoi(cmd_buff);
 8006d50:	483e      	ldr	r0, [pc, #248]	; (8006e4c <HAL_UART_RxCpltCallback+0x298>)
 8006d52:	f003 f9b9 	bl	800a0c8 <atoi>
 8006d56:	4603      	mov	r3, r0
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	4b43      	ldr	r3, [pc, #268]	; (8006e68 <HAL_UART_RxCpltCallback+0x2b4>)
 8006d5c:	701a      	strb	r2, [r3, #0]
					printf("DEBUG: Change send_ch to %s\n", cmd_buff);
 8006d5e:	493b      	ldr	r1, [pc, #236]	; (8006e4c <HAL_UART_RxCpltCallback+0x298>)
 8006d60:	4842      	ldr	r0, [pc, #264]	; (8006e6c <HAL_UART_RxCpltCallback+0x2b8>)
 8006d62:	f003 f9e7 	bl	800a134 <iprintf>
					break;
 8006d66:	e048      	b.n	8006dfa <HAL_UART_RxCpltCallback+0x246>
				case 5:
					TLE_SCALE = atoi(cmd_buff);
 8006d68:	4838      	ldr	r0, [pc, #224]	; (8006e4c <HAL_UART_RxCpltCallback+0x298>)
 8006d6a:	f003 f9ad 	bl	800a0c8 <atoi>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	4b3f      	ldr	r3, [pc, #252]	; (8006e70 <HAL_UART_RxCpltCallback+0x2bc>)
 8006d72:	601a      	str	r2, [r3, #0]
					printf("DEBUG: Change TLE scale to %d\n", TLE_SCALE);
 8006d74:	4b3e      	ldr	r3, [pc, #248]	; (8006e70 <HAL_UART_RxCpltCallback+0x2bc>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4619      	mov	r1, r3
 8006d7a:	483e      	ldr	r0, [pc, #248]	; (8006e74 <HAL_UART_RxCpltCallback+0x2c0>)
 8006d7c:	f003 f9da 	bl	800a134 <iprintf>
					break;
 8006d80:	e03b      	b.n	8006dfa <HAL_UART_RxCpltCallback+0x246>
				case 6:
					friend_mode = atoi(cmd_buff);
 8006d82:	4832      	ldr	r0, [pc, #200]	; (8006e4c <HAL_UART_RxCpltCallback+0x298>)
 8006d84:	f003 f9a0 	bl	800a0c8 <atoi>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	b2da      	uxtb	r2, r3
 8006d8c:	4b3a      	ldr	r3, [pc, #232]	; (8006e78 <HAL_UART_RxCpltCallback+0x2c4>)
 8006d8e:	701a      	strb	r2, [r3, #0]
					printf("DEBUG: Change friend mode to %d\n", friend_mode);
 8006d90:	4b39      	ldr	r3, [pc, #228]	; (8006e78 <HAL_UART_RxCpltCallback+0x2c4>)
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	4619      	mov	r1, r3
 8006d96:	4839      	ldr	r0, [pc, #228]	; (8006e7c <HAL_UART_RxCpltCallback+0x2c8>)
 8006d98:	f003 f9cc 	bl	800a134 <iprintf>
					break;
 8006d9c:	e02d      	b.n	8006dfa <HAL_UART_RxCpltCallback+0x246>
				case 7:
					if (friend_mode == 1) {
 8006d9e:	4b36      	ldr	r3, [pc, #216]	; (8006e78 <HAL_UART_RxCpltCallback+0x2c4>)
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d128      	bne.n	8006df8 <HAL_UART_RxCpltCallback+0x244>
						send_to_friend = atoi(cmd_buff);
 8006da6:	4829      	ldr	r0, [pc, #164]	; (8006e4c <HAL_UART_RxCpltCallback+0x298>)
 8006da8:	f003 f98e 	bl	800a0c8 <atoi>
 8006dac:	4602      	mov	r2, r0
 8006dae:	4b34      	ldr	r3, [pc, #208]	; (8006e80 <HAL_UART_RxCpltCallback+0x2cc>)
 8006db0:	601a      	str	r2, [r3, #0]
						if (send_to_friend == 1 && state == STATE_TRY_RECV) {
 8006db2:	4b33      	ldr	r3, [pc, #204]	; (8006e80 <HAL_UART_RxCpltCallback+0x2cc>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d10a      	bne.n	8006dd0 <HAL_UART_RxCpltCallback+0x21c>
 8006dba:	4b32      	ldr	r3, [pc, #200]	; (8006e84 <HAL_UART_RxCpltCallback+0x2d0>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2b05      	cmp	r3, #5
 8006dc0:	d106      	bne.n	8006dd0 <HAL_UART_RxCpltCallback+0x21c>
							state = STATE_TRY_SEND;
 8006dc2:	4b30      	ldr	r3, [pc, #192]	; (8006e84 <HAL_UART_RxCpltCallback+0x2d0>)
 8006dc4:	2204      	movs	r2, #4
 8006dc6:	601a      	str	r2, [r3, #0]
							printf(
 8006dc8:	482f      	ldr	r0, [pc, #188]	; (8006e88 <HAL_UART_RxCpltCallback+0x2d4>)
 8006dca:	f003 fa3b 	bl	800a244 <puts>
								== 0&& state == STATE_TRY_SEND) {
							state = STATE_TRY_RECV;
							printf("DEBUG: Change mode to recv from friend.\n");
						}
					}
					break;
 8006dce:	e013      	b.n	8006df8 <HAL_UART_RxCpltCallback+0x244>
								== 0&& state == STATE_TRY_SEND) {
 8006dd0:	4b2b      	ldr	r3, [pc, #172]	; (8006e80 <HAL_UART_RxCpltCallback+0x2cc>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
						} else if (send_to_friend
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d10f      	bne.n	8006df8 <HAL_UART_RxCpltCallback+0x244>
								== 0&& state == STATE_TRY_SEND) {
 8006dd8:	4b2a      	ldr	r3, [pc, #168]	; (8006e84 <HAL_UART_RxCpltCallback+0x2d0>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2b04      	cmp	r3, #4
 8006dde:	d10b      	bne.n	8006df8 <HAL_UART_RxCpltCallback+0x244>
							state = STATE_TRY_RECV;
 8006de0:	4b28      	ldr	r3, [pc, #160]	; (8006e84 <HAL_UART_RxCpltCallback+0x2d0>)
 8006de2:	2205      	movs	r2, #5
 8006de4:	601a      	str	r2, [r3, #0]
							printf("DEBUG: Change mode to recv from friend.\n");
 8006de6:	4829      	ldr	r0, [pc, #164]	; (8006e8c <HAL_UART_RxCpltCallback+0x2d8>)
 8006de8:	f003 fa2c 	bl	800a244 <puts>
					break;
 8006dec:	e004      	b.n	8006df8 <HAL_UART_RxCpltCallback+0x244>
				case 8:
					printf(tip);
 8006dee:	4828      	ldr	r0, [pc, #160]	; (8006e90 <HAL_UART_RxCpltCallback+0x2dc>)
 8006df0:	f003 f9a0 	bl	800a134 <iprintf>
				default:
					break;
 8006df4:	bf00      	nop
 8006df6:	e008      	b.n	8006e0a <HAL_UART_RxCpltCallback+0x256>
					break;
 8006df8:	bf00      	nop
				}
			} else {
 8006dfa:	e006      	b.n	8006e0a <HAL_UART_RxCpltCallback+0x256>
				strcpy(send_buff, inputData);
 8006dfc:	490f      	ldr	r1, [pc, #60]	; (8006e3c <HAL_UART_RxCpltCallback+0x288>)
 8006dfe:	4825      	ldr	r0, [pc, #148]	; (8006e94 <HAL_UART_RxCpltCallback+0x2e0>)
 8006e00:	f003 fa48 	bl	800a294 <strcpy>
				send_flag = 1;
 8006e04:	4b24      	ldr	r3, [pc, #144]	; (8006e98 <HAL_UART_RxCpltCallback+0x2e4>)
 8006e06:	2201      	movs	r2, #1
 8006e08:	701a      	strb	r2, [r3, #0]
				/*printf("DEBUG: set send_flag: %d, data recv from uart: %s\n",
				 send_flag, inputData);*/

			}
			uLength = 0;
 8006e0a:	4b0b      	ldr	r3, [pc, #44]	; (8006e38 <HAL_UART_RxCpltCallback+0x284>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	601a      	str	r2, [r3, #0]
		} else {
			inputData[uLength] = rxBuffer[0];
			++uLength;
		}
	}
}
 8006e10:	e00a      	b.n	8006e28 <HAL_UART_RxCpltCallback+0x274>
			inputData[uLength] = rxBuffer[0];
 8006e12:	4b09      	ldr	r3, [pc, #36]	; (8006e38 <HAL_UART_RxCpltCallback+0x284>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a07      	ldr	r2, [pc, #28]	; (8006e34 <HAL_UART_RxCpltCallback+0x280>)
 8006e18:	7811      	ldrb	r1, [r2, #0]
 8006e1a:	4a08      	ldr	r2, [pc, #32]	; (8006e3c <HAL_UART_RxCpltCallback+0x288>)
 8006e1c:	54d1      	strb	r1, [r2, r3]
			++uLength;
 8006e1e:	4b06      	ldr	r3, [pc, #24]	; (8006e38 <HAL_UART_RxCpltCallback+0x284>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	3301      	adds	r3, #1
 8006e24:	4a04      	ldr	r2, [pc, #16]	; (8006e38 <HAL_UART_RxCpltCallback+0x284>)
 8006e26:	6013      	str	r3, [r2, #0]
}
 8006e28:	bf00      	nop
 8006e2a:	3714      	adds	r7, #20
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd90      	pop	{r4, r7, pc}
 8006e30:	40013800 	.word	0x40013800
 8006e34:	20000774 	.word	0x20000774
 8006e38:	200005c0 	.word	0x200005c0
 8006e3c:	20000030 	.word	0x20000030
 8006e40:	0800b5f0 	.word	0x0800b5f0
 8006e44:	200005ae 	.word	0x200005ae
 8006e48:	20000032 	.word	0x20000032
 8006e4c:	20000004 	.word	0x20000004
 8006e50:	200003ac 	.word	0x200003ac
 8006e54:	0800b614 	.word	0x0800b614
 8006e58:	200003a4 	.word	0x200003a4
 8006e5c:	0800b648 	.word	0x0800b648
 8006e60:	200003b1 	.word	0x200003b1
 8006e64:	0800b67c 	.word	0x0800b67c
 8006e68:	200003b2 	.word	0x200003b2
 8006e6c:	0800b69c 	.word	0x0800b69c
 8006e70:	20000028 	.word	0x20000028
 8006e74:	0800b6bc 	.word	0x0800b6bc
 8006e78:	200005af 	.word	0x200005af
 8006e7c:	0800b6dc 	.word	0x0800b6dc
 8006e80:	2000002c 	.word	0x2000002c
 8006e84:	200005b8 	.word	0x200005b8
 8006e88:	0800b700 	.word	0x0800b700
 8006e8c:	0800b728 	.word	0x0800b728
 8006e90:	200000e4 	.word	0x200000e4
 8006e94:	2000006c 	.word	0x2000006c
 8006e98:	200005c4 	.word	0x200005c4

08006e9c <try_conn>:

void try_conn() {
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b08c      	sub	sp, #48	; 0x30
 8006ea0:	af00      	add	r7, sp, #0
	uint8_t tmp_buff[33] = "-\0";
 8006ea2:	4a5d      	ldr	r2, [pc, #372]	; (8007018 <try_conn+0x17c>)
 8006ea4:	1d3b      	adds	r3, r7, #4
 8006ea6:	6812      	ldr	r2, [r2, #0]
 8006ea8:	4611      	mov	r1, r2
 8006eaa:	8019      	strh	r1, [r3, #0]
 8006eac:	3302      	adds	r3, #2
 8006eae:	0c12      	lsrs	r2, r2, #16
 8006eb0:	701a      	strb	r2, [r3, #0]
 8006eb2:	1dfb      	adds	r3, r7, #7
 8006eb4:	221e      	movs	r2, #30
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f003 f933 	bl	800a124 <memset>
	uint8_t nrf_state = 0;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (state == STATE_REQ_CONN) {
 8006ec4:	4b55      	ldr	r3, [pc, #340]	; (800701c <try_conn+0x180>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d14c      	bne.n	8006f66 <try_conn+0xca>
		NRF24L01_TX_Mode();
 8006ecc:	f000 fdce 	bl	8007a6c <NRF24L01_TX_Mode>

		printf("DEBUG: Try conn other.\n");
 8006ed0:	4853      	ldr	r0, [pc, #332]	; (8007020 <try_conn+0x184>)
 8006ed2:	f003 f9b7 	bl	800a244 <puts>

		for (int i = 0; i < 180 * TLE_SCALE; ++i) {
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eda:	e03c      	b.n	8006f56 <try_conn+0xba>
			nrf_state = NRF24L01_TxPacket(tmp_buff);
 8006edc:	1d3b      	adds	r3, r7, #4
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 fd26 	bl	8007930 <NRF24L01_TxPacket>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			HAL_Delay(5);
 8006eea:	2005      	movs	r0, #5
 8006eec:	f001 f8c6 	bl	800807c <HAL_Delay>

			++counter;
 8006ef0:	4b4c      	ldr	r3, [pc, #304]	; (8007024 <try_conn+0x188>)
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	b2da      	uxtb	r2, r3
 8006ef8:	4b4a      	ldr	r3, [pc, #296]	; (8007024 <try_conn+0x188>)
 8006efa:	701a      	strb	r2, [r3, #0]
			LED_control();
 8006efc:	f7ff fe06 	bl	8006b0c <LED_control>

			if (nrf_state == TX_OK) {
 8006f00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f04:	2b20      	cmp	r3, #32
 8006f06:	d11b      	bne.n	8006f40 <try_conn+0xa4>
				printf("DEBUG: Active request connection successful.\n");
 8006f08:	4847      	ldr	r0, [pc, #284]	; (8007028 <try_conn+0x18c>)
 8006f0a:	f003 f99b 	bl	800a244 <puts>
				if(friend_mode == 1){
 8006f0e:	4b47      	ldr	r3, [pc, #284]	; (800702c <try_conn+0x190>)
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d102      	bne.n	8006f1c <try_conn+0x80>
					printf("Recv mode, input command 7:1 change to Send Mode\n");
 8006f16:	4846      	ldr	r0, [pc, #280]	; (8007030 <try_conn+0x194>)
 8006f18:	f003 f994 	bl	800a244 <puts>
				}
				state = STATE_TRY_RECV;
 8006f1c:	4b3f      	ldr	r3, [pc, #252]	; (800701c <try_conn+0x180>)
 8006f1e:	2205      	movs	r2, #5
 8006f20:	601a      	str	r2, [r3, #0]
				conn_init_flag = 1;
 8006f22:	4b44      	ldr	r3, [pc, #272]	; (8007034 <try_conn+0x198>)
 8006f24:	2201      	movs	r2, #1
 8006f26:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f2e:	4842      	ldr	r0, [pc, #264]	; (8007038 <try_conn+0x19c>)
 8006f30:	f001 fc5d 	bl	80087ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8006f34:	2201      	movs	r2, #1
 8006f36:	2104      	movs	r1, #4
 8006f38:	4840      	ldr	r0, [pc, #256]	; (800703c <try_conn+0x1a0>)
 8006f3a:	f001 fc58 	bl	80087ee <HAL_GPIO_WritePin>
				return;
 8006f3e:	e068      	b.n	8007012 <try_conn+0x176>
			}

			if (state != STATE_REQ_CONN) {
 8006f40:	4b36      	ldr	r3, [pc, #216]	; (800701c <try_conn+0x180>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d003      	beq.n	8006f50 <try_conn+0xb4>
				printf("DEBUG: Exit try request conn\n");
 8006f48:	483d      	ldr	r0, [pc, #244]	; (8007040 <try_conn+0x1a4>)
 8006f4a:	f003 f97b 	bl	800a244 <puts>
				break;
 8006f4e:	e00a      	b.n	8006f66 <try_conn+0xca>
		for (int i = 0; i < 180 * TLE_SCALE; ++i) {
 8006f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f52:	3301      	adds	r3, #1
 8006f54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f56:	4b3b      	ldr	r3, [pc, #236]	; (8007044 <try_conn+0x1a8>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	22b4      	movs	r2, #180	; 0xb4
 8006f5c:	fb02 f303 	mul.w	r3, r2, r3
 8006f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f62:	429a      	cmp	r2, r3
 8006f64:	dbba      	blt.n	8006edc <try_conn+0x40>
			}
		}
	}

	if (state == STATE_WAIT_CONN) {
 8006f66:	4b2d      	ldr	r3, [pc, #180]	; (800701c <try_conn+0x180>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b03      	cmp	r3, #3
 8006f6c:	d151      	bne.n	8007012 <try_conn+0x176>
		NRF24L01_RX_Mode();
 8006f6e:	f000 fd47 	bl	8007a00 <NRF24L01_RX_Mode>

		printf("DEBUG: Active connection fail, wait other conn me\n");
 8006f72:	4835      	ldr	r0, [pc, #212]	; (8007048 <try_conn+0x1ac>)
 8006f74:	f003 f966 	bl	800a244 <puts>

		for (int j = 0; j < 200 * TLE_SCALE; ++j) {
 8006f78:	2300      	movs	r3, #0
 8006f7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f7c:	e03c      	b.n	8006ff8 <try_conn+0x15c>
			nrf_state = NRF24L01_RxPacket(tmp_buff);
 8006f7e:	1d3b      	adds	r3, r7, #4
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 fd17 	bl	80079b4 <NRF24L01_RxPacket>
 8006f86:	4603      	mov	r3, r0
 8006f88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			HAL_Delay(5);
 8006f8c:	2005      	movs	r0, #5
 8006f8e:	f001 f875 	bl	800807c <HAL_Delay>
			++counter;
 8006f92:	4b24      	ldr	r3, [pc, #144]	; (8007024 <try_conn+0x188>)
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	3301      	adds	r3, #1
 8006f98:	b2da      	uxtb	r2, r3
 8006f9a:	4b22      	ldr	r3, [pc, #136]	; (8007024 <try_conn+0x188>)
 8006f9c:	701a      	strb	r2, [r3, #0]
			LED_control();
 8006f9e:	f7ff fdb5 	bl	8006b0c <LED_control>

			if (nrf_state == 0) {
 8006fa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d11b      	bne.n	8006fe2 <try_conn+0x146>
				state = STATE_TRY_SEND;
 8006faa:	4b1c      	ldr	r3, [pc, #112]	; (800701c <try_conn+0x180>)
 8006fac:	2204      	movs	r2, #4
 8006fae:	601a      	str	r2, [r3, #0]
				printf("DEBUG: Accept(passive) connection successful\n");
 8006fb0:	4826      	ldr	r0, [pc, #152]	; (800704c <try_conn+0x1b0>)
 8006fb2:	f003 f947 	bl	800a244 <puts>
				if(friend_mode == 1){
 8006fb6:	4b1d      	ldr	r3, [pc, #116]	; (800702c <try_conn+0x190>)
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d102      	bne.n	8006fc4 <try_conn+0x128>
					printf("Send mode, input command 7:0 change to Recv Mode or chat msg to send\n");
 8006fbe:	4824      	ldr	r0, [pc, #144]	; (8007050 <try_conn+0x1b4>)
 8006fc0:	f003 f940 	bl	800a244 <puts>
				}
				conn_init_flag = 1;
 8006fc4:	4b1b      	ldr	r3, [pc, #108]	; (8007034 <try_conn+0x198>)
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006fd0:	4819      	ldr	r0, [pc, #100]	; (8007038 <try_conn+0x19c>)
 8006fd2:	f001 fc0c 	bl	80087ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	2104      	movs	r1, #4
 8006fda:	4818      	ldr	r0, [pc, #96]	; (800703c <try_conn+0x1a0>)
 8006fdc:	f001 fc07 	bl	80087ee <HAL_GPIO_WritePin>
				return;
 8006fe0:	e017      	b.n	8007012 <try_conn+0x176>
			}
			if (state != STATE_WAIT_CONN) {
 8006fe2:	4b0e      	ldr	r3, [pc, #56]	; (800701c <try_conn+0x180>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b03      	cmp	r3, #3
 8006fe8:	d003      	beq.n	8006ff2 <try_conn+0x156>
				printf("DEBUG: Exit try waiting conn\n");
 8006fea:	481a      	ldr	r0, [pc, #104]	; (8007054 <try_conn+0x1b8>)
 8006fec:	f003 f92a 	bl	800a244 <puts>
				return;
 8006ff0:	e00f      	b.n	8007012 <try_conn+0x176>
		for (int j = 0; j < 200 * TLE_SCALE; ++j) {
 8006ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ff8:	4b12      	ldr	r3, [pc, #72]	; (8007044 <try_conn+0x1a8>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	22c8      	movs	r2, #200	; 0xc8
 8006ffe:	fb02 f303 	mul.w	r3, r2, r3
 8007002:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007004:	429a      	cmp	r2, r3
 8007006:	dbba      	blt.n	8006f7e <try_conn+0xe2>
			}

		}
		printf("DEBUG: Try conn time out, exit try conn\n");
 8007008:	4813      	ldr	r0, [pc, #76]	; (8007058 <try_conn+0x1bc>)
 800700a:	f003 f91b 	bl	800a244 <puts>
//		state = STATE_IDLE;
		reset_flags();
 800700e:	f7ff fab1 	bl	8006574 <reset_flags>
	}

}
 8007012:	3730      	adds	r7, #48	; 0x30
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	0800b8e0 	.word	0x0800b8e0
 800701c:	200005b8 	.word	0x200005b8
 8007020:	0800b750 	.word	0x0800b750
 8007024:	200005b4 	.word	0x200005b4
 8007028:	0800b768 	.word	0x0800b768
 800702c:	200005af 	.word	0x200005af
 8007030:	0800b798 	.word	0x0800b798
 8007034:	200005bc 	.word	0x200005bc
 8007038:	40010800 	.word	0x40010800
 800703c:	40011400 	.word	0x40011400
 8007040:	0800b7cc 	.word	0x0800b7cc
 8007044:	20000028 	.word	0x20000028
 8007048:	0800b7ec 	.word	0x0800b7ec
 800704c:	0800b820 	.word	0x0800b820
 8007050:	0800b850 	.word	0x0800b850
 8007054:	0800b898 	.word	0x0800b898
 8007058:	0800b8b8 	.word	0x0800b8b8

0800705c <try_recv>:

void try_recv() {
 800705c:	b580      	push	{r7, lr}
 800705e:	b094      	sub	sp, #80	; 0x50
 8007060:	af02      	add	r7, sp, #8
	uint8_t tmp_buff[60] = "+\0";
 8007062:	4a41      	ldr	r2, [pc, #260]	; (8007168 <try_recv+0x10c>)
 8007064:	1d3b      	adds	r3, r7, #4
 8007066:	6812      	ldr	r2, [r2, #0]
 8007068:	4611      	mov	r1, r2
 800706a:	8019      	strh	r1, [r3, #0]
 800706c:	3302      	adds	r3, #2
 800706e:	0c12      	lsrs	r2, r2, #16
 8007070:	701a      	strb	r2, [r3, #0]
 8007072:	1dfb      	adds	r3, r7, #7
 8007074:	2239      	movs	r2, #57	; 0x39
 8007076:	2100      	movs	r1, #0
 8007078:	4618      	mov	r0, r3
 800707a:	f003 f853 	bl	800a124 <memset>
	uint8_t nrf_state = 0;
 800707e:	2300      	movs	r3, #0
 8007080:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	NRF24L01_RX_Mode();
 8007084:	f000 fcbc 	bl	8007a00 <NRF24L01_RX_Mode>

	for (int i = 0; i < 200 * TLE_SCALE; ++i) {
 8007088:	2300      	movs	r3, #0
 800708a:	647b      	str	r3, [r7, #68]	; 0x44
 800708c:	e04f      	b.n	800712e <try_recv+0xd2>
		if (state != STATE_TRY_RECV) {
 800708e:	4b37      	ldr	r3, [pc, #220]	; (800716c <try_recv+0x110>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b05      	cmp	r3, #5
 8007094:	d154      	bne.n	8007140 <try_recv+0xe4>
			break;
		}
		++counter;
 8007096:	4b36      	ldr	r3, [pc, #216]	; (8007170 <try_recv+0x114>)
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	3301      	adds	r3, #1
 800709c:	b2da      	uxtb	r2, r3
 800709e:	4b34      	ldr	r3, [pc, #208]	; (8007170 <try_recv+0x114>)
 80070a0:	701a      	strb	r2, [r3, #0]
		LED_control();
 80070a2:	f7ff fd33 	bl	8006b0c <LED_control>

		nrf_state = NRF24L01_RxPacket(tmp_buff);
 80070a6:	1d3b      	adds	r3, r7, #4
 80070a8:	4618      	mov	r0, r3
 80070aa:	f000 fc83 	bl	80079b4 <NRF24L01_RxPacket>
 80070ae:	4603      	mov	r3, r0
 80070b0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		HAL_Delay(5);
 80070b4:	2005      	movs	r0, #5
 80070b6:	f000 ffe1 	bl	800807c <HAL_Delay>

		if (nrf_state == 0) {
 80070ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d121      	bne.n	8007106 <try_recv+0xaa>
			state = STATE_TRY_SEND;
 80070c2:	4b2a      	ldr	r3, [pc, #168]	; (800716c <try_recv+0x110>)
 80070c4:	2204      	movs	r2, #4
 80070c6:	601a      	str	r2, [r3, #0]
			LCD_Fill(181, 21, 199, 29, GREEN);
 80070c8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	231d      	movs	r3, #29
 80070d0:	22c7      	movs	r2, #199	; 0xc7
 80070d2:	2115      	movs	r1, #21
 80070d4:	20b5      	movs	r0, #181	; 0xb5
 80070d6:	f7fe ffd7 	bl	8006088 <LCD_Fill>
			if (tmp_buff[0] == '@') {
 80070da:	793b      	ldrb	r3, [r7, #4]
 80070dc:	2b40      	cmp	r3, #64	; 0x40
 80070de:	d13e      	bne.n	800715e <try_recv+0x102>
				/*HAL_UART_Transmit(&huart1, (uint8_t*) recv_buff + 1,
				 strlen(recv_buff) - 1, 500);*/
				recv_flag = 1;
 80070e0:	4b24      	ldr	r3, [pc, #144]	; (8007174 <try_recv+0x118>)
 80070e2:	2201      	movs	r2, #1
 80070e4:	701a      	strb	r2, [r3, #0]
				strcpy(recv_buff, tmp_buff + 1);
 80070e6:	1d3b      	adds	r3, r7, #4
 80070e8:	3301      	adds	r3, #1
 80070ea:	4619      	mov	r1, r3
 80070ec:	4822      	ldr	r0, [pc, #136]	; (8007178 <try_recv+0x11c>)
 80070ee:	f003 f8d1 	bl	800a294 <strcpy>
				printf("DEBUG: recv --> ");
 80070f2:	4822      	ldr	r0, [pc, #136]	; (800717c <try_recv+0x120>)
 80070f4:	f003 f81e 	bl	800a134 <iprintf>
				printf(recv_buff);
 80070f8:	481f      	ldr	r0, [pc, #124]	; (8007178 <try_recv+0x11c>)
 80070fa:	f003 f81b 	bl	800a134 <iprintf>
				printf("\n");
 80070fe:	200a      	movs	r0, #10
 8007100:	f003 f830 	bl	800a164 <putchar>
			}
			return;
 8007104:	e02b      	b.n	800715e <try_recv+0x102>
		}
		if (i > 140 * TLE_SCALE) {
 8007106:	4b1e      	ldr	r3, [pc, #120]	; (8007180 <try_recv+0x124>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	228c      	movs	r2, #140	; 0x8c
 800710c:	fb02 f303 	mul.w	r3, r2, r3
 8007110:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007112:	429a      	cmp	r2, r3
 8007114:	dd08      	ble.n	8007128 <try_recv+0xcc>
			LCD_Fill(181, 21, 199, 29, YELLOW);
 8007116:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800711a:	9300      	str	r3, [sp, #0]
 800711c:	231d      	movs	r3, #29
 800711e:	22c7      	movs	r2, #199	; 0xc7
 8007120:	2115      	movs	r1, #21
 8007122:	20b5      	movs	r0, #181	; 0xb5
 8007124:	f7fe ffb0 	bl	8006088 <LCD_Fill>
	for (int i = 0; i < 200 * TLE_SCALE; ++i) {
 8007128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800712a:	3301      	adds	r3, #1
 800712c:	647b      	str	r3, [r7, #68]	; 0x44
 800712e:	4b14      	ldr	r3, [pc, #80]	; (8007180 <try_recv+0x124>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	22c8      	movs	r2, #200	; 0xc8
 8007134:	fb02 f303 	mul.w	r3, r2, r3
 8007138:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800713a:	429a      	cmp	r2, r3
 800713c:	dba7      	blt.n	800708e <try_recv+0x32>
 800713e:	e000      	b.n	8007142 <try_recv+0xe6>
			break;
 8007140:	bf00      	nop
		}
	}

	if(friend_mode == 0 || state == STATE_IDLE ){
 8007142:	4b10      	ldr	r3, [pc, #64]	; (8007184 <try_recv+0x128>)
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d003      	beq.n	8007152 <try_recv+0xf6>
 800714a:	4b08      	ldr	r3, [pc, #32]	; (800716c <try_recv+0x110>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d106      	bne.n	8007160 <try_recv+0x104>
		printf("DEBUG: try recv ping time out, disconnect.\n");
 8007152:	480d      	ldr	r0, [pc, #52]	; (8007188 <try_recv+0x12c>)
 8007154:	f003 f876 	bl	800a244 <puts>
			/*state = STATE_IDLE;
			 init = 1;*/
			reset_flags();
 8007158:	f7ff fa0c 	bl	8006574 <reset_flags>
 800715c:	e000      	b.n	8007160 <try_recv+0x104>
			return;
 800715e:	bf00      	nop
	}
}
 8007160:	3748      	adds	r7, #72	; 0x48
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	0800b944 	.word	0x0800b944
 800716c:	200005b8 	.word	0x200005b8
 8007170:	200005b4 	.word	0x200005b4
 8007174:	200005c5 	.word	0x200005c5
 8007178:	200000a8 	.word	0x200000a8
 800717c:	0800b904 	.word	0x0800b904
 8007180:	20000028 	.word	0x20000028
 8007184:	200005af 	.word	0x200005af
 8007188:	0800b918 	.word	0x0800b918

0800718c <try_send>:

void try_send() {
 800718c:	b580      	push	{r7, lr}
 800718e:	b094      	sub	sp, #80	; 0x50
 8007190:	af02      	add	r7, sp, #8
	uint8_t tmp_buff[60] = " \0";
 8007192:	4a45      	ldr	r2, [pc, #276]	; (80072a8 <try_send+0x11c>)
 8007194:	1d3b      	adds	r3, r7, #4
 8007196:	6812      	ldr	r2, [r2, #0]
 8007198:	4611      	mov	r1, r2
 800719a:	8019      	strh	r1, [r3, #0]
 800719c:	3302      	adds	r3, #2
 800719e:	0c12      	lsrs	r2, r2, #16
 80071a0:	701a      	strb	r2, [r3, #0]
 80071a2:	1dfb      	adds	r3, r7, #7
 80071a4:	2239      	movs	r2, #57	; 0x39
 80071a6:	2100      	movs	r1, #0
 80071a8:	4618      	mov	r0, r3
 80071aa:	f002 ffbb 	bl	800a124 <memset>
	uint8_t nrf_state = 0;
 80071ae:	2300      	movs	r3, #0
 80071b0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	if (send_flag == 1) {
 80071b4:	4b3d      	ldr	r3, [pc, #244]	; (80072ac <try_send+0x120>)
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d107      	bne.n	80071cc <try_send+0x40>
		tmp_buff[0] = '@';
 80071bc:	2340      	movs	r3, #64	; 0x40
 80071be:	713b      	strb	r3, [r7, #4]
		strcpy(tmp_buff + 1, send_buff);
 80071c0:	1d3b      	adds	r3, r7, #4
 80071c2:	3301      	adds	r3, #1
 80071c4:	493a      	ldr	r1, [pc, #232]	; (80072b0 <try_send+0x124>)
 80071c6:	4618      	mov	r0, r3
 80071c8:	f003 f864 	bl	800a294 <strcpy>
	}

	NRF24L01_TX_Mode();
 80071cc:	f000 fc4e 	bl	8007a6c <NRF24L01_TX_Mode>

	for (int i = 0; i < 80 * TLE_SCALE; ++i) {
 80071d0:	2300      	movs	r3, #0
 80071d2:	647b      	str	r3, [r7, #68]	; 0x44
 80071d4:	e049      	b.n	800726a <try_send+0xde>
		if (state != STATE_TRY_SEND) {
 80071d6:	4b37      	ldr	r3, [pc, #220]	; (80072b4 <try_send+0x128>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b04      	cmp	r3, #4
 80071dc:	d150      	bne.n	8007280 <try_send+0xf4>
			break;
		}

		++counter;
 80071de:	4b36      	ldr	r3, [pc, #216]	; (80072b8 <try_send+0x12c>)
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	3301      	adds	r3, #1
 80071e4:	b2da      	uxtb	r2, r3
 80071e6:	4b34      	ldr	r3, [pc, #208]	; (80072b8 <try_send+0x12c>)
 80071e8:	701a      	strb	r2, [r3, #0]
		LED_control();
 80071ea:	f7ff fc8f 	bl	8006b0c <LED_control>

		nrf_state = NRF24L01_TxPacket(tmp_buff);
 80071ee:	1d3b      	adds	r3, r7, #4
 80071f0:	4618      	mov	r0, r3
 80071f2:	f000 fb9d 	bl	8007930 <NRF24L01_TxPacket>
 80071f6:	4603      	mov	r3, r0
 80071f8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
//		HAL_Delay(5);

		if (nrf_state == TX_OK) {
 80071fc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007200:	2b20      	cmp	r3, #32
 8007202:	d11c      	bne.n	800723e <try_send+0xb2>
			state = STATE_TRY_RECV;
 8007204:	4b2b      	ldr	r3, [pc, #172]	; (80072b4 <try_send+0x128>)
 8007206:	2205      	movs	r2, #5
 8007208:	601a      	str	r2, [r3, #0]

			LCD_Fill(181, 21, 199, 29, GREEN);
 800720a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	231d      	movs	r3, #29
 8007212:	22c7      	movs	r2, #199	; 0xc7
 8007214:	2115      	movs	r1, #21
 8007216:	20b5      	movs	r0, #181	; 0xb5
 8007218:	f7fe ff36 	bl	8006088 <LCD_Fill>
			if (send_flag == 1) {
 800721c:	4b23      	ldr	r3, [pc, #140]	; (80072ac <try_send+0x120>)
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d13c      	bne.n	800729e <try_send+0x112>
				send_flag = 0;
 8007224:	4b21      	ldr	r3, [pc, #132]	; (80072ac <try_send+0x120>)
 8007226:	2200      	movs	r2, #0
 8007228:	701a      	strb	r2, [r3, #0]
				printf("DEBUG: send --> ");
 800722a:	4824      	ldr	r0, [pc, #144]	; (80072bc <try_send+0x130>)
 800722c:	f002 ff82 	bl	800a134 <iprintf>
				printf(send_buff);
 8007230:	481f      	ldr	r0, [pc, #124]	; (80072b0 <try_send+0x124>)
 8007232:	f002 ff7f 	bl	800a134 <iprintf>
				printf("\n");
 8007236:	200a      	movs	r0, #10
 8007238:	f002 ff94 	bl	800a164 <putchar>
				/*HAL_UART_Transmit(&huart1, (uint8_t*) send_buff,
				 strlen(send_buff),
				 500);*/
			}
			return;
 800723c:	e02f      	b.n	800729e <try_send+0x112>
		}

		if (i > 56 * TLE_SCALE) {
 800723e:	4b20      	ldr	r3, [pc, #128]	; (80072c0 <try_send+0x134>)
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	4613      	mov	r3, r2
 8007244:	00db      	lsls	r3, r3, #3
 8007246:	1a9b      	subs	r3, r3, r2
 8007248:	00db      	lsls	r3, r3, #3
 800724a:	461a      	mov	r2, r3
 800724c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800724e:	4293      	cmp	r3, r2
 8007250:	dd08      	ble.n	8007264 <try_send+0xd8>
			LCD_Fill(181, 21, 199, 29, YELLOW);
 8007252:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8007256:	9300      	str	r3, [sp, #0]
 8007258:	231d      	movs	r3, #29
 800725a:	22c7      	movs	r2, #199	; 0xc7
 800725c:	2115      	movs	r1, #21
 800725e:	20b5      	movs	r0, #181	; 0xb5
 8007260:	f7fe ff12 	bl	8006088 <LCD_Fill>
	for (int i = 0; i < 80 * TLE_SCALE; ++i) {
 8007264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007266:	3301      	adds	r3, #1
 8007268:	647b      	str	r3, [r7, #68]	; 0x44
 800726a:	4b15      	ldr	r3, [pc, #84]	; (80072c0 <try_send+0x134>)
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	4613      	mov	r3, r2
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	4413      	add	r3, r2
 8007274:	011b      	lsls	r3, r3, #4
 8007276:	461a      	mov	r2, r3
 8007278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800727a:	4293      	cmp	r3, r2
 800727c:	dbab      	blt.n	80071d6 <try_send+0x4a>
 800727e:	e000      	b.n	8007282 <try_send+0xf6>
			break;
 8007280:	bf00      	nop
		}

	}

	if(friend_mode==0 || state == STATE_IDLE){
 8007282:	4b10      	ldr	r3, [pc, #64]	; (80072c4 <try_send+0x138>)
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d003      	beq.n	8007292 <try_send+0x106>
 800728a:	4b0a      	ldr	r3, [pc, #40]	; (80072b4 <try_send+0x128>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2b01      	cmp	r3, #1
 8007290:	d106      	bne.n	80072a0 <try_send+0x114>
		printf("DEBUG: try send ping time out, disconnect.\n");
 8007292:	480d      	ldr	r0, [pc, #52]	; (80072c8 <try_send+0x13c>)
 8007294:	f002 ffd6 	bl	800a244 <puts>
			/*state = STATE_IDLE;
			 init = 1;*/
			reset_flags();
 8007298:	f7ff f96c 	bl	8006574 <reset_flags>
 800729c:	e000      	b.n	80072a0 <try_send+0x114>
			return;
 800729e:	bf00      	nop
	}
}
 80072a0:	3748      	adds	r7, #72	; 0x48
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	0800b9c0 	.word	0x0800b9c0
 80072ac:	200005c4 	.word	0x200005c4
 80072b0:	2000006c 	.word	0x2000006c
 80072b4:	200005b8 	.word	0x200005b8
 80072b8:	200005b4 	.word	0x200005b4
 80072bc:	0800b980 	.word	0x0800b980
 80072c0:	20000028 	.word	0x20000028
 80072c4:	200005af 	.word	0x200005af
 80072c8:	0800b994 	.word	0x0800b994

080072cc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	4603      	mov	r3, r0
 80072d4:	80fb      	strh	r3, [r7, #6]
//	HAL_Delay(100);
	switch (GPIO_Pin) {
 80072d6:	88fb      	ldrh	r3, [r7, #6]
 80072d8:	2b20      	cmp	r3, #32
 80072da:	d005      	beq.n	80072e8 <HAL_GPIO_EXTI_Callback+0x1c>
 80072dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072e0:	d02a      	beq.n	8007338 <HAL_GPIO_EXTI_Callback+0x6c>
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d03b      	beq.n	800735e <HAL_GPIO_EXTI_Callback+0x92>
		 HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
		 HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
		 }*/
		break;
	default:
		break;
 80072e6:	e03f      	b.n	8007368 <HAL_GPIO_EXTI_Callback+0x9c>
		if (HAL_GPIO_ReadPin(KEY_UP_GPIO_Port, KEY_UP_Pin) == GPIO_PIN_RESET) {
 80072e8:	2120      	movs	r1, #32
 80072ea:	4821      	ldr	r0, [pc, #132]	; (8007370 <HAL_GPIO_EXTI_Callback+0xa4>)
 80072ec:	f001 fa68 	bl	80087c0 <HAL_GPIO_ReadPin>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d135      	bne.n	8007362 <HAL_GPIO_EXTI_Callback+0x96>
			HAL_Delay(100);
 80072f6:	2064      	movs	r0, #100	; 0x64
 80072f8:	f000 fec0 	bl	800807c <HAL_Delay>
			if (state == STATE_REQ_CONN) {
 80072fc:	4b1d      	ldr	r3, [pc, #116]	; (8007374 <HAL_GPIO_EXTI_Callback+0xa8>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b02      	cmp	r3, #2
 8007302:	d106      	bne.n	8007312 <HAL_GPIO_EXTI_Callback+0x46>
				state = STATE_WAIT_CONN;
 8007304:	4b1b      	ldr	r3, [pc, #108]	; (8007374 <HAL_GPIO_EXTI_Callback+0xa8>)
 8007306:	2203      	movs	r2, #3
 8007308:	601a      	str	r2, [r3, #0]
				printf("DEBUG: Try waiting active conn\n");
 800730a:	481b      	ldr	r0, [pc, #108]	; (8007378 <HAL_GPIO_EXTI_Callback+0xac>)
 800730c:	f002 ff9a 	bl	800a244 <puts>
		break;
 8007310:	e027      	b.n	8007362 <HAL_GPIO_EXTI_Callback+0x96>
			} else if (state == STATE_WAIT_CONN) {
 8007312:	4b18      	ldr	r3, [pc, #96]	; (8007374 <HAL_GPIO_EXTI_Callback+0xa8>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2b03      	cmp	r3, #3
 8007318:	d108      	bne.n	800732c <HAL_GPIO_EXTI_Callback+0x60>
				state = STATE_IDLE;
 800731a:	4b16      	ldr	r3, [pc, #88]	; (8007374 <HAL_GPIO_EXTI_Callback+0xa8>)
 800731c:	2201      	movs	r2, #1
 800731e:	601a      	str	r2, [r3, #0]
				reset_flags();
 8007320:	f7ff f928 	bl	8006574 <reset_flags>
				printf("DEBUG: Active cancel connection\n");
 8007324:	4815      	ldr	r0, [pc, #84]	; (800737c <HAL_GPIO_EXTI_Callback+0xb0>)
 8007326:	f002 ff8d 	bl	800a244 <puts>
		break;
 800732a:	e01a      	b.n	8007362 <HAL_GPIO_EXTI_Callback+0x96>
				reset_flags();
 800732c:	f7ff f922 	bl	8006574 <reset_flags>
				printf("DEBUG: Active disconnection\n");
 8007330:	4813      	ldr	r0, [pc, #76]	; (8007380 <HAL_GPIO_EXTI_Callback+0xb4>)
 8007332:	f002 ff87 	bl	800a244 <puts>
		break;
 8007336:	e014      	b.n	8007362 <HAL_GPIO_EXTI_Callback+0x96>
		if (HAL_GPIO_ReadPin(KEY_DOWN_GPIO_Port, KEY_DOWN_Pin)
 8007338:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800733c:	4811      	ldr	r0, [pc, #68]	; (8007384 <HAL_GPIO_EXTI_Callback+0xb8>)
 800733e:	f001 fa3f 	bl	80087c0 <HAL_GPIO_ReadPin>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10e      	bne.n	8007366 <HAL_GPIO_EXTI_Callback+0x9a>
			if (state == STATE_IDLE) {
 8007348:	4b0a      	ldr	r3, [pc, #40]	; (8007374 <HAL_GPIO_EXTI_Callback+0xa8>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2b01      	cmp	r3, #1
 800734e:	d10a      	bne.n	8007366 <HAL_GPIO_EXTI_Callback+0x9a>
				printf("DEBUG: Try active conn\n");
 8007350:	480d      	ldr	r0, [pc, #52]	; (8007388 <HAL_GPIO_EXTI_Callback+0xbc>)
 8007352:	f002 ff77 	bl	800a244 <puts>
				state = STATE_REQ_CONN;
 8007356:	4b07      	ldr	r3, [pc, #28]	; (8007374 <HAL_GPIO_EXTI_Callback+0xa8>)
 8007358:	2202      	movs	r2, #2
 800735a:	601a      	str	r2, [r3, #0]
		break;
 800735c:	e003      	b.n	8007366 <HAL_GPIO_EXTI_Callback+0x9a>
		break;
 800735e:	bf00      	nop
 8007360:	e002      	b.n	8007368 <HAL_GPIO_EXTI_Callback+0x9c>
		break;
 8007362:	bf00      	nop
 8007364:	e000      	b.n	8007368 <HAL_GPIO_EXTI_Callback+0x9c>
		break;
 8007366:	bf00      	nop
	}
}
 8007368:	bf00      	nop
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	40011000 	.word	0x40011000
 8007374:	200005b8 	.word	0x200005b8
 8007378:	0800b9fc 	.word	0x0800b9fc
 800737c:	0800ba1c 	.word	0x0800ba1c
 8007380:	0800ba3c 	.word	0x0800ba3c
 8007384:	40010800 	.word	0x40010800
 8007388:	0800ba58 	.word	0x0800ba58

0800738c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8007392:	f000 fe11 	bl	8007fb8 <HAL_Init>

	/* USER CODE BEGIN Init */
	LCD_Init();
 8007396:	f7fa fee7 	bl	8002168 <LCD_Init>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800739a:	f000 f8f3 	bl	8007584 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800739e:	f7f9 fb39 	bl	8000a14 <MX_GPIO_Init>
	MX_SPI1_Init();
 80073a2:	f000 fba1 	bl	8007ae8 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 80073a6:	f000 fd51 	bl	8007e4c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	NRF24L01_Init();
 80073aa:	f000 f957 	bl	800765c <NRF24L01_Init>
	init = 1;
 80073ae:	4b66      	ldr	r3, [pc, #408]	; (8007548 <main+0x1bc>)
 80073b0:	2201      	movs	r2, #1
 80073b2:	701a      	strb	r2, [r3, #0]
	LCD_Rec();
 80073b4:	f7ff f960 	bl	8006678 <LCD_Rec>
	state = STATE_UNCHECK_MODE;
 80073b8:	4b64      	ldr	r3, [pc, #400]	; (800754c <main+0x1c0>)
 80073ba:	2200      	movs	r2, #0
 80073bc:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80073be:	2201      	movs	r2, #1
 80073c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80073c4:	4862      	ldr	r0, [pc, #392]	; (8007550 <main+0x1c4>)
 80073c6:	f001 fa12 	bl	80087ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80073ca:	2201      	movs	r2, #1
 80073cc:	2104      	movs	r1, #4
 80073ce:	4861      	ldr	r0, [pc, #388]	; (8007554 <main+0x1c8>)
 80073d0:	f001 fa0d 	bl	80087ee <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80073d4:	2005      	movs	r0, #5
 80073d6:	f000 fe51 	bl	800807c <HAL_Delay>
	HAL_UART_Receive_IT(&huart1, (uint8_t*) rxBuffer, 1);
 80073da:	2201      	movs	r2, #1
 80073dc:	495e      	ldr	r1, [pc, #376]	; (8007558 <main+0x1cc>)
 80073de:	485f      	ldr	r0, [pc, #380]	; (800755c <main+0x1d0>)
 80073e0:	f002 fb1b 	bl	8009a1a <HAL_UART_Receive_IT>

	for (int j = 0; j < 100; ++j) {
 80073e4:	2300      	movs	r3, #0
 80073e6:	607b      	str	r3, [r7, #4]
 80073e8:	e00d      	b.n	8007406 <main+0x7a>
		outputData[j][l] = '\0';
 80073ea:	495d      	ldr	r1, [pc, #372]	; (8007560 <main+0x1d4>)
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	4613      	mov	r3, r2
 80073f0:	005b      	lsls	r3, r3, #1
 80073f2:	4413      	add	r3, r2
 80073f4:	00db      	lsls	r3, r3, #3
 80073f6:	1a9b      	subs	r3, r3, r2
 80073f8:	440b      	add	r3, r1
 80073fa:	3316      	adds	r3, #22
 80073fc:	2200      	movs	r2, #0
 80073fe:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 100; ++j) {
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	3301      	adds	r3, #1
 8007404:	607b      	str	r3, [r7, #4]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2b63      	cmp	r3, #99	; 0x63
 800740a:	ddee      	ble.n	80073ea <main+0x5e>
	}
	printf(tip);
 800740c:	4855      	ldr	r0, [pc, #340]	; (8007564 <main+0x1d8>)
 800740e:	f002 fe91 	bl	800a134 <iprintf>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
		++counter;
 8007412:	4b55      	ldr	r3, [pc, #340]	; (8007568 <main+0x1dc>)
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	3301      	adds	r3, #1
 8007418:	b2da      	uxtb	r2, r3
 800741a:	4b53      	ldr	r3, [pc, #332]	; (8007568 <main+0x1dc>)
 800741c:	701a      	strb	r2, [r3, #0]
		//printf("%d", state);
		HAL_Delay(20);
 800741e:	2014      	movs	r0, #20
 8007420:	f000 fe2c 	bl	800807c <HAL_Delay>
		if (counter % 25 == 0 && NRF24L01_Check() == 1) {
 8007424:	4b50      	ldr	r3, [pc, #320]	; (8007568 <main+0x1dc>)
 8007426:	781a      	ldrb	r2, [r3, #0]
 8007428:	4b50      	ldr	r3, [pc, #320]	; (800756c <main+0x1e0>)
 800742a:	fba3 1302 	umull	r1, r3, r3, r2
 800742e:	08d9      	lsrs	r1, r3, #3
 8007430:	460b      	mov	r3, r1
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	440b      	add	r3, r1
 8007436:	0099      	lsls	r1, r3, #2
 8007438:	440b      	add	r3, r1
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	b2db      	uxtb	r3, r3
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10a      	bne.n	8007458 <main+0xcc>
 8007442:	f000 f985 	bl	8007750 <NRF24L01_Check>
 8007446:	4603      	mov	r3, r0
 8007448:	2b01      	cmp	r3, #1
 800744a:	d105      	bne.n	8007458 <main+0xcc>
			state = STATE_UNCHECK_MODE;
 800744c:	4b3f      	ldr	r3, [pc, #252]	; (800754c <main+0x1c0>)
 800744e:	2200      	movs	r2, #0
 8007450:	601a      	str	r2, [r3, #0]
			printf("DEBUG: Module exception.\n");
 8007452:	4847      	ldr	r0, [pc, #284]	; (8007570 <main+0x1e4>)
 8007454:	f002 fef6 	bl	800a244 <puts>
		}
		// USER CODE END WHILE
		LCD_Head();
 8007458:	f7ff f956 	bl	8006708 <LCD_Head>
		switch (state) {
 800745c:	4b3b      	ldr	r3, [pc, #236]	; (800754c <main+0x1c0>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b05      	cmp	r3, #5
 8007462:	d869      	bhi.n	8007538 <main+0x1ac>
 8007464:	a201      	add	r2, pc, #4	; (adr r2, 800746c <main+0xe0>)
 8007466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746a:	bf00      	nop
 800746c:	08007485 	.word	0x08007485
 8007470:	08007539 	.word	0x08007539
 8007474:	080074d9 	.word	0x080074d9
 8007478:	08007539 	.word	0x08007539
 800747c:	08007519 	.word	0x08007519
 8007480:	080074f9 	.word	0x080074f9
		case STATE_UNCHECK_MODE:
			LCD_Unconn();
 8007484:	f7ff f9ea 	bl	800685c <LCD_Unconn>
			if (counter % 50 == 0) {
 8007488:	4b37      	ldr	r3, [pc, #220]	; (8007568 <main+0x1dc>)
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	4a37      	ldr	r2, [pc, #220]	; (800756c <main+0x1e0>)
 800748e:	fba2 1203 	umull	r1, r2, r2, r3
 8007492:	0912      	lsrs	r2, r2, #4
 8007494:	2132      	movs	r1, #50	; 0x32
 8007496:	fb01 f202 	mul.w	r2, r1, r2
 800749a:	1a9b      	subs	r3, r3, r2
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d102      	bne.n	80074a8 <main+0x11c>
				printf("DEBUG: Checking module\n");
 80074a2:	4834      	ldr	r0, [pc, #208]	; (8007574 <main+0x1e8>)
 80074a4:	f002 fece 	bl	800a244 <puts>
			}
			for (int i = 0; i < 300; ++i) {
 80074a8:	2300      	movs	r3, #0
 80074aa:	603b      	str	r3, [r7, #0]
 80074ac:	e00f      	b.n	80074ce <main+0x142>
				if (NRF24L01_Check() == 0) {
 80074ae:	f000 f94f 	bl	8007750 <NRF24L01_Check>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d107      	bne.n	80074c8 <main+0x13c>
					printf("DEBUG: Module pass check\n");
 80074b8:	482f      	ldr	r0, [pc, #188]	; (8007578 <main+0x1ec>)
 80074ba:	f002 fec3 	bl	800a244 <puts>
					state = STATE_IDLE;
 80074be:	4b23      	ldr	r3, [pc, #140]	; (800754c <main+0x1c0>)
 80074c0:	2201      	movs	r2, #1
 80074c2:	601a      	str	r2, [r3, #0]
					break;
 80074c4:	bf00      	nop
				}
			}

			break;
 80074c6:	e03d      	b.n	8007544 <main+0x1b8>
			for (int i = 0; i < 300; ++i) {
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	3301      	adds	r3, #1
 80074cc:	603b      	str	r3, [r7, #0]
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80074d4:	dbeb      	blt.n	80074ae <main+0x122>
			break;
 80074d6:	e035      	b.n	8007544 <main+0x1b8>

		case STATE_REQ_CONN:
			LCD_Unconn();
 80074d8:	f7ff f9c0 	bl	800685c <LCD_Unconn>
			HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80074dc:	2200      	movs	r2, #0
 80074de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80074e2:	481b      	ldr	r0, [pc, #108]	; (8007550 <main+0x1c4>)
 80074e4:	f001 f983 	bl	80087ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80074e8:	2201      	movs	r2, #1
 80074ea:	2104      	movs	r1, #4
 80074ec:	4819      	ldr	r0, [pc, #100]	; (8007554 <main+0x1c8>)
 80074ee:	f001 f97e 	bl	80087ee <HAL_GPIO_WritePin>
			try_conn();
 80074f2:	f7ff fcd3 	bl	8006e9c <try_conn>
			break;
 80074f6:	e025      	b.n	8007544 <main+0x1b8>
		case STATE_TRY_RECV:
			LCD_Conn();
 80074f8:	f7ff f9b6 	bl	8006868 <LCD_Conn>
			try_recv();
 80074fc:	f7ff fdae 	bl	800705c <try_recv>
			if (friend_mode == 1 && send_to_friend == 0) {
 8007500:	4b1e      	ldr	r3, [pc, #120]	; (800757c <main+0x1f0>)
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d11a      	bne.n	800753e <main+0x1b2>
 8007508:	4b1d      	ldr	r3, [pc, #116]	; (8007580 <main+0x1f4>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d116      	bne.n	800753e <main+0x1b2>
				state = STATE_TRY_RECV;
 8007510:	4b0e      	ldr	r3, [pc, #56]	; (800754c <main+0x1c0>)
 8007512:	2205      	movs	r2, #5
 8007514:	601a      	str	r2, [r3, #0]
			}
			break;
 8007516:	e012      	b.n	800753e <main+0x1b2>
		case STATE_TRY_SEND:
			LCD_Conn();
 8007518:	f7ff f9a6 	bl	8006868 <LCD_Conn>
			try_send();
 800751c:	f7ff fe36 	bl	800718c <try_send>
			if (friend_mode == 1 && send_to_friend == 1) {
 8007520:	4b16      	ldr	r3, [pc, #88]	; (800757c <main+0x1f0>)
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d10c      	bne.n	8007542 <main+0x1b6>
 8007528:	4b15      	ldr	r3, [pc, #84]	; (8007580 <main+0x1f4>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d108      	bne.n	8007542 <main+0x1b6>
				state = STATE_TRY_SEND;
 8007530:	4b06      	ldr	r3, [pc, #24]	; (800754c <main+0x1c0>)
 8007532:	2204      	movs	r2, #4
 8007534:	601a      	str	r2, [r3, #0]
			}
			break;
 8007536:	e004      	b.n	8007542 <main+0x1b6>
		default:
			LCD_Unconn();
 8007538:	f7ff f990 	bl	800685c <LCD_Unconn>
			break;
 800753c:	e002      	b.n	8007544 <main+0x1b8>
			break;
 800753e:	bf00      	nop
 8007540:	e767      	b.n	8007412 <main+0x86>
			break;
 8007542:	bf00      	nop
		++counter;
 8007544:	e765      	b.n	8007412 <main+0x86>
 8007546:	bf00      	nop
 8007548:	20000002 	.word	0x20000002
 800754c:	200005b8 	.word	0x200005b8
 8007550:	40010800 	.word	0x40010800
 8007554:	40011400 	.word	0x40011400
 8007558:	20000774 	.word	0x20000774
 800755c:	200010ec 	.word	0x200010ec
 8007560:	20000798 	.word	0x20000798
 8007564:	200000e4 	.word	0x200000e4
 8007568:	200005b4 	.word	0x200005b4
 800756c:	51eb851f 	.word	0x51eb851f
 8007570:	0800ba70 	.word	0x0800ba70
 8007574:	0800ba8c 	.word	0x0800ba8c
 8007578:	0800baa4 	.word	0x0800baa4
 800757c:	200005af 	.word	0x200005af
 8007580:	2000002c 	.word	0x2000002c

08007584 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8007584:	b580      	push	{r7, lr}
 8007586:	b090      	sub	sp, #64	; 0x40
 8007588:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800758a:	f107 0318 	add.w	r3, r7, #24
 800758e:	2228      	movs	r2, #40	; 0x28
 8007590:	2100      	movs	r1, #0
 8007592:	4618      	mov	r0, r3
 8007594:	f002 fdc6 	bl	800a124 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8007598:	1d3b      	adds	r3, r7, #4
 800759a:	2200      	movs	r2, #0
 800759c:	601a      	str	r2, [r3, #0]
 800759e:	605a      	str	r2, [r3, #4]
 80075a0:	609a      	str	r2, [r3, #8]
 80075a2:	60da      	str	r2, [r3, #12]
 80075a4:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80075a6:	2301      	movs	r3, #1
 80075a8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80075aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80075ae:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80075b0:	2300      	movs	r3, #0
 80075b2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80075b4:	2301      	movs	r3, #1
 80075b6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80075b8:	2302      	movs	r3, #2
 80075ba:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80075bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80075c0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80075c2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80075c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80075c8:	f107 0318 	add.w	r3, r7, #24
 80075cc:	4618      	mov	r0, r3
 80075ce:	f001 f957 	bl	8008880 <HAL_RCC_OscConfig>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d001      	beq.n	80075dc <SystemClock_Config+0x58>
		Error_Handler();
 80075d8:	f000 f819 	bl	800760e <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80075dc:	230f      	movs	r3, #15
 80075de:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80075e0:	2302      	movs	r3, #2
 80075e2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80075e4:	2300      	movs	r3, #0
 80075e6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80075e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075ec:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80075ee:	2300      	movs	r3, #0
 80075f0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80075f2:	1d3b      	adds	r3, r7, #4
 80075f4:	2102      	movs	r1, #2
 80075f6:	4618      	mov	r0, r3
 80075f8:	f001 fbc2 	bl	8008d80 <HAL_RCC_ClockConfig>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d001      	beq.n	8007606 <SystemClock_Config+0x82>
		Error_Handler();
 8007602:	f000 f804 	bl	800760e <Error_Handler>
	}
}
 8007606:	bf00      	nop
 8007608:	3740      	adds	r7, #64	; 0x40
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800760e:	b480      	push	{r7}
 8007610:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8007612:	bf00      	nop
 8007614:	46bd      	mov	sp, r7
 8007616:	bc80      	pop	{r7}
 8007618:	4770      	bx	lr
	...

0800761c <NRF24L01_SPI_Init>:
uint8_t RX_ADDRESS[RX_ADR_WIDTH] = { 0x20, 0x00, 0x08, 0x31, 0xaa }; //接收地址
uint8_t recv_ch = 40;
uint8_t send_ch = 40;

//针对NRF24L01修改SPI1驱动
void NRF24L01_SPI_Init(void) {
 800761c:	b580      	push	{r7, lr}
 800761e:	af00      	add	r7, sp, #0
	__HAL_SPI_DISABLE(&hspi1);               //先关闭SPI1
 8007620:	4b0d      	ldr	r3, [pc, #52]	; (8007658 <NRF24L01_SPI_Init+0x3c>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	4b0c      	ldr	r3, [pc, #48]	; (8007658 <NRF24L01_SPI_Init+0x3c>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800762e:	601a      	str	r2, [r3, #0]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW; //串行同步时钟的空闲状态为低电平
 8007630:	4b09      	ldr	r3, [pc, #36]	; (8007658 <NRF24L01_SPI_Init+0x3c>)
 8007632:	2200      	movs	r2, #0
 8007634:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;     //串行同步时钟的第1个跳变沿（上升或下降）数据被采样
 8007636:	4b08      	ldr	r3, [pc, #32]	; (8007658 <NRF24L01_SPI_Init+0x3c>)
 8007638:	2200      	movs	r2, #0
 800763a:	615a      	str	r2, [r3, #20]
	HAL_SPI_Init(&hspi1);
 800763c:	4806      	ldr	r0, [pc, #24]	; (8007658 <NRF24L01_SPI_Init+0x3c>)
 800763e:	f001 fd3b 	bl	80090b8 <HAL_SPI_Init>
	__HAL_SPI_ENABLE(&hspi1);                //使能SPI1
 8007642:	4b05      	ldr	r3, [pc, #20]	; (8007658 <NRF24L01_SPI_Init+0x3c>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	4b03      	ldr	r3, [pc, #12]	; (8007658 <NRF24L01_SPI_Init+0x3c>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007650:	601a      	str	r2, [r3, #0]
}
 8007652:	bf00      	nop
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	20001094 	.word	0x20001094

0800765c <NRF24L01_Init>:

//初始化24L01的IO口
void NRF24L01_Init(void) {
 800765c:	b580      	push	{r7, lr}
 800765e:	b086      	sub	sp, #24
 8007660:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_Initure;
	__HAL_RCC_GPIOA_CLK_ENABLE();			//开启GPIOA时钟
 8007662:	4b13      	ldr	r3, [pc, #76]	; (80076b0 <NRF24L01_Init+0x54>)
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	4a12      	ldr	r2, [pc, #72]	; (80076b0 <NRF24L01_Init+0x54>)
 8007668:	f043 0304 	orr.w	r3, r3, #4
 800766c:	6193      	str	r3, [r2, #24]
 800766e:	4b10      	ldr	r3, [pc, #64]	; (80076b0 <NRF24L01_Init+0x54>)
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	f003 0304 	and.w	r3, r3, #4
 8007676:	607b      	str	r3, [r7, #4]
 8007678:	687b      	ldr	r3, [r7, #4]
//    GPIO_Initure.Pin=GPIO_PIN_1|GPIO_PIN_2;	//PB1,2
//    GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;  //输出
//    HAL_GPIO_Init(GPIOB,&GPIO_Initure);     //初始化

	//GPIOA.4上拉输入
	GPIO_Initure.Pin = GPIO_PIN_4;							//PA4
 800767a:	2310      	movs	r3, #16
 800767c:	60bb      	str	r3, [r7, #8]
	GPIO_Initure.Mode = GPIO_MODE_INPUT;      	//输入
 800767e:	2300      	movs	r3, #0
 8007680:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_Initure);     	//初始化
 8007682:	f107 0308 	add.w	r3, r7, #8
 8007686:	4619      	mov	r1, r3
 8007688:	480a      	ldr	r0, [pc, #40]	; (80076b4 <NRF24L01_Init+0x58>)
 800768a:	f000 ff2f 	bl	80084ec <HAL_GPIO_Init>

//		MX_SPI1_Init();    		              			//初始化SPI1
	NRF24L01_SPI_Init();                			//针对NRF的特点修改SPI的设置
 800768e:	f7ff ffc5 	bl	800761c <NRF24L01_SPI_Init>
	NRF24L01_CE_LOW(); 			            			//使能24L01
 8007692:	2200      	movs	r2, #0
 8007694:	2110      	movs	r1, #16
 8007696:	4807      	ldr	r0, [pc, #28]	; (80076b4 <NRF24L01_Init+0x58>)
 8007698:	f001 f8a9 	bl	80087ee <HAL_GPIO_WritePin>
	NRF24L01_SPI_CS_DISABLE();			    			//SPI片选取消
 800769c:	2201      	movs	r2, #1
 800769e:	2110      	movs	r1, #16
 80076a0:	4805      	ldr	r0, [pc, #20]	; (80076b8 <NRF24L01_Init+0x5c>)
 80076a2:	f001 f8a4 	bl	80087ee <HAL_GPIO_WritePin>
}
 80076a6:	bf00      	nop
 80076a8:	3718      	adds	r7, #24
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	40021000 	.word	0x40021000
 80076b4:	40010800 	.word	0x40010800
 80076b8:	40011000 	.word	0x40011000

080076bc <SPI1_SetSpeed>:
 *SPI速度设置函数
 *SPI速度=fAPB1/分频系数
 *@ref SPI_BaudRate_Prescaler:SPI_BAUDRATEPRESCALER_2~SPI_BAUDRATEPRESCALER_2 256
 *fAPB1时钟一般为42Mhz：
 */
static void SPI1_SetSpeed(uint8_t SPI_BaudRatePrescaler) {
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	4603      	mov	r3, r0
 80076c4:	71fb      	strb	r3, [r7, #7]
	assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_BaudRatePrescaler));		//判断有效性
	__HAL_SPI_DISABLE(&hspi1);            //关闭SPI
 80076c6:	4b13      	ldr	r3, [pc, #76]	; (8007714 <SPI1_SetSpeed+0x58>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	4b11      	ldr	r3, [pc, #68]	; (8007714 <SPI1_SetSpeed+0x58>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076d4:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 &= 0XFFC7;          //位3-5清零，用来设置波特率
 80076d6:	4b0f      	ldr	r3, [pc, #60]	; (8007714 <SPI1_SetSpeed+0x58>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	6819      	ldr	r1, [r3, #0]
 80076dc:	4b0d      	ldr	r3, [pc, #52]	; (8007714 <SPI1_SetSpeed+0x58>)
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 80076e4:	400b      	ands	r3, r1
 80076e6:	6013      	str	r3, [r2, #0]
	hspi1.Instance->CR1 |= SPI_BaudRatePrescaler;          //设置SPI速度
 80076e8:	4b0a      	ldr	r3, [pc, #40]	; (8007714 <SPI1_SetSpeed+0x58>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	6819      	ldr	r1, [r3, #0]
 80076ee:	79fa      	ldrb	r2, [r7, #7]
 80076f0:	4b08      	ldr	r3, [pc, #32]	; (8007714 <SPI1_SetSpeed+0x58>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	430a      	orrs	r2, r1
 80076f6:	601a      	str	r2, [r3, #0]
	__HAL_SPI_ENABLE(&hspi1);             //使能SPI
 80076f8:	4b06      	ldr	r3, [pc, #24]	; (8007714 <SPI1_SetSpeed+0x58>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	4b05      	ldr	r3, [pc, #20]	; (8007714 <SPI1_SetSpeed+0x58>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007706:	601a      	str	r2, [r3, #0]
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	bc80      	pop	{r7}
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	20001094 	.word	0x20001094

08007718 <SPIx_ReadWriteByte>:
 * 函数功能: 往串行Flash读取写入一个字节数据并接收一个字节数据
 * 输入参数: byte：待发送数据
 * 返 回 值: uint8_t：接收到的数据
 * 说    明：无
 */
uint8_t SPIx_ReadWriteByte(SPI_HandleTypeDef *hspi, uint8_t byte) {
 8007718:	b580      	push	{r7, lr}
 800771a:	b086      	sub	sp, #24
 800771c:	af02      	add	r7, sp, #8
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	460b      	mov	r3, r1
 8007722:	70fb      	strb	r3, [r7, #3]
	uint8_t d_read, d_send = byte;
 8007724:	78fb      	ldrb	r3, [r7, #3]
 8007726:	73bb      	strb	r3, [r7, #14]
	if (HAL_SPI_TransmitReceive(hspi, &d_send, &d_read, 1, 0xFF) != HAL_OK) {
 8007728:	f107 020f 	add.w	r2, r7, #15
 800772c:	f107 010e 	add.w	r1, r7, #14
 8007730:	23ff      	movs	r3, #255	; 0xff
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	2301      	movs	r3, #1
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f001 fd42 	bl	80091c0 <HAL_SPI_TransmitReceive>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d001      	beq.n	8007746 <SPIx_ReadWriteByte+0x2e>
		d_read = 0xFF;
 8007742:	23ff      	movs	r3, #255	; 0xff
 8007744:	73fb      	strb	r3, [r7, #15]
	}
	return d_read;
 8007746:	7bfb      	ldrb	r3, [r7, #15]
}
 8007748:	4618      	mov	r0, r3
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <NRF24L01_Check>:
 * 返 回 值: 0，成功;1，失败
 * 说    明：无
 */

//UART_HandleTypeDef huart1;
uint8_t NRF24L01_Check(void) {
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
	uint8_t buf[5] = { 0XA5, 0XA5, 0XA5, 0XA5, 0XA5 };
 8007756:	4a1a      	ldr	r2, [pc, #104]	; (80077c0 <NRF24L01_Check+0x70>)
 8007758:	f107 0308 	add.w	r3, r7, #8
 800775c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007760:	6018      	str	r0, [r3, #0]
 8007762:	3304      	adds	r3, #4
 8007764:	7019      	strb	r1, [r3, #0]
	uint8_t buf1[5];
	uint8_t i;

	SPI1_SetSpeed(SPI_BAUDRATEPRESCALER_4); //spi速度为8.0Mhz（（24L01的最大SPI时钟为10Mhz,这里大一点没关系）
 8007766:	2008      	movs	r0, #8
 8007768:	f7ff ffa8 	bl	80076bc <SPI1_SetSpeed>
	NRF24L01_Write_Buf(NRF_WRITE_REG + TX_ADDR, buf, 5); //写入5个字节的地址.
 800776c:	f107 0308 	add.w	r3, r7, #8
 8007770:	2205      	movs	r2, #5
 8007772:	4619      	mov	r1, r3
 8007774:	2030      	movs	r0, #48	; 0x30
 8007776:	f000 f8a7 	bl	80078c8 <NRF24L01_Write_Buf>
	NRF24L01_Read_Buf(TX_ADDR, buf1, 5); //读出写入的地址
 800777a:	463b      	mov	r3, r7
 800777c:	2205      	movs	r2, #5
 800777e:	4619      	mov	r1, r3
 8007780:	2010      	movs	r0, #16
 8007782:	f000 f86b 	bl	800785c <NRF24L01_Read_Buf>
	for (i = 0; i < 5; i++) {
 8007786:	2300      	movs	r3, #0
 8007788:	73fb      	strb	r3, [r7, #15]
 800778a:	e00a      	b.n	80077a2 <NRF24L01_Check+0x52>
		if (buf1[i] != 0XA5)
 800778c:	7bfb      	ldrb	r3, [r7, #15]
 800778e:	f107 0210 	add.w	r2, r7, #16
 8007792:	4413      	add	r3, r2
 8007794:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8007798:	2ba5      	cmp	r3, #165	; 0xa5
 800779a:	d106      	bne.n	80077aa <NRF24L01_Check+0x5a>
	for (i = 0; i < 5; i++) {
 800779c:	7bfb      	ldrb	r3, [r7, #15]
 800779e:	3301      	adds	r3, #1
 80077a0:	73fb      	strb	r3, [r7, #15]
 80077a2:	7bfb      	ldrb	r3, [r7, #15]
 80077a4:	2b04      	cmp	r3, #4
 80077a6:	d9f1      	bls.n	800778c <NRF24L01_Check+0x3c>
 80077a8:	e000      	b.n	80077ac <NRF24L01_Check+0x5c>
			break;
 80077aa:	bf00      	nop
	}
	if (i != 5)
 80077ac:	7bfb      	ldrb	r3, [r7, #15]
 80077ae:	2b05      	cmp	r3, #5
 80077b0:	d001      	beq.n	80077b6 <NRF24L01_Check+0x66>
		return 1; //检测24L01错误
 80077b2:	2301      	movs	r3, #1
 80077b4:	e000      	b.n	80077b8 <NRF24L01_Check+0x68>
	return 0;		 	//检测到24L01
 80077b6:	2300      	movs	r3, #0

}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	0800bac0 	.word	0x0800bac0

080077c4 <NRF24L01_Write_Reg>:
 * 输入参数: 无
 * 返 回 值: 无
 * 说    明：reg:指定寄存器地址
 *
 */
uint8_t NRF24L01_Write_Reg(uint8_t reg, uint8_t value) {
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	4603      	mov	r3, r0
 80077cc:	460a      	mov	r2, r1
 80077ce:	71fb      	strb	r3, [r7, #7]
 80077d0:	4613      	mov	r3, r2
 80077d2:	71bb      	strb	r3, [r7, #6]
	uint8_t status;
	NRF24L01_SPI_CS_ENABLE();                 //使能SPI传输
 80077d4:	2200      	movs	r2, #0
 80077d6:	2110      	movs	r1, #16
 80077d8:	480c      	ldr	r0, [pc, #48]	; (800780c <NRF24L01_Write_Reg+0x48>)
 80077da:	f001 f808 	bl	80087ee <HAL_GPIO_WritePin>
	status = SPIx_ReadWriteByte(&hspi1, reg);   //发送寄存器号
 80077de:	79fb      	ldrb	r3, [r7, #7]
 80077e0:	4619      	mov	r1, r3
 80077e2:	480b      	ldr	r0, [pc, #44]	; (8007810 <NRF24L01_Write_Reg+0x4c>)
 80077e4:	f7ff ff98 	bl	8007718 <SPIx_ReadWriteByte>
 80077e8:	4603      	mov	r3, r0
 80077ea:	73fb      	strb	r3, [r7, #15]
	SPIx_ReadWriteByte(&hspi1, value);         //写入寄存器的值
 80077ec:	79bb      	ldrb	r3, [r7, #6]
 80077ee:	4619      	mov	r1, r3
 80077f0:	4807      	ldr	r0, [pc, #28]	; (8007810 <NRF24L01_Write_Reg+0x4c>)
 80077f2:	f7ff ff91 	bl	8007718 <SPIx_ReadWriteByte>
	NRF24L01_SPI_CS_DISABLE();                //禁止SPI传输
 80077f6:	2201      	movs	r2, #1
 80077f8:	2110      	movs	r1, #16
 80077fa:	4804      	ldr	r0, [pc, #16]	; (800780c <NRF24L01_Write_Reg+0x48>)
 80077fc:	f000 fff7 	bl	80087ee <HAL_GPIO_WritePin>
	return (status);       			//返回状态值
 8007800:	7bfb      	ldrb	r3, [r7, #15]
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	40011000 	.word	0x40011000
 8007810:	20001094 	.word	0x20001094

08007814 <NRF24L01_Read_Reg>:
 * 输入参数: 无
 * 返 回 值: 无
 * 说    明：reg:要读的寄存器
 *
 */
uint8_t NRF24L01_Read_Reg(uint8_t reg) {
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	4603      	mov	r3, r0
 800781c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_val;
	NRF24L01_SPI_CS_ENABLE();          //使能SPI传输
 800781e:	2200      	movs	r2, #0
 8007820:	2110      	movs	r1, #16
 8007822:	480c      	ldr	r0, [pc, #48]	; (8007854 <NRF24L01_Read_Reg+0x40>)
 8007824:	f000 ffe3 	bl	80087ee <HAL_GPIO_WritePin>
	SPIx_ReadWriteByte(&hspi1, reg);   //发送寄存器号
 8007828:	79fb      	ldrb	r3, [r7, #7]
 800782a:	4619      	mov	r1, r3
 800782c:	480a      	ldr	r0, [pc, #40]	; (8007858 <NRF24L01_Read_Reg+0x44>)
 800782e:	f7ff ff73 	bl	8007718 <SPIx_ReadWriteByte>
	reg_val = SPIx_ReadWriteByte(&hspi1, 0XFF);   //读取寄存器内容
 8007832:	21ff      	movs	r1, #255	; 0xff
 8007834:	4808      	ldr	r0, [pc, #32]	; (8007858 <NRF24L01_Read_Reg+0x44>)
 8007836:	f7ff ff6f 	bl	8007718 <SPIx_ReadWriteByte>
 800783a:	4603      	mov	r3, r0
 800783c:	73fb      	strb	r3, [r7, #15]
	NRF24L01_SPI_CS_DISABLE();          //禁止SPI传输
 800783e:	2201      	movs	r2, #1
 8007840:	2110      	movs	r1, #16
 8007842:	4804      	ldr	r0, [pc, #16]	; (8007854 <NRF24L01_Read_Reg+0x40>)
 8007844:	f000 ffd3 	bl	80087ee <HAL_GPIO_WritePin>
	return (reg_val);           //返回状态值
 8007848:	7bfb      	ldrb	r3, [r7, #15]
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	40011000 	.word	0x40011000
 8007858:	20001094 	.word	0x20001094

0800785c <NRF24L01_Read_Buf>:
 * 输入参数: 无
 * 返 回 值: 此次读到的状态寄存器值
 * 说    明：无
 *
 */
uint8_t NRF24L01_Read_Buf(uint8_t reg, uint8_t *pBuf, uint8_t len) {
 800785c:	b590      	push	{r4, r7, lr}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	4603      	mov	r3, r0
 8007864:	6039      	str	r1, [r7, #0]
 8007866:	71fb      	strb	r3, [r7, #7]
 8007868:	4613      	mov	r3, r2
 800786a:	71bb      	strb	r3, [r7, #6]
	uint8_t status, uint8_t_ctr;

	NRF24L01_SPI_CS_ENABLE();           //使能SPI传输
 800786c:	2200      	movs	r2, #0
 800786e:	2110      	movs	r1, #16
 8007870:	4813      	ldr	r0, [pc, #76]	; (80078c0 <NRF24L01_Read_Buf+0x64>)
 8007872:	f000 ffbc 	bl	80087ee <HAL_GPIO_WritePin>
	status = SPIx_ReadWriteByte(&hspi1, reg);           //发送寄存器值(位置),并读取状态值
 8007876:	79fb      	ldrb	r3, [r7, #7]
 8007878:	4619      	mov	r1, r3
 800787a:	4812      	ldr	r0, [pc, #72]	; (80078c4 <NRF24L01_Read_Buf+0x68>)
 800787c:	f7ff ff4c 	bl	8007718 <SPIx_ReadWriteByte>
 8007880:	4603      	mov	r3, r0
 8007882:	73bb      	strb	r3, [r7, #14]
	for (uint8_t_ctr = 0; uint8_t_ctr < len; uint8_t_ctr++) {
 8007884:	2300      	movs	r3, #0
 8007886:	73fb      	strb	r3, [r7, #15]
 8007888:	e00b      	b.n	80078a2 <NRF24L01_Read_Buf+0x46>
		pBuf[uint8_t_ctr] = SPIx_ReadWriteByte(&hspi1, 0XFF);           //读出数据
 800788a:	7bfb      	ldrb	r3, [r7, #15]
 800788c:	683a      	ldr	r2, [r7, #0]
 800788e:	18d4      	adds	r4, r2, r3
 8007890:	21ff      	movs	r1, #255	; 0xff
 8007892:	480c      	ldr	r0, [pc, #48]	; (80078c4 <NRF24L01_Read_Buf+0x68>)
 8007894:	f7ff ff40 	bl	8007718 <SPIx_ReadWriteByte>
 8007898:	4603      	mov	r3, r0
 800789a:	7023      	strb	r3, [r4, #0]
	for (uint8_t_ctr = 0; uint8_t_ctr < len; uint8_t_ctr++) {
 800789c:	7bfb      	ldrb	r3, [r7, #15]
 800789e:	3301      	adds	r3, #1
 80078a0:	73fb      	strb	r3, [r7, #15]
 80078a2:	7bfa      	ldrb	r2, [r7, #15]
 80078a4:	79bb      	ldrb	r3, [r7, #6]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d3ef      	bcc.n	800788a <NRF24L01_Read_Buf+0x2e>
	}
	NRF24L01_SPI_CS_DISABLE();       //关闭SPI传输
 80078aa:	2201      	movs	r2, #1
 80078ac:	2110      	movs	r1, #16
 80078ae:	4804      	ldr	r0, [pc, #16]	; (80078c0 <NRF24L01_Read_Buf+0x64>)
 80078b0:	f000 ff9d 	bl	80087ee <HAL_GPIO_WritePin>
	return status;        //返回读到的状态值
 80078b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3714      	adds	r7, #20
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd90      	pop	{r4, r7, pc}
 80078be:	bf00      	nop
 80078c0:	40011000 	.word	0x40011000
 80078c4:	20001094 	.word	0x20001094

080078c8 <NRF24L01_Write_Buf>:
 * 输入参数: 无
 * 返 回 值: 无
 * 说    明：reg:寄存器(位置)  *pBuf:数据指针  len:数据长度
 *
 */
uint8_t NRF24L01_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t len) {
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	4603      	mov	r3, r0
 80078d0:	6039      	str	r1, [r7, #0]
 80078d2:	71fb      	strb	r3, [r7, #7]
 80078d4:	4613      	mov	r3, r2
 80078d6:	71bb      	strb	r3, [r7, #6]
	uint8_t status, uint8_t_ctr;
	NRF24L01_SPI_CS_ENABLE();          //使能SPI传输
 80078d8:	2200      	movs	r2, #0
 80078da:	2110      	movs	r1, #16
 80078dc:	4812      	ldr	r0, [pc, #72]	; (8007928 <NRF24L01_Write_Buf+0x60>)
 80078de:	f000 ff86 	bl	80087ee <HAL_GPIO_WritePin>
	status = SPIx_ReadWriteByte(&hspi1, reg);          //发送寄存器值(位置),并读取状态值
 80078e2:	79fb      	ldrb	r3, [r7, #7]
 80078e4:	4619      	mov	r1, r3
 80078e6:	4811      	ldr	r0, [pc, #68]	; (800792c <NRF24L01_Write_Buf+0x64>)
 80078e8:	f7ff ff16 	bl	8007718 <SPIx_ReadWriteByte>
 80078ec:	4603      	mov	r3, r0
 80078ee:	73bb      	strb	r3, [r7, #14]
	for (uint8_t_ctr = 0; uint8_t_ctr < len; uint8_t_ctr++) {
 80078f0:	2300      	movs	r3, #0
 80078f2:	73fb      	strb	r3, [r7, #15]
 80078f4:	e00a      	b.n	800790c <NRF24L01_Write_Buf+0x44>
		SPIx_ReadWriteByte(&hspi1, *pBuf++); //写入数据
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	1c5a      	adds	r2, r3, #1
 80078fa:	603a      	str	r2, [r7, #0]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	4619      	mov	r1, r3
 8007900:	480a      	ldr	r0, [pc, #40]	; (800792c <NRF24L01_Write_Buf+0x64>)
 8007902:	f7ff ff09 	bl	8007718 <SPIx_ReadWriteByte>
	for (uint8_t_ctr = 0; uint8_t_ctr < len; uint8_t_ctr++) {
 8007906:	7bfb      	ldrb	r3, [r7, #15]
 8007908:	3301      	adds	r3, #1
 800790a:	73fb      	strb	r3, [r7, #15]
 800790c:	7bfa      	ldrb	r2, [r7, #15]
 800790e:	79bb      	ldrb	r3, [r7, #6]
 8007910:	429a      	cmp	r2, r3
 8007912:	d3f0      	bcc.n	80078f6 <NRF24L01_Write_Buf+0x2e>
	}
	NRF24L01_SPI_CS_DISABLE();       //关闭SPI传输
 8007914:	2201      	movs	r2, #1
 8007916:	2110      	movs	r1, #16
 8007918:	4803      	ldr	r0, [pc, #12]	; (8007928 <NRF24L01_Write_Buf+0x60>)
 800791a:	f000 ff68 	bl	80087ee <HAL_GPIO_WritePin>
	return status;          //返回读到的状态值
 800791e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007920:	4618      	mov	r0, r3
 8007922:	3710      	adds	r7, #16
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	40011000 	.word	0x40011000
 800792c:	20001094 	.word	0x20001094

08007930 <NRF24L01_TxPacket>:
 * 输入参数: 无
 * 返 回 值: 发送完成状况
 * 说    明：txbuf:待发送数据首地址
 *
 */
uint8_t NRF24L01_TxPacket(uint8_t *txbuf) {
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]

	uint8_t sta;
	SPI1_SetSpeed(SPI_BAUDRATEPRESCALER_8); //spi速度为4.0Mhz（24L01的最大SPI时钟为10Mhz）
 8007938:	2010      	movs	r0, #16
 800793a:	f7ff febf 	bl	80076bc <SPI1_SetSpeed>
	NRF24L01_CE_LOW();
 800793e:	2200      	movs	r2, #0
 8007940:	2110      	movs	r1, #16
 8007942:	481b      	ldr	r0, [pc, #108]	; (80079b0 <NRF24L01_TxPacket+0x80>)
 8007944:	f000 ff53 	bl	80087ee <HAL_GPIO_WritePin>
	NRF24L01_Write_Buf(WR_TX_PLOAD, txbuf, TX_PLOAD_WIDTH); //写数据到TX BUF  32个字节
 8007948:	2220      	movs	r2, #32
 800794a:	6879      	ldr	r1, [r7, #4]
 800794c:	20a0      	movs	r0, #160	; 0xa0
 800794e:	f7ff ffbb 	bl	80078c8 <NRF24L01_Write_Buf>
	NRF24L01_CE_HIGH(); //启动发送
 8007952:	2201      	movs	r2, #1
 8007954:	2110      	movs	r1, #16
 8007956:	4816      	ldr	r0, [pc, #88]	; (80079b0 <NRF24L01_TxPacket+0x80>)
 8007958:	f000 ff49 	bl	80087ee <HAL_GPIO_WritePin>

	while (NRF24L01_IRQ_PIN_READ() != 0)
 800795c:	bf00      	nop
 800795e:	2102      	movs	r1, #2
 8007960:	4813      	ldr	r0, [pc, #76]	; (80079b0 <NRF24L01_TxPacket+0x80>)
 8007962:	f000 ff2d 	bl	80087c0 <HAL_GPIO_ReadPin>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1f8      	bne.n	800795e <NRF24L01_TxPacket+0x2e>
		; //等待发送完成

	sta = NRF24L01_Read_Reg(STATUS);  //读取状态寄存器的值
 800796c:	2007      	movs	r0, #7
 800796e:	f7ff ff51 	bl	8007814 <NRF24L01_Read_Reg>
 8007972:	4603      	mov	r3, r0
 8007974:	73fb      	strb	r3, [r7, #15]
	NRF24L01_Write_Reg(NRF_WRITE_REG + STATUS, sta); //清除TX_DS或MAX_RT中断标志
 8007976:	7bfb      	ldrb	r3, [r7, #15]
 8007978:	4619      	mov	r1, r3
 800797a:	2027      	movs	r0, #39	; 0x27
 800797c:	f7ff ff22 	bl	80077c4 <NRF24L01_Write_Reg>
	if (sta & MAX_TX) //达到最大重发次数
 8007980:	7bfb      	ldrb	r3, [r7, #15]
 8007982:	f003 0310 	and.w	r3, r3, #16
 8007986:	2b00      	cmp	r3, #0
 8007988:	d005      	beq.n	8007996 <NRF24L01_TxPacket+0x66>
	{
		NRF24L01_Write_Reg(FLUSH_TX, 0xff); //清除TX FIFO寄存器
 800798a:	21ff      	movs	r1, #255	; 0xff
 800798c:	20e1      	movs	r0, #225	; 0xe1
 800798e:	f7ff ff19 	bl	80077c4 <NRF24L01_Write_Reg>
		return MAX_TX;
 8007992:	2310      	movs	r3, #16
 8007994:	e007      	b.n	80079a6 <NRF24L01_TxPacket+0x76>
	}
	if (sta & TX_OK) //发送完成
 8007996:	7bfb      	ldrb	r3, [r7, #15]
 8007998:	f003 0320 	and.w	r3, r3, #32
 800799c:	2b00      	cmp	r3, #0
 800799e:	d001      	beq.n	80079a4 <NRF24L01_TxPacket+0x74>
	{
		return TX_OK;
 80079a0:	2320      	movs	r3, #32
 80079a2:	e000      	b.n	80079a6 <NRF24L01_TxPacket+0x76>
	}
	return 0xff; //其他原因发送失败
 80079a4:	23ff      	movs	r3, #255	; 0xff
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	40010800 	.word	0x40010800

080079b4 <NRF24L01_RxPacket>:
 * 输入参数: 无
 * 返 回 值: 无
 * 说    明：无
 *
 */
uint8_t NRF24L01_RxPacket(uint8_t *rxbuf) {
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
	uint8_t sta;
	SPI1_SetSpeed(SPI_BAUDRATEPRESCALER_8); //spi速度为4.0Mhz（24L01的最大SPI时钟为10Mhz）
 80079bc:	2010      	movs	r0, #16
 80079be:	f7ff fe7d 	bl	80076bc <SPI1_SetSpeed>
	sta = NRF24L01_Read_Reg(STATUS);  //读取状态寄存器的值
 80079c2:	2007      	movs	r0, #7
 80079c4:	f7ff ff26 	bl	8007814 <NRF24L01_Read_Reg>
 80079c8:	4603      	mov	r3, r0
 80079ca:	73fb      	strb	r3, [r7, #15]
	NRF24L01_Write_Reg(NRF_WRITE_REG + STATUS, sta); //清除TX_DS或MAX_RT中断标志
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
 80079ce:	4619      	mov	r1, r3
 80079d0:	2027      	movs	r0, #39	; 0x27
 80079d2:	f7ff fef7 	bl	80077c4 <NRF24L01_Write_Reg>
	if (sta & RX_OK) //接收到数据
 80079d6:	7bfb      	ldrb	r3, [r7, #15]
 80079d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00a      	beq.n	80079f6 <NRF24L01_RxPacket+0x42>
	{
		NRF24L01_Read_Buf(RD_RX_PLOAD, rxbuf, RX_PLOAD_WIDTH); //读取数据
 80079e0:	2220      	movs	r2, #32
 80079e2:	6879      	ldr	r1, [r7, #4]
 80079e4:	2061      	movs	r0, #97	; 0x61
 80079e6:	f7ff ff39 	bl	800785c <NRF24L01_Read_Buf>
		NRF24L01_Write_Reg(FLUSH_RX, 0xff); //清除RX FIFO寄存器
 80079ea:	21ff      	movs	r1, #255	; 0xff
 80079ec:	20e2      	movs	r0, #226	; 0xe2
 80079ee:	f7ff fee9 	bl	80077c4 <NRF24L01_Write_Reg>
		return 0;
 80079f2:	2300      	movs	r3, #0
 80079f4:	e000      	b.n	80079f8 <NRF24L01_RxPacket+0x44>
	}
	return 1; //没收到任何数据
 80079f6:	2301      	movs	r3, #1
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <NRF24L01_RX_Mode>:
 * 输入参数: 无
 * 返 回 值: 无
 * 说    明：无
 *
 */
void NRF24L01_RX_Mode(void) {
 8007a00:	b580      	push	{r7, lr}
 8007a02:	af00      	add	r7, sp, #0
	/*printf("RX_ADDRESS: %x%x%x%x%x  recv_ch: %d\n",RX_ADDRESS[0],RX_ADDRESS[1],
	 RX_ADDRESS[2],RX_ADDRESS[3],RX_ADDRESS[4],recv_ch);*/

	NRF24L01_CE_LOW();
 8007a04:	2200      	movs	r2, #0
 8007a06:	2110      	movs	r1, #16
 8007a08:	4815      	ldr	r0, [pc, #84]	; (8007a60 <NRF24L01_RX_Mode+0x60>)
 8007a0a:	f000 fef0 	bl	80087ee <HAL_GPIO_WritePin>
	NRF24L01_Write_Reg(NRF_WRITE_REG + CONFIG, 0x0F); //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC
 8007a0e:	210f      	movs	r1, #15
 8007a10:	2020      	movs	r0, #32
 8007a12:	f7ff fed7 	bl	80077c4 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + EN_AA, 0x01);    //使能通道0的自动应答
 8007a16:	2101      	movs	r1, #1
 8007a18:	2021      	movs	r0, #33	; 0x21
 8007a1a:	f7ff fed3 	bl	80077c4 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + EN_RXADDR, 0x01);    //使能通道0的接收地址
 8007a1e:	2101      	movs	r1, #1
 8007a20:	2022      	movs	r0, #34	; 0x22
 8007a22:	f7ff fecf 	bl	80077c4 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + RF_CH, recv_ch);	     //设置RF通信频率
 8007a26:	4b0f      	ldr	r3, [pc, #60]	; (8007a64 <NRF24L01_RX_Mode+0x64>)
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	2025      	movs	r0, #37	; 0x25
 8007a2e:	f7ff fec9 	bl	80077c4 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + RF_SETUP, 0x0f);	//设置TX发射参数,0db增益,2Mbps,低噪声增益开启
 8007a32:	210f      	movs	r1, #15
 8007a34:	2026      	movs	r0, #38	; 0x26
 8007a36:	f7ff fec5 	bl	80077c4 <NRF24L01_Write_Reg>

	NRF24L01_Write_Reg(NRF_WRITE_REG + RX_PW_P0, RX_PLOAD_WIDTH);//选择通道0的有效数据宽度
 8007a3a:	2120      	movs	r1, #32
 8007a3c:	2031      	movs	r0, #49	; 0x31
 8007a3e:	f7ff fec1 	bl	80077c4 <NRF24L01_Write_Reg>

	NRF24L01_Write_Buf(NRF_WRITE_REG + RX_ADDR_P0, (uint8_t*) RX_ADDRESS,
 8007a42:	2205      	movs	r2, #5
 8007a44:	4908      	ldr	r1, [pc, #32]	; (8007a68 <NRF24L01_RX_Mode+0x68>)
 8007a46:	202a      	movs	r0, #42	; 0x2a
 8007a48:	f7ff ff3e 	bl	80078c8 <NRF24L01_Write_Buf>
			RX_ADR_WIDTH);	     //写RX节点地址

	NRF24L01_CE_HIGH(); //CE为高,进入接收模式
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	2110      	movs	r1, #16
 8007a50:	4803      	ldr	r0, [pc, #12]	; (8007a60 <NRF24L01_RX_Mode+0x60>)
 8007a52:	f000 fecc 	bl	80087ee <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8007a56:	2001      	movs	r0, #1
 8007a58:	f000 fb10 	bl	800807c <HAL_Delay>
}
 8007a5c:	bf00      	nop
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	40010800 	.word	0x40010800
 8007a64:	200003b1 	.word	0x200003b1
 8007a68:	200003ac 	.word	0x200003ac

08007a6c <NRF24L01_TX_Mode>:
 * 输入参数: 无
 * 返 回 值: 无
 * 说    明：无
 *
 */
void NRF24L01_TX_Mode(void) {
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	af00      	add	r7, sp, #0
	/*printf("TX_ADDRESS: %x%x%x%x%x  send_ch: %d\n",TX_ADDRESS[0],TX_ADDRESS[1],
	 TX_ADDRESS[2],TX_ADDRESS[3],TX_ADDRESS[4],send_ch);*/

	NRF24L01_CE_LOW();
 8007a70:	2200      	movs	r2, #0
 8007a72:	2110      	movs	r1, #16
 8007a74:	4818      	ldr	r0, [pc, #96]	; (8007ad8 <NRF24L01_TX_Mode+0x6c>)
 8007a76:	f000 feba 	bl	80087ee <HAL_GPIO_WritePin>
	NRF24L01_Write_Buf(NRF_WRITE_REG + TX_ADDR, (uint8_t*) TX_ADDRESS,
 8007a7a:	2205      	movs	r2, #5
 8007a7c:	4917      	ldr	r1, [pc, #92]	; (8007adc <NRF24L01_TX_Mode+0x70>)
 8007a7e:	2030      	movs	r0, #48	; 0x30
 8007a80:	f7ff ff22 	bl	80078c8 <NRF24L01_Write_Buf>
			TX_ADR_WIDTH); //写TX节点地址
	NRF24L01_Write_Buf(NRF_WRITE_REG + RX_ADDR_P0, (uint8_t*) RX_ADDRESS,
 8007a84:	2205      	movs	r2, #5
 8007a86:	4916      	ldr	r1, [pc, #88]	; (8007ae0 <NRF24L01_TX_Mode+0x74>)
 8007a88:	202a      	movs	r0, #42	; 0x2a
 8007a8a:	f7ff ff1d 	bl	80078c8 <NRF24L01_Write_Buf>
			RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK

	NRF24L01_Write_Reg(NRF_WRITE_REG + EN_AA, 0x01);     //使能通道0的自动应答
 8007a8e:	2101      	movs	r1, #1
 8007a90:	2021      	movs	r0, #33	; 0x21
 8007a92:	f7ff fe97 	bl	80077c4 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + EN_RXADDR, 0x01); //使能通道0的接收地址
 8007a96:	2101      	movs	r1, #1
 8007a98:	2022      	movs	r0, #34	; 0x22
 8007a9a:	f7ff fe93 	bl	80077c4 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + SETUP_RETR, 0xff); //设置自动重发间隔时间:4000us + 86us;最大自动重发次数:15次
 8007a9e:	21ff      	movs	r1, #255	; 0xff
 8007aa0:	2024      	movs	r0, #36	; 0x24
 8007aa2:	f7ff fe8f 	bl	80077c4 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + RF_CH, send_ch);       //设置RF通道为40
 8007aa6:	4b0f      	ldr	r3, [pc, #60]	; (8007ae4 <NRF24L01_TX_Mode+0x78>)
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	4619      	mov	r1, r3
 8007aac:	2025      	movs	r0, #37	; 0x25
 8007aae:	f7ff fe89 	bl	80077c4 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + RF_SETUP, 0x0f); //设置TX发射参数,0db增益,2Mbps,低噪声增益开启
 8007ab2:	210f      	movs	r1, #15
 8007ab4:	2026      	movs	r0, #38	; 0x26
 8007ab6:	f7ff fe85 	bl	80077c4 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + CONFIG, 0x0e); //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC,接收模式,开启所有中断
 8007aba:	210e      	movs	r1, #14
 8007abc:	2020      	movs	r0, #32
 8007abe:	f7ff fe81 	bl	80077c4 <NRF24L01_Write_Reg>
	NRF24L01_CE_HIGH();    //CE为高,10us后启动发送
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	2110      	movs	r1, #16
 8007ac6:	4804      	ldr	r0, [pc, #16]	; (8007ad8 <NRF24L01_TX_Mode+0x6c>)
 8007ac8:	f000 fe91 	bl	80087ee <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8007acc:	2001      	movs	r0, #1
 8007ace:	f000 fad5 	bl	800807c <HAL_Delay>
}
 8007ad2:	bf00      	nop
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	40010800 	.word	0x40010800
 8007adc:	200003a4 	.word	0x200003a4
 8007ae0:	200003ac 	.word	0x200003ac
 8007ae4:	200003b2 	.word	0x200003b2

08007ae8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8007aec:	4b17      	ldr	r3, [pc, #92]	; (8007b4c <MX_SPI1_Init+0x64>)
 8007aee:	4a18      	ldr	r2, [pc, #96]	; (8007b50 <MX_SPI1_Init+0x68>)
 8007af0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007af2:	4b16      	ldr	r3, [pc, #88]	; (8007b4c <MX_SPI1_Init+0x64>)
 8007af4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007af8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007afa:	4b14      	ldr	r3, [pc, #80]	; (8007b4c <MX_SPI1_Init+0x64>)
 8007afc:	2200      	movs	r2, #0
 8007afe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007b00:	4b12      	ldr	r3, [pc, #72]	; (8007b4c <MX_SPI1_Init+0x64>)
 8007b02:	2200      	movs	r2, #0
 8007b04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b06:	4b11      	ldr	r3, [pc, #68]	; (8007b4c <MX_SPI1_Init+0x64>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007b0c:	4b0f      	ldr	r3, [pc, #60]	; (8007b4c <MX_SPI1_Init+0x64>)
 8007b0e:	2200      	movs	r2, #0
 8007b10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007b12:	4b0e      	ldr	r3, [pc, #56]	; (8007b4c <MX_SPI1_Init+0x64>)
 8007b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8007b1a:	4b0c      	ldr	r3, [pc, #48]	; (8007b4c <MX_SPI1_Init+0x64>)
 8007b1c:	2228      	movs	r2, #40	; 0x28
 8007b1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007b20:	4b0a      	ldr	r3, [pc, #40]	; (8007b4c <MX_SPI1_Init+0x64>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007b26:	4b09      	ldr	r3, [pc, #36]	; (8007b4c <MX_SPI1_Init+0x64>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b2c:	4b07      	ldr	r3, [pc, #28]	; (8007b4c <MX_SPI1_Init+0x64>)
 8007b2e:	2200      	movs	r2, #0
 8007b30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8007b32:	4b06      	ldr	r3, [pc, #24]	; (8007b4c <MX_SPI1_Init+0x64>)
 8007b34:	220a      	movs	r2, #10
 8007b36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007b38:	4804      	ldr	r0, [pc, #16]	; (8007b4c <MX_SPI1_Init+0x64>)
 8007b3a:	f001 fabd 	bl	80090b8 <HAL_SPI_Init>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d001      	beq.n	8007b48 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8007b44:	f7ff fd63 	bl	800760e <Error_Handler>
  }

}
 8007b48:	bf00      	nop
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	20001094 	.word	0x20001094
 8007b50:	40013000 	.word	0x40013000

08007b54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b088      	sub	sp, #32
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b5c:	f107 0310 	add.w	r3, r7, #16
 8007b60:	2200      	movs	r2, #0
 8007b62:	601a      	str	r2, [r3, #0]
 8007b64:	605a      	str	r2, [r3, #4]
 8007b66:	609a      	str	r2, [r3, #8]
 8007b68:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a1f      	ldr	r2, [pc, #124]	; (8007bec <HAL_SPI_MspInit+0x98>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d137      	bne.n	8007be4 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007b74:	4b1e      	ldr	r3, [pc, #120]	; (8007bf0 <HAL_SPI_MspInit+0x9c>)
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	4a1d      	ldr	r2, [pc, #116]	; (8007bf0 <HAL_SPI_MspInit+0x9c>)
 8007b7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007b7e:	6193      	str	r3, [r2, #24]
 8007b80:	4b1b      	ldr	r3, [pc, #108]	; (8007bf0 <HAL_SPI_MspInit+0x9c>)
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b88:	60fb      	str	r3, [r7, #12]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b8c:	4b18      	ldr	r3, [pc, #96]	; (8007bf0 <HAL_SPI_MspInit+0x9c>)
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	4a17      	ldr	r2, [pc, #92]	; (8007bf0 <HAL_SPI_MspInit+0x9c>)
 8007b92:	f043 0304 	orr.w	r3, r3, #4
 8007b96:	6193      	str	r3, [r2, #24]
 8007b98:	4b15      	ldr	r3, [pc, #84]	; (8007bf0 <HAL_SPI_MspInit+0x9c>)
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	f003 0304 	and.w	r3, r3, #4
 8007ba0:	60bb      	str	r3, [r7, #8]
 8007ba2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8007ba4:	23a0      	movs	r3, #160	; 0xa0
 8007ba6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ba8:	2302      	movs	r3, #2
 8007baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007bac:	2303      	movs	r3, #3
 8007bae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007bb0:	f107 0310 	add.w	r3, r7, #16
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	480f      	ldr	r0, [pc, #60]	; (8007bf4 <HAL_SPI_MspInit+0xa0>)
 8007bb8:	f000 fc98 	bl	80084ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007bbc:	2340      	movs	r3, #64	; 0x40
 8007bbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007bc8:	f107 0310 	add.w	r3, r7, #16
 8007bcc:	4619      	mov	r1, r3
 8007bce:	4809      	ldr	r0, [pc, #36]	; (8007bf4 <HAL_SPI_MspInit+0xa0>)
 8007bd0:	f000 fc8c 	bl	80084ec <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	2102      	movs	r1, #2
 8007bd8:	2023      	movs	r0, #35	; 0x23
 8007bda:	f000 fb48 	bl	800826e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8007bde:	2023      	movs	r0, #35	; 0x23
 8007be0:	f000 fb61 	bl	80082a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8007be4:	bf00      	nop
 8007be6:	3720      	adds	r7, #32
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	40013000 	.word	0x40013000
 8007bf0:	40021000 	.word	0x40021000
 8007bf4:	40010800 	.word	0x40010800

08007bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007bfe:	4b16      	ldr	r3, [pc, #88]	; (8007c58 <HAL_MspInit+0x60>)
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	4a15      	ldr	r2, [pc, #84]	; (8007c58 <HAL_MspInit+0x60>)
 8007c04:	f043 0301 	orr.w	r3, r3, #1
 8007c08:	6193      	str	r3, [r2, #24]
 8007c0a:	4b13      	ldr	r3, [pc, #76]	; (8007c58 <HAL_MspInit+0x60>)
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	60bb      	str	r3, [r7, #8]
 8007c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007c16:	4b10      	ldr	r3, [pc, #64]	; (8007c58 <HAL_MspInit+0x60>)
 8007c18:	69db      	ldr	r3, [r3, #28]
 8007c1a:	4a0f      	ldr	r2, [pc, #60]	; (8007c58 <HAL_MspInit+0x60>)
 8007c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c20:	61d3      	str	r3, [r2, #28]
 8007c22:	4b0d      	ldr	r3, [pc, #52]	; (8007c58 <HAL_MspInit+0x60>)
 8007c24:	69db      	ldr	r3, [r3, #28]
 8007c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c2a:	607b      	str	r3, [r7, #4]
 8007c2c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8007c2e:	2005      	movs	r0, #5
 8007c30:	f000 fb12 	bl	8008258 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007c34:	4b09      	ldr	r3, [pc, #36]	; (8007c5c <HAL_MspInit+0x64>)
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	60fb      	str	r3, [r7, #12]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007c40:	60fb      	str	r3, [r7, #12]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007c48:	60fb      	str	r3, [r7, #12]
 8007c4a:	4a04      	ldr	r2, [pc, #16]	; (8007c5c <HAL_MspInit+0x64>)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007c50:	bf00      	nop
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	40021000 	.word	0x40021000
 8007c5c:	40010000 	.word	0x40010000

08007c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007c60:	b480      	push	{r7}
 8007c62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007c64:	bf00      	nop
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bc80      	pop	{r7}
 8007c6a:	4770      	bx	lr

08007c6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007c70:	e7fe      	b.n	8007c70 <HardFault_Handler+0x4>

08007c72 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007c72:	b480      	push	{r7}
 8007c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007c76:	e7fe      	b.n	8007c76 <MemManage_Handler+0x4>

08007c78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007c7c:	e7fe      	b.n	8007c7c <BusFault_Handler+0x4>

08007c7e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007c7e:	b480      	push	{r7}
 8007c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007c82:	e7fe      	b.n	8007c82 <UsageFault_Handler+0x4>

08007c84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007c84:	b480      	push	{r7}
 8007c86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007c88:	bf00      	nop
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bc80      	pop	{r7}
 8007c8e:	4770      	bx	lr

08007c90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007c90:	b480      	push	{r7}
 8007c92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007c94:	bf00      	nop
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bc80      	pop	{r7}
 8007c9a:	4770      	bx	lr

08007c9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007ca0:	bf00      	nop
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bc80      	pop	{r7}
 8007ca6:	4770      	bx	lr

08007ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007cac:	f000 f9ca 	bl	8008044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007cb0:	bf00      	nop
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8007cb8:	2001      	movs	r0, #1
 8007cba:	f000 fdc9 	bl	8008850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007cbe:	bf00      	nop
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8007cc6:	2020      	movs	r0, #32
 8007cc8:	f000 fdc2 	bl	8008850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007ccc:	bf00      	nop
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8007cd4:	4802      	ldr	r0, [pc, #8]	; (8007ce0 <SPI1_IRQHandler+0x10>)
 8007cd6:	f001 fc15 	bl	8009504 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8007cda:	bf00      	nop
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	20001094 	.word	0x20001094

08007ce4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007ce8:	4804      	ldr	r0, [pc, #16]	; (8007cfc <USART1_IRQHandler+0x18>)
 8007cea:	f001 feeb 	bl	8009ac4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_IT(&huart1, (uint8_t*) rxBuffer, 1);
 8007cee:	2201      	movs	r2, #1
 8007cf0:	4903      	ldr	r1, [pc, #12]	; (8007d00 <USART1_IRQHandler+0x1c>)
 8007cf2:	4802      	ldr	r0, [pc, #8]	; (8007cfc <USART1_IRQHandler+0x18>)
 8007cf4:	f001 fe91 	bl	8009a1a <HAL_UART_Receive_IT>
  /* USER CODE END USART1_IRQn 1 */
}
 8007cf8:	bf00      	nop
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	200010ec 	.word	0x200010ec
 8007d00:	20000774 	.word	0x20000774

08007d04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8007d08:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007d0c:	f000 fda0 	bl	8008850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007d10:	bf00      	nop
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b086      	sub	sp, #24
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007d20:	2300      	movs	r3, #0
 8007d22:	617b      	str	r3, [r7, #20]
 8007d24:	e00a      	b.n	8007d3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007d26:	f3af 8000 	nop.w
 8007d2a:	4601      	mov	r1, r0
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	1c5a      	adds	r2, r3, #1
 8007d30:	60ba      	str	r2, [r7, #8]
 8007d32:	b2ca      	uxtb	r2, r1
 8007d34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	617b      	str	r3, [r7, #20]
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	dbf0      	blt.n	8007d26 <_read+0x12>
	}

return len;
 8007d44:	687b      	ldr	r3, [r7, #4]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3718      	adds	r7, #24
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b086      	sub	sp, #24
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	60f8      	str	r0, [r7, #12]
 8007d56:	60b9      	str	r1, [r7, #8]
 8007d58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	617b      	str	r3, [r7, #20]
 8007d5e:	e009      	b.n	8007d74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	1c5a      	adds	r2, r3, #1
 8007d64:	60ba      	str	r2, [r7, #8]
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f000 f8ed 	bl	8007f48 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	3301      	adds	r3, #1
 8007d72:	617b      	str	r3, [r7, #20]
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	dbf1      	blt.n	8007d60 <_write+0x12>
	}
	return len;
 8007d7c:	687b      	ldr	r3, [r7, #4]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3718      	adds	r7, #24
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <_close>:

int _close(int file)
{
 8007d86:	b480      	push	{r7}
 8007d88:	b083      	sub	sp, #12
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
	return -1;
 8007d8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	370c      	adds	r7, #12
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bc80      	pop	{r7}
 8007d9a:	4770      	bx	lr

08007d9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007dac:	605a      	str	r2, [r3, #4]
	return 0;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bc80      	pop	{r7}
 8007db8:	4770      	bx	lr

08007dba <_isatty>:

int _isatty(int file)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b083      	sub	sp, #12
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
	return 1;
 8007dc2:	2301      	movs	r3, #1
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bc80      	pop	{r7}
 8007dcc:	4770      	bx	lr

08007dce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b085      	sub	sp, #20
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	60f8      	str	r0, [r7, #12]
 8007dd6:	60b9      	str	r1, [r7, #8]
 8007dd8:	607a      	str	r2, [r7, #4]
	return 0;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3714      	adds	r7, #20
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bc80      	pop	{r7}
 8007de4:	4770      	bx	lr
	...

08007de8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007df0:	4b11      	ldr	r3, [pc, #68]	; (8007e38 <_sbrk+0x50>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d102      	bne.n	8007dfe <_sbrk+0x16>
		heap_end = &end;
 8007df8:	4b0f      	ldr	r3, [pc, #60]	; (8007e38 <_sbrk+0x50>)
 8007dfa:	4a10      	ldr	r2, [pc, #64]	; (8007e3c <_sbrk+0x54>)
 8007dfc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007dfe:	4b0e      	ldr	r3, [pc, #56]	; (8007e38 <_sbrk+0x50>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007e04:	4b0c      	ldr	r3, [pc, #48]	; (8007e38 <_sbrk+0x50>)
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	466a      	mov	r2, sp
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d907      	bls.n	8007e22 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007e12:	f002 f95d 	bl	800a0d0 <__errno>
 8007e16:	4602      	mov	r2, r0
 8007e18:	230c      	movs	r3, #12
 8007e1a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e20:	e006      	b.n	8007e30 <_sbrk+0x48>
	}

	heap_end += incr;
 8007e22:	4b05      	ldr	r3, [pc, #20]	; (8007e38 <_sbrk+0x50>)
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4413      	add	r3, r2
 8007e2a:	4a03      	ldr	r2, [pc, #12]	; (8007e38 <_sbrk+0x50>)
 8007e2c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	200005c8 	.word	0x200005c8
 8007e3c:	20001138 	.word	0x20001138

08007e40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007e40:	b480      	push	{r7}
 8007e42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007e44:	bf00      	nop
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bc80      	pop	{r7}
 8007e4a:	4770      	bx	lr

08007e4c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8007e50:	4b11      	ldr	r3, [pc, #68]	; (8007e98 <MX_USART1_UART_Init+0x4c>)
 8007e52:	4a12      	ldr	r2, [pc, #72]	; (8007e9c <MX_USART1_UART_Init+0x50>)
 8007e54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007e56:	4b10      	ldr	r3, [pc, #64]	; (8007e98 <MX_USART1_UART_Init+0x4c>)
 8007e58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007e5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007e5e:	4b0e      	ldr	r3, [pc, #56]	; (8007e98 <MX_USART1_UART_Init+0x4c>)
 8007e60:	2200      	movs	r2, #0
 8007e62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007e64:	4b0c      	ldr	r3, [pc, #48]	; (8007e98 <MX_USART1_UART_Init+0x4c>)
 8007e66:	2200      	movs	r2, #0
 8007e68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007e6a:	4b0b      	ldr	r3, [pc, #44]	; (8007e98 <MX_USART1_UART_Init+0x4c>)
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007e70:	4b09      	ldr	r3, [pc, #36]	; (8007e98 <MX_USART1_UART_Init+0x4c>)
 8007e72:	220c      	movs	r2, #12
 8007e74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007e76:	4b08      	ldr	r3, [pc, #32]	; (8007e98 <MX_USART1_UART_Init+0x4c>)
 8007e78:	2200      	movs	r2, #0
 8007e7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007e7c:	4b06      	ldr	r3, [pc, #24]	; (8007e98 <MX_USART1_UART_Init+0x4c>)
 8007e7e:	2200      	movs	r2, #0
 8007e80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007e82:	4805      	ldr	r0, [pc, #20]	; (8007e98 <MX_USART1_UART_Init+0x4c>)
 8007e84:	f001 fcea 	bl	800985c <HAL_UART_Init>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d001      	beq.n	8007e92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007e8e:	f7ff fbbe 	bl	800760e <Error_Handler>
  }

}
 8007e92:	bf00      	nop
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	200010ec 	.word	0x200010ec
 8007e9c:	40013800 	.word	0x40013800

08007ea0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b088      	sub	sp, #32
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ea8:	f107 0310 	add.w	r3, r7, #16
 8007eac:	2200      	movs	r2, #0
 8007eae:	601a      	str	r2, [r3, #0]
 8007eb0:	605a      	str	r2, [r3, #4]
 8007eb2:	609a      	str	r2, [r3, #8]
 8007eb4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a20      	ldr	r2, [pc, #128]	; (8007f3c <HAL_UART_MspInit+0x9c>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d139      	bne.n	8007f34 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007ec0:	4b1f      	ldr	r3, [pc, #124]	; (8007f40 <HAL_UART_MspInit+0xa0>)
 8007ec2:	699b      	ldr	r3, [r3, #24]
 8007ec4:	4a1e      	ldr	r2, [pc, #120]	; (8007f40 <HAL_UART_MspInit+0xa0>)
 8007ec6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007eca:	6193      	str	r3, [r2, #24]
 8007ecc:	4b1c      	ldr	r3, [pc, #112]	; (8007f40 <HAL_UART_MspInit+0xa0>)
 8007ece:	699b      	ldr	r3, [r3, #24]
 8007ed0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ed4:	60fb      	str	r3, [r7, #12]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ed8:	4b19      	ldr	r3, [pc, #100]	; (8007f40 <HAL_UART_MspInit+0xa0>)
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	4a18      	ldr	r2, [pc, #96]	; (8007f40 <HAL_UART_MspInit+0xa0>)
 8007ede:	f043 0304 	orr.w	r3, r3, #4
 8007ee2:	6193      	str	r3, [r2, #24]
 8007ee4:	4b16      	ldr	r3, [pc, #88]	; (8007f40 <HAL_UART_MspInit+0xa0>)
 8007ee6:	699b      	ldr	r3, [r3, #24]
 8007ee8:	f003 0304 	and.w	r3, r3, #4
 8007eec:	60bb      	str	r3, [r7, #8]
 8007eee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007ef0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ef4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ef6:	2302      	movs	r3, #2
 8007ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007efa:	2303      	movs	r3, #3
 8007efc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007efe:	f107 0310 	add.w	r3, r7, #16
 8007f02:	4619      	mov	r1, r3
 8007f04:	480f      	ldr	r0, [pc, #60]	; (8007f44 <HAL_UART_MspInit+0xa4>)
 8007f06:	f000 faf1 	bl	80084ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f10:	2300      	movs	r3, #0
 8007f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f14:	2300      	movs	r3, #0
 8007f16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f18:	f107 0310 	add.w	r3, r7, #16
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	4809      	ldr	r0, [pc, #36]	; (8007f44 <HAL_UART_MspInit+0xa4>)
 8007f20:	f000 fae4 	bl	80084ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007f24:	2200      	movs	r2, #0
 8007f26:	2100      	movs	r1, #0
 8007f28:	2025      	movs	r0, #37	; 0x25
 8007f2a:	f000 f9a0 	bl	800826e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007f2e:	2025      	movs	r0, #37	; 0x25
 8007f30:	f000 f9b9 	bl	80082a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8007f34:	bf00      	nop
 8007f36:	3720      	adds	r7, #32
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	40013800 	.word	0x40013800
 8007f40:	40021000 	.word	0x40021000
 8007f44:	40010800 	.word	0x40010800

08007f48 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8007f50:	1d39      	adds	r1, r7, #4
 8007f52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007f56:	2201      	movs	r2, #1
 8007f58:	4803      	ldr	r0, [pc, #12]	; (8007f68 <__io_putchar+0x20>)
 8007f5a:	f001 fccc 	bl	80098f6 <HAL_UART_Transmit>

  return ch;
 8007f5e:	687b      	ldr	r3, [r7, #4]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3708      	adds	r7, #8
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	200010ec 	.word	0x200010ec

08007f6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8007f6c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8007f6e:	e003      	b.n	8007f78 <LoopCopyDataInit>

08007f70 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8007f70:	4b0b      	ldr	r3, [pc, #44]	; (8007fa0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8007f72:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8007f74:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8007f76:	3104      	adds	r1, #4

08007f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8007f78:	480a      	ldr	r0, [pc, #40]	; (8007fa4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8007f7a:	4b0b      	ldr	r3, [pc, #44]	; (8007fa8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8007f7c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8007f7e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8007f80:	d3f6      	bcc.n	8007f70 <CopyDataInit>
  ldr r2, =_sbss
 8007f82:	4a0a      	ldr	r2, [pc, #40]	; (8007fac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8007f84:	e002      	b.n	8007f8c <LoopFillZerobss>

08007f86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8007f86:	2300      	movs	r3, #0
  str r3, [r2], #4
 8007f88:	f842 3b04 	str.w	r3, [r2], #4

08007f8c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8007f8c:	4b08      	ldr	r3, [pc, #32]	; (8007fb0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8007f8e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8007f90:	d3f9      	bcc.n	8007f86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007f92:	f7ff ff55 	bl	8007e40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007f96:	f002 f8a1 	bl	800a0dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007f9a:	f7ff f9f7 	bl	800738c <main>
  bx lr
 8007f9e:	4770      	bx	lr
  ldr r3, =_sidata
 8007fa0:	0800d460 	.word	0x0800d460
  ldr r0, =_sdata
 8007fa4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8007fa8:	20000590 	.word	0x20000590
  ldr r2, =_sbss
 8007fac:	20000590 	.word	0x20000590
  ldr r3, = _ebss
 8007fb0:	20001134 	.word	0x20001134

08007fb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007fb4:	e7fe      	b.n	8007fb4 <ADC1_2_IRQHandler>
	...

08007fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007fbc:	4b08      	ldr	r3, [pc, #32]	; (8007fe0 <HAL_Init+0x28>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a07      	ldr	r2, [pc, #28]	; (8007fe0 <HAL_Init+0x28>)
 8007fc2:	f043 0310 	orr.w	r3, r3, #16
 8007fc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007fc8:	2003      	movs	r0, #3
 8007fca:	f000 f945 	bl	8008258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007fce:	2000      	movs	r0, #0
 8007fd0:	f000 f808 	bl	8007fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007fd4:	f7ff fe10 	bl	8007bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	40022000 	.word	0x40022000

08007fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007fec:	4b12      	ldr	r3, [pc, #72]	; (8008038 <HAL_InitTick+0x54>)
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	4b12      	ldr	r3, [pc, #72]	; (800803c <HAL_InitTick+0x58>)
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008002:	4618      	mov	r0, r3
 8008004:	f000 f95d 	bl	80082c2 <HAL_SYSTICK_Config>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e00e      	b.n	8008030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2b0f      	cmp	r3, #15
 8008016:	d80a      	bhi.n	800802e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008018:	2200      	movs	r2, #0
 800801a:	6879      	ldr	r1, [r7, #4]
 800801c:	f04f 30ff 	mov.w	r0, #4294967295
 8008020:	f000 f925 	bl	800826e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008024:	4a06      	ldr	r2, [pc, #24]	; (8008040 <HAL_InitTick+0x5c>)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800802a:	2300      	movs	r3, #0
 800802c:	e000      	b.n	8008030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800802e:	2301      	movs	r3, #1
}
 8008030:	4618      	mov	r0, r3
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	200003b4 	.word	0x200003b4
 800803c:	200003bc 	.word	0x200003bc
 8008040:	200003b8 	.word	0x200003b8

08008044 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008044:	b480      	push	{r7}
 8008046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008048:	4b05      	ldr	r3, [pc, #20]	; (8008060 <HAL_IncTick+0x1c>)
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	461a      	mov	r2, r3
 800804e:	4b05      	ldr	r3, [pc, #20]	; (8008064 <HAL_IncTick+0x20>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4413      	add	r3, r2
 8008054:	4a03      	ldr	r2, [pc, #12]	; (8008064 <HAL_IncTick+0x20>)
 8008056:	6013      	str	r3, [r2, #0]
}
 8008058:	bf00      	nop
 800805a:	46bd      	mov	sp, r7
 800805c:	bc80      	pop	{r7}
 800805e:	4770      	bx	lr
 8008060:	200003bc 	.word	0x200003bc
 8008064:	2000112c 	.word	0x2000112c

08008068 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008068:	b480      	push	{r7}
 800806a:	af00      	add	r7, sp, #0
  return uwTick;
 800806c:	4b02      	ldr	r3, [pc, #8]	; (8008078 <HAL_GetTick+0x10>)
 800806e:	681b      	ldr	r3, [r3, #0]
}
 8008070:	4618      	mov	r0, r3
 8008072:	46bd      	mov	sp, r7
 8008074:	bc80      	pop	{r7}
 8008076:	4770      	bx	lr
 8008078:	2000112c 	.word	0x2000112c

0800807c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008084:	f7ff fff0 	bl	8008068 <HAL_GetTick>
 8008088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008094:	d005      	beq.n	80080a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008096:	4b09      	ldr	r3, [pc, #36]	; (80080bc <HAL_Delay+0x40>)
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	461a      	mov	r2, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	4413      	add	r3, r2
 80080a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80080a2:	bf00      	nop
 80080a4:	f7ff ffe0 	bl	8008068 <HAL_GetTick>
 80080a8:	4602      	mov	r2, r0
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	1ad3      	subs	r3, r2, r3
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d8f7      	bhi.n	80080a4 <HAL_Delay+0x28>
  {
  }
}
 80080b4:	bf00      	nop
 80080b6:	3710      	adds	r7, #16
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	200003bc 	.word	0x200003bc

080080c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f003 0307 	and.w	r3, r3, #7
 80080ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80080d0:	4b0c      	ldr	r3, [pc, #48]	; (8008104 <__NVIC_SetPriorityGrouping+0x44>)
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80080d6:	68ba      	ldr	r2, [r7, #8]
 80080d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80080dc:	4013      	ands	r3, r2
 80080de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80080e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80080ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80080f2:	4a04      	ldr	r2, [pc, #16]	; (8008104 <__NVIC_SetPriorityGrouping+0x44>)
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	60d3      	str	r3, [r2, #12]
}
 80080f8:	bf00      	nop
 80080fa:	3714      	adds	r7, #20
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bc80      	pop	{r7}
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	e000ed00 	.word	0xe000ed00

08008108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008108:	b480      	push	{r7}
 800810a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800810c:	4b04      	ldr	r3, [pc, #16]	; (8008120 <__NVIC_GetPriorityGrouping+0x18>)
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	0a1b      	lsrs	r3, r3, #8
 8008112:	f003 0307 	and.w	r3, r3, #7
}
 8008116:	4618      	mov	r0, r3
 8008118:	46bd      	mov	sp, r7
 800811a:	bc80      	pop	{r7}
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	e000ed00 	.word	0xe000ed00

08008124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	4603      	mov	r3, r0
 800812c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800812e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008132:	2b00      	cmp	r3, #0
 8008134:	db0b      	blt.n	800814e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008136:	79fb      	ldrb	r3, [r7, #7]
 8008138:	f003 021f 	and.w	r2, r3, #31
 800813c:	4906      	ldr	r1, [pc, #24]	; (8008158 <__NVIC_EnableIRQ+0x34>)
 800813e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008142:	095b      	lsrs	r3, r3, #5
 8008144:	2001      	movs	r0, #1
 8008146:	fa00 f202 	lsl.w	r2, r0, r2
 800814a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800814e:	bf00      	nop
 8008150:	370c      	adds	r7, #12
 8008152:	46bd      	mov	sp, r7
 8008154:	bc80      	pop	{r7}
 8008156:	4770      	bx	lr
 8008158:	e000e100 	.word	0xe000e100

0800815c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	4603      	mov	r3, r0
 8008164:	6039      	str	r1, [r7, #0]
 8008166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800816c:	2b00      	cmp	r3, #0
 800816e:	db0a      	blt.n	8008186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	b2da      	uxtb	r2, r3
 8008174:	490c      	ldr	r1, [pc, #48]	; (80081a8 <__NVIC_SetPriority+0x4c>)
 8008176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800817a:	0112      	lsls	r2, r2, #4
 800817c:	b2d2      	uxtb	r2, r2
 800817e:	440b      	add	r3, r1
 8008180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008184:	e00a      	b.n	800819c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	b2da      	uxtb	r2, r3
 800818a:	4908      	ldr	r1, [pc, #32]	; (80081ac <__NVIC_SetPriority+0x50>)
 800818c:	79fb      	ldrb	r3, [r7, #7]
 800818e:	f003 030f 	and.w	r3, r3, #15
 8008192:	3b04      	subs	r3, #4
 8008194:	0112      	lsls	r2, r2, #4
 8008196:	b2d2      	uxtb	r2, r2
 8008198:	440b      	add	r3, r1
 800819a:	761a      	strb	r2, [r3, #24]
}
 800819c:	bf00      	nop
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bc80      	pop	{r7}
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	e000e100 	.word	0xe000e100
 80081ac:	e000ed00 	.word	0xe000ed00

080081b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b089      	sub	sp, #36	; 0x24
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f003 0307 	and.w	r3, r3, #7
 80081c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	f1c3 0307 	rsb	r3, r3, #7
 80081ca:	2b04      	cmp	r3, #4
 80081cc:	bf28      	it	cs
 80081ce:	2304      	movcs	r3, #4
 80081d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	3304      	adds	r3, #4
 80081d6:	2b06      	cmp	r3, #6
 80081d8:	d902      	bls.n	80081e0 <NVIC_EncodePriority+0x30>
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	3b03      	subs	r3, #3
 80081de:	e000      	b.n	80081e2 <NVIC_EncodePriority+0x32>
 80081e0:	2300      	movs	r3, #0
 80081e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80081e4:	f04f 32ff 	mov.w	r2, #4294967295
 80081e8:	69bb      	ldr	r3, [r7, #24]
 80081ea:	fa02 f303 	lsl.w	r3, r2, r3
 80081ee:	43da      	mvns	r2, r3
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	401a      	ands	r2, r3
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80081f8:	f04f 31ff 	mov.w	r1, #4294967295
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008202:	43d9      	mvns	r1, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008208:	4313      	orrs	r3, r2
         );
}
 800820a:	4618      	mov	r0, r3
 800820c:	3724      	adds	r7, #36	; 0x24
 800820e:	46bd      	mov	sp, r7
 8008210:	bc80      	pop	{r7}
 8008212:	4770      	bx	lr

08008214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	3b01      	subs	r3, #1
 8008220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008224:	d301      	bcc.n	800822a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008226:	2301      	movs	r3, #1
 8008228:	e00f      	b.n	800824a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800822a:	4a0a      	ldr	r2, [pc, #40]	; (8008254 <SysTick_Config+0x40>)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	3b01      	subs	r3, #1
 8008230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008232:	210f      	movs	r1, #15
 8008234:	f04f 30ff 	mov.w	r0, #4294967295
 8008238:	f7ff ff90 	bl	800815c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800823c:	4b05      	ldr	r3, [pc, #20]	; (8008254 <SysTick_Config+0x40>)
 800823e:	2200      	movs	r2, #0
 8008240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008242:	4b04      	ldr	r3, [pc, #16]	; (8008254 <SysTick_Config+0x40>)
 8008244:	2207      	movs	r2, #7
 8008246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3708      	adds	r7, #8
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	e000e010 	.word	0xe000e010

08008258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f7ff ff2d 	bl	80080c0 <__NVIC_SetPriorityGrouping>
}
 8008266:	bf00      	nop
 8008268:	3708      	adds	r7, #8
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800826e:	b580      	push	{r7, lr}
 8008270:	b086      	sub	sp, #24
 8008272:	af00      	add	r7, sp, #0
 8008274:	4603      	mov	r3, r0
 8008276:	60b9      	str	r1, [r7, #8]
 8008278:	607a      	str	r2, [r7, #4]
 800827a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800827c:	2300      	movs	r3, #0
 800827e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008280:	f7ff ff42 	bl	8008108 <__NVIC_GetPriorityGrouping>
 8008284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	68b9      	ldr	r1, [r7, #8]
 800828a:	6978      	ldr	r0, [r7, #20]
 800828c:	f7ff ff90 	bl	80081b0 <NVIC_EncodePriority>
 8008290:	4602      	mov	r2, r0
 8008292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008296:	4611      	mov	r1, r2
 8008298:	4618      	mov	r0, r3
 800829a:	f7ff ff5f 	bl	800815c <__NVIC_SetPriority>
}
 800829e:	bf00      	nop
 80082a0:	3718      	adds	r7, #24
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b082      	sub	sp, #8
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	4603      	mov	r3, r0
 80082ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80082b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7ff ff35 	bl	8008124 <__NVIC_EnableIRQ>
}
 80082ba:	bf00      	nop
 80082bc:	3708      	adds	r7, #8
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b082      	sub	sp, #8
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7ff ffa2 	bl	8008214 <SysTick_Config>
 80082d0:	4603      	mov	r3, r0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
	...

080082dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082e4:	2300      	movs	r3, #0
 80082e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80082ee:	2b02      	cmp	r3, #2
 80082f0:	d005      	beq.n	80082fe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2204      	movs	r2, #4
 80082f6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	73fb      	strb	r3, [r7, #15]
 80082fc:	e0d6      	b.n	80084ac <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f022 020e 	bic.w	r2, r2, #14
 800830c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f022 0201 	bic.w	r2, r2, #1
 800831c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	461a      	mov	r2, r3
 8008324:	4b64      	ldr	r3, [pc, #400]	; (80084b8 <HAL_DMA_Abort_IT+0x1dc>)
 8008326:	429a      	cmp	r2, r3
 8008328:	d958      	bls.n	80083dc <HAL_DMA_Abort_IT+0x100>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a63      	ldr	r2, [pc, #396]	; (80084bc <HAL_DMA_Abort_IT+0x1e0>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d04f      	beq.n	80083d4 <HAL_DMA_Abort_IT+0xf8>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a61      	ldr	r2, [pc, #388]	; (80084c0 <HAL_DMA_Abort_IT+0x1e4>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d048      	beq.n	80083d0 <HAL_DMA_Abort_IT+0xf4>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a60      	ldr	r2, [pc, #384]	; (80084c4 <HAL_DMA_Abort_IT+0x1e8>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d040      	beq.n	80083ca <HAL_DMA_Abort_IT+0xee>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a5e      	ldr	r2, [pc, #376]	; (80084c8 <HAL_DMA_Abort_IT+0x1ec>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d038      	beq.n	80083c4 <HAL_DMA_Abort_IT+0xe8>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a5d      	ldr	r2, [pc, #372]	; (80084cc <HAL_DMA_Abort_IT+0x1f0>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d030      	beq.n	80083be <HAL_DMA_Abort_IT+0xe2>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a5b      	ldr	r2, [pc, #364]	; (80084d0 <HAL_DMA_Abort_IT+0x1f4>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d028      	beq.n	80083b8 <HAL_DMA_Abort_IT+0xdc>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a53      	ldr	r2, [pc, #332]	; (80084b8 <HAL_DMA_Abort_IT+0x1dc>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d020      	beq.n	80083b2 <HAL_DMA_Abort_IT+0xd6>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a57      	ldr	r2, [pc, #348]	; (80084d4 <HAL_DMA_Abort_IT+0x1f8>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d019      	beq.n	80083ae <HAL_DMA_Abort_IT+0xd2>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a56      	ldr	r2, [pc, #344]	; (80084d8 <HAL_DMA_Abort_IT+0x1fc>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d012      	beq.n	80083aa <HAL_DMA_Abort_IT+0xce>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a54      	ldr	r2, [pc, #336]	; (80084dc <HAL_DMA_Abort_IT+0x200>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d00a      	beq.n	80083a4 <HAL_DMA_Abort_IT+0xc8>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a53      	ldr	r2, [pc, #332]	; (80084e0 <HAL_DMA_Abort_IT+0x204>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d102      	bne.n	800839e <HAL_DMA_Abort_IT+0xc2>
 8008398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800839c:	e01b      	b.n	80083d6 <HAL_DMA_Abort_IT+0xfa>
 800839e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80083a2:	e018      	b.n	80083d6 <HAL_DMA_Abort_IT+0xfa>
 80083a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083a8:	e015      	b.n	80083d6 <HAL_DMA_Abort_IT+0xfa>
 80083aa:	2310      	movs	r3, #16
 80083ac:	e013      	b.n	80083d6 <HAL_DMA_Abort_IT+0xfa>
 80083ae:	2301      	movs	r3, #1
 80083b0:	e011      	b.n	80083d6 <HAL_DMA_Abort_IT+0xfa>
 80083b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80083b6:	e00e      	b.n	80083d6 <HAL_DMA_Abort_IT+0xfa>
 80083b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80083bc:	e00b      	b.n	80083d6 <HAL_DMA_Abort_IT+0xfa>
 80083be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80083c2:	e008      	b.n	80083d6 <HAL_DMA_Abort_IT+0xfa>
 80083c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083c8:	e005      	b.n	80083d6 <HAL_DMA_Abort_IT+0xfa>
 80083ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083ce:	e002      	b.n	80083d6 <HAL_DMA_Abort_IT+0xfa>
 80083d0:	2310      	movs	r3, #16
 80083d2:	e000      	b.n	80083d6 <HAL_DMA_Abort_IT+0xfa>
 80083d4:	2301      	movs	r3, #1
 80083d6:	4a43      	ldr	r2, [pc, #268]	; (80084e4 <HAL_DMA_Abort_IT+0x208>)
 80083d8:	6053      	str	r3, [r2, #4]
 80083da:	e057      	b.n	800848c <HAL_DMA_Abort_IT+0x1b0>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a36      	ldr	r2, [pc, #216]	; (80084bc <HAL_DMA_Abort_IT+0x1e0>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d04f      	beq.n	8008486 <HAL_DMA_Abort_IT+0x1aa>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a35      	ldr	r2, [pc, #212]	; (80084c0 <HAL_DMA_Abort_IT+0x1e4>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d048      	beq.n	8008482 <HAL_DMA_Abort_IT+0x1a6>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a33      	ldr	r2, [pc, #204]	; (80084c4 <HAL_DMA_Abort_IT+0x1e8>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d040      	beq.n	800847c <HAL_DMA_Abort_IT+0x1a0>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a32      	ldr	r2, [pc, #200]	; (80084c8 <HAL_DMA_Abort_IT+0x1ec>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d038      	beq.n	8008476 <HAL_DMA_Abort_IT+0x19a>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a30      	ldr	r2, [pc, #192]	; (80084cc <HAL_DMA_Abort_IT+0x1f0>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d030      	beq.n	8008470 <HAL_DMA_Abort_IT+0x194>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a2f      	ldr	r2, [pc, #188]	; (80084d0 <HAL_DMA_Abort_IT+0x1f4>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d028      	beq.n	800846a <HAL_DMA_Abort_IT+0x18e>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a26      	ldr	r2, [pc, #152]	; (80084b8 <HAL_DMA_Abort_IT+0x1dc>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d020      	beq.n	8008464 <HAL_DMA_Abort_IT+0x188>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a2b      	ldr	r2, [pc, #172]	; (80084d4 <HAL_DMA_Abort_IT+0x1f8>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d019      	beq.n	8008460 <HAL_DMA_Abort_IT+0x184>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a29      	ldr	r2, [pc, #164]	; (80084d8 <HAL_DMA_Abort_IT+0x1fc>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d012      	beq.n	800845c <HAL_DMA_Abort_IT+0x180>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a28      	ldr	r2, [pc, #160]	; (80084dc <HAL_DMA_Abort_IT+0x200>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d00a      	beq.n	8008456 <HAL_DMA_Abort_IT+0x17a>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a26      	ldr	r2, [pc, #152]	; (80084e0 <HAL_DMA_Abort_IT+0x204>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d102      	bne.n	8008450 <HAL_DMA_Abort_IT+0x174>
 800844a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800844e:	e01b      	b.n	8008488 <HAL_DMA_Abort_IT+0x1ac>
 8008450:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008454:	e018      	b.n	8008488 <HAL_DMA_Abort_IT+0x1ac>
 8008456:	f44f 7380 	mov.w	r3, #256	; 0x100
 800845a:	e015      	b.n	8008488 <HAL_DMA_Abort_IT+0x1ac>
 800845c:	2310      	movs	r3, #16
 800845e:	e013      	b.n	8008488 <HAL_DMA_Abort_IT+0x1ac>
 8008460:	2301      	movs	r3, #1
 8008462:	e011      	b.n	8008488 <HAL_DMA_Abort_IT+0x1ac>
 8008464:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008468:	e00e      	b.n	8008488 <HAL_DMA_Abort_IT+0x1ac>
 800846a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800846e:	e00b      	b.n	8008488 <HAL_DMA_Abort_IT+0x1ac>
 8008470:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008474:	e008      	b.n	8008488 <HAL_DMA_Abort_IT+0x1ac>
 8008476:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800847a:	e005      	b.n	8008488 <HAL_DMA_Abort_IT+0x1ac>
 800847c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008480:	e002      	b.n	8008488 <HAL_DMA_Abort_IT+0x1ac>
 8008482:	2310      	movs	r3, #16
 8008484:	e000      	b.n	8008488 <HAL_DMA_Abort_IT+0x1ac>
 8008486:	2301      	movs	r3, #1
 8008488:	4a17      	ldr	r2, [pc, #92]	; (80084e8 <HAL_DMA_Abort_IT+0x20c>)
 800848a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d003      	beq.n	80084ac <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	4798      	blx	r3
    } 
  }
  return status;
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	40020080 	.word	0x40020080
 80084bc:	40020008 	.word	0x40020008
 80084c0:	4002001c 	.word	0x4002001c
 80084c4:	40020030 	.word	0x40020030
 80084c8:	40020044 	.word	0x40020044
 80084cc:	40020058 	.word	0x40020058
 80084d0:	4002006c 	.word	0x4002006c
 80084d4:	40020408 	.word	0x40020408
 80084d8:	4002041c 	.word	0x4002041c
 80084dc:	40020430 	.word	0x40020430
 80084e0:	40020444 	.word	0x40020444
 80084e4:	40020400 	.word	0x40020400
 80084e8:	40020000 	.word	0x40020000

080084ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b08b      	sub	sp, #44	; 0x2c
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80084f6:	2300      	movs	r3, #0
 80084f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80084fa:	2300      	movs	r3, #0
 80084fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80084fe:	e133      	b.n	8008768 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008500:	2201      	movs	r2, #1
 8008502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008504:	fa02 f303 	lsl.w	r3, r2, r3
 8008508:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	69fa      	ldr	r2, [r7, #28]
 8008510:	4013      	ands	r3, r2
 8008512:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008514:	69ba      	ldr	r2, [r7, #24]
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	429a      	cmp	r2, r3
 800851a:	f040 8122 	bne.w	8008762 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	2b12      	cmp	r3, #18
 8008524:	d034      	beq.n	8008590 <HAL_GPIO_Init+0xa4>
 8008526:	2b12      	cmp	r3, #18
 8008528:	d80d      	bhi.n	8008546 <HAL_GPIO_Init+0x5a>
 800852a:	2b02      	cmp	r3, #2
 800852c:	d02b      	beq.n	8008586 <HAL_GPIO_Init+0x9a>
 800852e:	2b02      	cmp	r3, #2
 8008530:	d804      	bhi.n	800853c <HAL_GPIO_Init+0x50>
 8008532:	2b00      	cmp	r3, #0
 8008534:	d031      	beq.n	800859a <HAL_GPIO_Init+0xae>
 8008536:	2b01      	cmp	r3, #1
 8008538:	d01c      	beq.n	8008574 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800853a:	e048      	b.n	80085ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800853c:	2b03      	cmp	r3, #3
 800853e:	d043      	beq.n	80085c8 <HAL_GPIO_Init+0xdc>
 8008540:	2b11      	cmp	r3, #17
 8008542:	d01b      	beq.n	800857c <HAL_GPIO_Init+0x90>
          break;
 8008544:	e043      	b.n	80085ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8008546:	4a8f      	ldr	r2, [pc, #572]	; (8008784 <HAL_GPIO_Init+0x298>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d026      	beq.n	800859a <HAL_GPIO_Init+0xae>
 800854c:	4a8d      	ldr	r2, [pc, #564]	; (8008784 <HAL_GPIO_Init+0x298>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d806      	bhi.n	8008560 <HAL_GPIO_Init+0x74>
 8008552:	4a8d      	ldr	r2, [pc, #564]	; (8008788 <HAL_GPIO_Init+0x29c>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d020      	beq.n	800859a <HAL_GPIO_Init+0xae>
 8008558:	4a8c      	ldr	r2, [pc, #560]	; (800878c <HAL_GPIO_Init+0x2a0>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d01d      	beq.n	800859a <HAL_GPIO_Init+0xae>
          break;
 800855e:	e036      	b.n	80085ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8008560:	4a8b      	ldr	r2, [pc, #556]	; (8008790 <HAL_GPIO_Init+0x2a4>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d019      	beq.n	800859a <HAL_GPIO_Init+0xae>
 8008566:	4a8b      	ldr	r2, [pc, #556]	; (8008794 <HAL_GPIO_Init+0x2a8>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d016      	beq.n	800859a <HAL_GPIO_Init+0xae>
 800856c:	4a8a      	ldr	r2, [pc, #552]	; (8008798 <HAL_GPIO_Init+0x2ac>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d013      	beq.n	800859a <HAL_GPIO_Init+0xae>
          break;
 8008572:	e02c      	b.n	80085ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	623b      	str	r3, [r7, #32]
          break;
 800857a:	e028      	b.n	80085ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	3304      	adds	r3, #4
 8008582:	623b      	str	r3, [r7, #32]
          break;
 8008584:	e023      	b.n	80085ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	3308      	adds	r3, #8
 800858c:	623b      	str	r3, [r7, #32]
          break;
 800858e:	e01e      	b.n	80085ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	330c      	adds	r3, #12
 8008596:	623b      	str	r3, [r7, #32]
          break;
 8008598:	e019      	b.n	80085ce <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d102      	bne.n	80085a8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80085a2:	2304      	movs	r3, #4
 80085a4:	623b      	str	r3, [r7, #32]
          break;
 80085a6:	e012      	b.n	80085ce <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d105      	bne.n	80085bc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80085b0:	2308      	movs	r3, #8
 80085b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	69fa      	ldr	r2, [r7, #28]
 80085b8:	611a      	str	r2, [r3, #16]
          break;
 80085ba:	e008      	b.n	80085ce <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80085bc:	2308      	movs	r3, #8
 80085be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	69fa      	ldr	r2, [r7, #28]
 80085c4:	615a      	str	r2, [r3, #20]
          break;
 80085c6:	e002      	b.n	80085ce <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80085c8:	2300      	movs	r3, #0
 80085ca:	623b      	str	r3, [r7, #32]
          break;
 80085cc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	2bff      	cmp	r3, #255	; 0xff
 80085d2:	d801      	bhi.n	80085d8 <HAL_GPIO_Init+0xec>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	e001      	b.n	80085dc <HAL_GPIO_Init+0xf0>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	3304      	adds	r3, #4
 80085dc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	2bff      	cmp	r3, #255	; 0xff
 80085e2:	d802      	bhi.n	80085ea <HAL_GPIO_Init+0xfe>
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	e002      	b.n	80085f0 <HAL_GPIO_Init+0x104>
 80085ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ec:	3b08      	subs	r3, #8
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	210f      	movs	r1, #15
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	fa01 f303 	lsl.w	r3, r1, r3
 80085fe:	43db      	mvns	r3, r3
 8008600:	401a      	ands	r2, r3
 8008602:	6a39      	ldr	r1, [r7, #32]
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	fa01 f303 	lsl.w	r3, r1, r3
 800860a:	431a      	orrs	r2, r3
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008618:	2b00      	cmp	r3, #0
 800861a:	f000 80a2 	beq.w	8008762 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800861e:	4b5f      	ldr	r3, [pc, #380]	; (800879c <HAL_GPIO_Init+0x2b0>)
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	4a5e      	ldr	r2, [pc, #376]	; (800879c <HAL_GPIO_Init+0x2b0>)
 8008624:	f043 0301 	orr.w	r3, r3, #1
 8008628:	6193      	str	r3, [r2, #24]
 800862a:	4b5c      	ldr	r3, [pc, #368]	; (800879c <HAL_GPIO_Init+0x2b0>)
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	f003 0301 	and.w	r3, r3, #1
 8008632:	60bb      	str	r3, [r7, #8]
 8008634:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008636:	4a5a      	ldr	r2, [pc, #360]	; (80087a0 <HAL_GPIO_Init+0x2b4>)
 8008638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863a:	089b      	lsrs	r3, r3, #2
 800863c:	3302      	adds	r3, #2
 800863e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008642:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008646:	f003 0303 	and.w	r3, r3, #3
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	220f      	movs	r2, #15
 800864e:	fa02 f303 	lsl.w	r3, r2, r3
 8008652:	43db      	mvns	r3, r3
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	4013      	ands	r3, r2
 8008658:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a51      	ldr	r2, [pc, #324]	; (80087a4 <HAL_GPIO_Init+0x2b8>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d01f      	beq.n	80086a2 <HAL_GPIO_Init+0x1b6>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a50      	ldr	r2, [pc, #320]	; (80087a8 <HAL_GPIO_Init+0x2bc>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d019      	beq.n	800869e <HAL_GPIO_Init+0x1b2>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a4f      	ldr	r2, [pc, #316]	; (80087ac <HAL_GPIO_Init+0x2c0>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d013      	beq.n	800869a <HAL_GPIO_Init+0x1ae>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a4e      	ldr	r2, [pc, #312]	; (80087b0 <HAL_GPIO_Init+0x2c4>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d00d      	beq.n	8008696 <HAL_GPIO_Init+0x1aa>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a4d      	ldr	r2, [pc, #308]	; (80087b4 <HAL_GPIO_Init+0x2c8>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d007      	beq.n	8008692 <HAL_GPIO_Init+0x1a6>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a4c      	ldr	r2, [pc, #304]	; (80087b8 <HAL_GPIO_Init+0x2cc>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d101      	bne.n	800868e <HAL_GPIO_Init+0x1a2>
 800868a:	2305      	movs	r3, #5
 800868c:	e00a      	b.n	80086a4 <HAL_GPIO_Init+0x1b8>
 800868e:	2306      	movs	r3, #6
 8008690:	e008      	b.n	80086a4 <HAL_GPIO_Init+0x1b8>
 8008692:	2304      	movs	r3, #4
 8008694:	e006      	b.n	80086a4 <HAL_GPIO_Init+0x1b8>
 8008696:	2303      	movs	r3, #3
 8008698:	e004      	b.n	80086a4 <HAL_GPIO_Init+0x1b8>
 800869a:	2302      	movs	r3, #2
 800869c:	e002      	b.n	80086a4 <HAL_GPIO_Init+0x1b8>
 800869e:	2301      	movs	r3, #1
 80086a0:	e000      	b.n	80086a4 <HAL_GPIO_Init+0x1b8>
 80086a2:	2300      	movs	r3, #0
 80086a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086a6:	f002 0203 	and.w	r2, r2, #3
 80086aa:	0092      	lsls	r2, r2, #2
 80086ac:	4093      	lsls	r3, r2
 80086ae:	68fa      	ldr	r2, [r7, #12]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80086b4:	493a      	ldr	r1, [pc, #232]	; (80087a0 <HAL_GPIO_Init+0x2b4>)
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	089b      	lsrs	r3, r3, #2
 80086ba:	3302      	adds	r3, #2
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d006      	beq.n	80086dc <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80086ce:	4b3b      	ldr	r3, [pc, #236]	; (80087bc <HAL_GPIO_Init+0x2d0>)
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	493a      	ldr	r1, [pc, #232]	; (80087bc <HAL_GPIO_Init+0x2d0>)
 80086d4:	69bb      	ldr	r3, [r7, #24]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	600b      	str	r3, [r1, #0]
 80086da:	e006      	b.n	80086ea <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80086dc:	4b37      	ldr	r3, [pc, #220]	; (80087bc <HAL_GPIO_Init+0x2d0>)
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	43db      	mvns	r3, r3
 80086e4:	4935      	ldr	r1, [pc, #212]	; (80087bc <HAL_GPIO_Init+0x2d0>)
 80086e6:	4013      	ands	r3, r2
 80086e8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d006      	beq.n	8008704 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80086f6:	4b31      	ldr	r3, [pc, #196]	; (80087bc <HAL_GPIO_Init+0x2d0>)
 80086f8:	685a      	ldr	r2, [r3, #4]
 80086fa:	4930      	ldr	r1, [pc, #192]	; (80087bc <HAL_GPIO_Init+0x2d0>)
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	4313      	orrs	r3, r2
 8008700:	604b      	str	r3, [r1, #4]
 8008702:	e006      	b.n	8008712 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008704:	4b2d      	ldr	r3, [pc, #180]	; (80087bc <HAL_GPIO_Init+0x2d0>)
 8008706:	685a      	ldr	r2, [r3, #4]
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	43db      	mvns	r3, r3
 800870c:	492b      	ldr	r1, [pc, #172]	; (80087bc <HAL_GPIO_Init+0x2d0>)
 800870e:	4013      	ands	r3, r2
 8008710:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800871a:	2b00      	cmp	r3, #0
 800871c:	d006      	beq.n	800872c <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800871e:	4b27      	ldr	r3, [pc, #156]	; (80087bc <HAL_GPIO_Init+0x2d0>)
 8008720:	689a      	ldr	r2, [r3, #8]
 8008722:	4926      	ldr	r1, [pc, #152]	; (80087bc <HAL_GPIO_Init+0x2d0>)
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	4313      	orrs	r3, r2
 8008728:	608b      	str	r3, [r1, #8]
 800872a:	e006      	b.n	800873a <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800872c:	4b23      	ldr	r3, [pc, #140]	; (80087bc <HAL_GPIO_Init+0x2d0>)
 800872e:	689a      	ldr	r2, [r3, #8]
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	43db      	mvns	r3, r3
 8008734:	4921      	ldr	r1, [pc, #132]	; (80087bc <HAL_GPIO_Init+0x2d0>)
 8008736:	4013      	ands	r3, r2
 8008738:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008742:	2b00      	cmp	r3, #0
 8008744:	d006      	beq.n	8008754 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008746:	4b1d      	ldr	r3, [pc, #116]	; (80087bc <HAL_GPIO_Init+0x2d0>)
 8008748:	68da      	ldr	r2, [r3, #12]
 800874a:	491c      	ldr	r1, [pc, #112]	; (80087bc <HAL_GPIO_Init+0x2d0>)
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	4313      	orrs	r3, r2
 8008750:	60cb      	str	r3, [r1, #12]
 8008752:	e006      	b.n	8008762 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008754:	4b19      	ldr	r3, [pc, #100]	; (80087bc <HAL_GPIO_Init+0x2d0>)
 8008756:	68da      	ldr	r2, [r3, #12]
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	43db      	mvns	r3, r3
 800875c:	4917      	ldr	r1, [pc, #92]	; (80087bc <HAL_GPIO_Init+0x2d0>)
 800875e:	4013      	ands	r3, r2
 8008760:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8008762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008764:	3301      	adds	r3, #1
 8008766:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876e:	fa22 f303 	lsr.w	r3, r2, r3
 8008772:	2b00      	cmp	r3, #0
 8008774:	f47f aec4 	bne.w	8008500 <HAL_GPIO_Init+0x14>
  }
}
 8008778:	bf00      	nop
 800877a:	372c      	adds	r7, #44	; 0x2c
 800877c:	46bd      	mov	sp, r7
 800877e:	bc80      	pop	{r7}
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	10210000 	.word	0x10210000
 8008788:	10110000 	.word	0x10110000
 800878c:	10120000 	.word	0x10120000
 8008790:	10310000 	.word	0x10310000
 8008794:	10320000 	.word	0x10320000
 8008798:	10220000 	.word	0x10220000
 800879c:	40021000 	.word	0x40021000
 80087a0:	40010000 	.word	0x40010000
 80087a4:	40010800 	.word	0x40010800
 80087a8:	40010c00 	.word	0x40010c00
 80087ac:	40011000 	.word	0x40011000
 80087b0:	40011400 	.word	0x40011400
 80087b4:	40011800 	.word	0x40011800
 80087b8:	40011c00 	.word	0x40011c00
 80087bc:	40010400 	.word	0x40010400

080087c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	460b      	mov	r3, r1
 80087ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	689a      	ldr	r2, [r3, #8]
 80087d0:	887b      	ldrh	r3, [r7, #2]
 80087d2:	4013      	ands	r3, r2
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d002      	beq.n	80087de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80087d8:	2301      	movs	r3, #1
 80087da:	73fb      	strb	r3, [r7, #15]
 80087dc:	e001      	b.n	80087e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80087de:	2300      	movs	r3, #0
 80087e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80087e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3714      	adds	r7, #20
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bc80      	pop	{r7}
 80087ec:	4770      	bx	lr

080087ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80087ee:	b480      	push	{r7}
 80087f0:	b083      	sub	sp, #12
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
 80087f6:	460b      	mov	r3, r1
 80087f8:	807b      	strh	r3, [r7, #2]
 80087fa:	4613      	mov	r3, r2
 80087fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80087fe:	787b      	ldrb	r3, [r7, #1]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d003      	beq.n	800880c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008804:	887a      	ldrh	r2, [r7, #2]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800880a:	e003      	b.n	8008814 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800880c:	887b      	ldrh	r3, [r7, #2]
 800880e:	041a      	lsls	r2, r3, #16
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	611a      	str	r2, [r3, #16]
}
 8008814:	bf00      	nop
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	bc80      	pop	{r7}
 800881c:	4770      	bx	lr

0800881e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800881e:	b480      	push	{r7}
 8008820:	b085      	sub	sp, #20
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
 8008826:	460b      	mov	r3, r1
 8008828:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008830:	887a      	ldrh	r2, [r7, #2]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	4013      	ands	r3, r2
 8008836:	041a      	lsls	r2, r3, #16
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	43d9      	mvns	r1, r3
 800883c:	887b      	ldrh	r3, [r7, #2]
 800883e:	400b      	ands	r3, r1
 8008840:	431a      	orrs	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	611a      	str	r2, [r3, #16]
}
 8008846:	bf00      	nop
 8008848:	3714      	adds	r7, #20
 800884a:	46bd      	mov	sp, r7
 800884c:	bc80      	pop	{r7}
 800884e:	4770      	bx	lr

08008850 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	4603      	mov	r3, r0
 8008858:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800885a:	4b08      	ldr	r3, [pc, #32]	; (800887c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800885c:	695a      	ldr	r2, [r3, #20]
 800885e:	88fb      	ldrh	r3, [r7, #6]
 8008860:	4013      	ands	r3, r2
 8008862:	2b00      	cmp	r3, #0
 8008864:	d006      	beq.n	8008874 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008866:	4a05      	ldr	r2, [pc, #20]	; (800887c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008868:	88fb      	ldrh	r3, [r7, #6]
 800886a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800886c:	88fb      	ldrh	r3, [r7, #6]
 800886e:	4618      	mov	r0, r3
 8008870:	f7fe fd2c 	bl	80072cc <HAL_GPIO_EXTI_Callback>
  }
}
 8008874:	bf00      	nop
 8008876:	3708      	adds	r7, #8
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	40010400 	.word	0x40010400

08008880 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d101      	bne.n	8008892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e26c      	b.n	8008d6c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f003 0301 	and.w	r3, r3, #1
 800889a:	2b00      	cmp	r3, #0
 800889c:	f000 8087 	beq.w	80089ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80088a0:	4b92      	ldr	r3, [pc, #584]	; (8008aec <HAL_RCC_OscConfig+0x26c>)
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	f003 030c 	and.w	r3, r3, #12
 80088a8:	2b04      	cmp	r3, #4
 80088aa:	d00c      	beq.n	80088c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80088ac:	4b8f      	ldr	r3, [pc, #572]	; (8008aec <HAL_RCC_OscConfig+0x26c>)
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	f003 030c 	and.w	r3, r3, #12
 80088b4:	2b08      	cmp	r3, #8
 80088b6:	d112      	bne.n	80088de <HAL_RCC_OscConfig+0x5e>
 80088b8:	4b8c      	ldr	r3, [pc, #560]	; (8008aec <HAL_RCC_OscConfig+0x26c>)
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088c4:	d10b      	bne.n	80088de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088c6:	4b89      	ldr	r3, [pc, #548]	; (8008aec <HAL_RCC_OscConfig+0x26c>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d06c      	beq.n	80089ac <HAL_RCC_OscConfig+0x12c>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d168      	bne.n	80089ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	e246      	b.n	8008d6c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088e6:	d106      	bne.n	80088f6 <HAL_RCC_OscConfig+0x76>
 80088e8:	4b80      	ldr	r3, [pc, #512]	; (8008aec <HAL_RCC_OscConfig+0x26c>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a7f      	ldr	r2, [pc, #508]	; (8008aec <HAL_RCC_OscConfig+0x26c>)
 80088ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088f2:	6013      	str	r3, [r2, #0]
 80088f4:	e02e      	b.n	8008954 <HAL_RCC_OscConfig+0xd4>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d10c      	bne.n	8008918 <HAL_RCC_OscConfig+0x98>
 80088fe:	4b7b      	ldr	r3, [pc, #492]	; (8008aec <HAL_RCC_OscConfig+0x26c>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a7a      	ldr	r2, [pc, #488]	; (8008aec <HAL_RCC_OscConfig+0x26c>)
 8008904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008908:	6013      	str	r3, [r2, #0]
 800890a:	4b78      	ldr	r3, [pc, #480]	; (8008aec <HAL_RCC_OscConfig+0x26c>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a77      	ldr	r2, [pc, #476]	; (8008aec <HAL_RCC_OscConfig+0x26c>)
 8008910:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008914:	6013      	str	r3, [r2, #0]
 8008916:	e01d      	b.n	8008954 <HAL_RCC_OscConfig+0xd4>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008920:	d10c      	bne.n	800893c <HAL_RCC_OscConfig+0xbc>
 8008922:	4b72      	ldr	r3, [pc, #456]	; (8008aec <HAL_RCC_OscConfig+0x26c>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a71      	ldr	r2, [pc, #452]	; (8008aec <HAL_RCC_OscConfig+0x26c>)
 8008928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800892c:	6013      	str	r3, [r2, #0]
 800892e:	4b6f      	ldr	r3, [pc, #444]	; (8008aec <HAL_RCC_OscConfig+0x26c>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a6e      	ldr	r2, [pc, #440]	; (8008aec <HAL_RCC_OscConfig+0x26c>)
 8008934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008938:	6013      	str	r3, [r2, #0]
 800893a:	e00b      	b.n	8008954 <HAL_RCC_OscConfig+0xd4>
 800893c:	4b6b      	ldr	r3, [pc, #428]	; (8008aec <HAL_RCC_OscConfig+0x26c>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a6a      	ldr	r2, [pc, #424]	; (8008aec <HAL_RCC_OscConfig+0x26c>)
 8008942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008946:	6013      	str	r3, [r2, #0]
 8008948:	4b68      	ldr	r3, [pc, #416]	; (8008aec <HAL_RCC_OscConfig+0x26c>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a67      	ldr	r2, [pc, #412]	; (8008aec <HAL_RCC_OscConfig+0x26c>)
 800894e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008952:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d013      	beq.n	8008984 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800895c:	f7ff fb84 	bl	8008068 <HAL_GetTick>
 8008960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008962:	e008      	b.n	8008976 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008964:	f7ff fb80 	bl	8008068 <HAL_GetTick>
 8008968:	4602      	mov	r2, r0
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	1ad3      	subs	r3, r2, r3
 800896e:	2b64      	cmp	r3, #100	; 0x64
 8008970:	d901      	bls.n	8008976 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008972:	2303      	movs	r3, #3
 8008974:	e1fa      	b.n	8008d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008976:	4b5d      	ldr	r3, [pc, #372]	; (8008aec <HAL_RCC_OscConfig+0x26c>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800897e:	2b00      	cmp	r3, #0
 8008980:	d0f0      	beq.n	8008964 <HAL_RCC_OscConfig+0xe4>
 8008982:	e014      	b.n	80089ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008984:	f7ff fb70 	bl	8008068 <HAL_GetTick>
 8008988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800898a:	e008      	b.n	800899e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800898c:	f7ff fb6c 	bl	8008068 <HAL_GetTick>
 8008990:	4602      	mov	r2, r0
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	1ad3      	subs	r3, r2, r3
 8008996:	2b64      	cmp	r3, #100	; 0x64
 8008998:	d901      	bls.n	800899e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800899a:	2303      	movs	r3, #3
 800899c:	e1e6      	b.n	8008d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800899e:	4b53      	ldr	r3, [pc, #332]	; (8008aec <HAL_RCC_OscConfig+0x26c>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d1f0      	bne.n	800898c <HAL_RCC_OscConfig+0x10c>
 80089aa:	e000      	b.n	80089ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f003 0302 	and.w	r3, r3, #2
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d063      	beq.n	8008a82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80089ba:	4b4c      	ldr	r3, [pc, #304]	; (8008aec <HAL_RCC_OscConfig+0x26c>)
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	f003 030c 	and.w	r3, r3, #12
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00b      	beq.n	80089de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80089c6:	4b49      	ldr	r3, [pc, #292]	; (8008aec <HAL_RCC_OscConfig+0x26c>)
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	f003 030c 	and.w	r3, r3, #12
 80089ce:	2b08      	cmp	r3, #8
 80089d0:	d11c      	bne.n	8008a0c <HAL_RCC_OscConfig+0x18c>
 80089d2:	4b46      	ldr	r3, [pc, #280]	; (8008aec <HAL_RCC_OscConfig+0x26c>)
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d116      	bne.n	8008a0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80089de:	4b43      	ldr	r3, [pc, #268]	; (8008aec <HAL_RCC_OscConfig+0x26c>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 0302 	and.w	r3, r3, #2
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d005      	beq.n	80089f6 <HAL_RCC_OscConfig+0x176>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d001      	beq.n	80089f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e1ba      	b.n	8008d6c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089f6:	4b3d      	ldr	r3, [pc, #244]	; (8008aec <HAL_RCC_OscConfig+0x26c>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	695b      	ldr	r3, [r3, #20]
 8008a02:	00db      	lsls	r3, r3, #3
 8008a04:	4939      	ldr	r1, [pc, #228]	; (8008aec <HAL_RCC_OscConfig+0x26c>)
 8008a06:	4313      	orrs	r3, r2
 8008a08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a0a:	e03a      	b.n	8008a82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d020      	beq.n	8008a56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a14:	4b36      	ldr	r3, [pc, #216]	; (8008af0 <HAL_RCC_OscConfig+0x270>)
 8008a16:	2201      	movs	r2, #1
 8008a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a1a:	f7ff fb25 	bl	8008068 <HAL_GetTick>
 8008a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a20:	e008      	b.n	8008a34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a22:	f7ff fb21 	bl	8008068 <HAL_GetTick>
 8008a26:	4602      	mov	r2, r0
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	d901      	bls.n	8008a34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008a30:	2303      	movs	r3, #3
 8008a32:	e19b      	b.n	8008d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a34:	4b2d      	ldr	r3, [pc, #180]	; (8008aec <HAL_RCC_OscConfig+0x26c>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 0302 	and.w	r3, r3, #2
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d0f0      	beq.n	8008a22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a40:	4b2a      	ldr	r3, [pc, #168]	; (8008aec <HAL_RCC_OscConfig+0x26c>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	695b      	ldr	r3, [r3, #20]
 8008a4c:	00db      	lsls	r3, r3, #3
 8008a4e:	4927      	ldr	r1, [pc, #156]	; (8008aec <HAL_RCC_OscConfig+0x26c>)
 8008a50:	4313      	orrs	r3, r2
 8008a52:	600b      	str	r3, [r1, #0]
 8008a54:	e015      	b.n	8008a82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a56:	4b26      	ldr	r3, [pc, #152]	; (8008af0 <HAL_RCC_OscConfig+0x270>)
 8008a58:	2200      	movs	r2, #0
 8008a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a5c:	f7ff fb04 	bl	8008068 <HAL_GetTick>
 8008a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a62:	e008      	b.n	8008a76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a64:	f7ff fb00 	bl	8008068 <HAL_GetTick>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	1ad3      	subs	r3, r2, r3
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d901      	bls.n	8008a76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008a72:	2303      	movs	r3, #3
 8008a74:	e17a      	b.n	8008d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a76:	4b1d      	ldr	r3, [pc, #116]	; (8008aec <HAL_RCC_OscConfig+0x26c>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f003 0302 	and.w	r3, r3, #2
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1f0      	bne.n	8008a64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f003 0308 	and.w	r3, r3, #8
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d03a      	beq.n	8008b04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d019      	beq.n	8008aca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a96:	4b17      	ldr	r3, [pc, #92]	; (8008af4 <HAL_RCC_OscConfig+0x274>)
 8008a98:	2201      	movs	r2, #1
 8008a9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a9c:	f7ff fae4 	bl	8008068 <HAL_GetTick>
 8008aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008aa2:	e008      	b.n	8008ab6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008aa4:	f7ff fae0 	bl	8008068 <HAL_GetTick>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d901      	bls.n	8008ab6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e15a      	b.n	8008d6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ab6:	4b0d      	ldr	r3, [pc, #52]	; (8008aec <HAL_RCC_OscConfig+0x26c>)
 8008ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aba:	f003 0302 	and.w	r3, r3, #2
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d0f0      	beq.n	8008aa4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008ac2:	2001      	movs	r0, #1
 8008ac4:	f000 fada 	bl	800907c <RCC_Delay>
 8008ac8:	e01c      	b.n	8008b04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008aca:	4b0a      	ldr	r3, [pc, #40]	; (8008af4 <HAL_RCC_OscConfig+0x274>)
 8008acc:	2200      	movs	r2, #0
 8008ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ad0:	f7ff faca 	bl	8008068 <HAL_GetTick>
 8008ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ad6:	e00f      	b.n	8008af8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ad8:	f7ff fac6 	bl	8008068 <HAL_GetTick>
 8008adc:	4602      	mov	r2, r0
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	1ad3      	subs	r3, r2, r3
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d908      	bls.n	8008af8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008ae6:	2303      	movs	r3, #3
 8008ae8:	e140      	b.n	8008d6c <HAL_RCC_OscConfig+0x4ec>
 8008aea:	bf00      	nop
 8008aec:	40021000 	.word	0x40021000
 8008af0:	42420000 	.word	0x42420000
 8008af4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008af8:	4b9e      	ldr	r3, [pc, #632]	; (8008d74 <HAL_RCC_OscConfig+0x4f4>)
 8008afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afc:	f003 0302 	and.w	r3, r3, #2
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d1e9      	bne.n	8008ad8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 0304 	and.w	r3, r3, #4
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	f000 80a6 	beq.w	8008c5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b12:	2300      	movs	r3, #0
 8008b14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b16:	4b97      	ldr	r3, [pc, #604]	; (8008d74 <HAL_RCC_OscConfig+0x4f4>)
 8008b18:	69db      	ldr	r3, [r3, #28]
 8008b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10d      	bne.n	8008b3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b22:	4b94      	ldr	r3, [pc, #592]	; (8008d74 <HAL_RCC_OscConfig+0x4f4>)
 8008b24:	69db      	ldr	r3, [r3, #28]
 8008b26:	4a93      	ldr	r2, [pc, #588]	; (8008d74 <HAL_RCC_OscConfig+0x4f4>)
 8008b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b2c:	61d3      	str	r3, [r2, #28]
 8008b2e:	4b91      	ldr	r3, [pc, #580]	; (8008d74 <HAL_RCC_OscConfig+0x4f4>)
 8008b30:	69db      	ldr	r3, [r3, #28]
 8008b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b36:	60bb      	str	r3, [r7, #8]
 8008b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b3e:	4b8e      	ldr	r3, [pc, #568]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d118      	bne.n	8008b7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008b4a:	4b8b      	ldr	r3, [pc, #556]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a8a      	ldr	r2, [pc, #552]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b56:	f7ff fa87 	bl	8008068 <HAL_GetTick>
 8008b5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b5c:	e008      	b.n	8008b70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b5e:	f7ff fa83 	bl	8008068 <HAL_GetTick>
 8008b62:	4602      	mov	r2, r0
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	1ad3      	subs	r3, r2, r3
 8008b68:	2b64      	cmp	r3, #100	; 0x64
 8008b6a:	d901      	bls.n	8008b70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	e0fd      	b.n	8008d6c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b70:	4b81      	ldr	r3, [pc, #516]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d0f0      	beq.n	8008b5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d106      	bne.n	8008b92 <HAL_RCC_OscConfig+0x312>
 8008b84:	4b7b      	ldr	r3, [pc, #492]	; (8008d74 <HAL_RCC_OscConfig+0x4f4>)
 8008b86:	6a1b      	ldr	r3, [r3, #32]
 8008b88:	4a7a      	ldr	r2, [pc, #488]	; (8008d74 <HAL_RCC_OscConfig+0x4f4>)
 8008b8a:	f043 0301 	orr.w	r3, r3, #1
 8008b8e:	6213      	str	r3, [r2, #32]
 8008b90:	e02d      	b.n	8008bee <HAL_RCC_OscConfig+0x36e>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10c      	bne.n	8008bb4 <HAL_RCC_OscConfig+0x334>
 8008b9a:	4b76      	ldr	r3, [pc, #472]	; (8008d74 <HAL_RCC_OscConfig+0x4f4>)
 8008b9c:	6a1b      	ldr	r3, [r3, #32]
 8008b9e:	4a75      	ldr	r2, [pc, #468]	; (8008d74 <HAL_RCC_OscConfig+0x4f4>)
 8008ba0:	f023 0301 	bic.w	r3, r3, #1
 8008ba4:	6213      	str	r3, [r2, #32]
 8008ba6:	4b73      	ldr	r3, [pc, #460]	; (8008d74 <HAL_RCC_OscConfig+0x4f4>)
 8008ba8:	6a1b      	ldr	r3, [r3, #32]
 8008baa:	4a72      	ldr	r2, [pc, #456]	; (8008d74 <HAL_RCC_OscConfig+0x4f4>)
 8008bac:	f023 0304 	bic.w	r3, r3, #4
 8008bb0:	6213      	str	r3, [r2, #32]
 8008bb2:	e01c      	b.n	8008bee <HAL_RCC_OscConfig+0x36e>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	2b05      	cmp	r3, #5
 8008bba:	d10c      	bne.n	8008bd6 <HAL_RCC_OscConfig+0x356>
 8008bbc:	4b6d      	ldr	r3, [pc, #436]	; (8008d74 <HAL_RCC_OscConfig+0x4f4>)
 8008bbe:	6a1b      	ldr	r3, [r3, #32]
 8008bc0:	4a6c      	ldr	r2, [pc, #432]	; (8008d74 <HAL_RCC_OscConfig+0x4f4>)
 8008bc2:	f043 0304 	orr.w	r3, r3, #4
 8008bc6:	6213      	str	r3, [r2, #32]
 8008bc8:	4b6a      	ldr	r3, [pc, #424]	; (8008d74 <HAL_RCC_OscConfig+0x4f4>)
 8008bca:	6a1b      	ldr	r3, [r3, #32]
 8008bcc:	4a69      	ldr	r2, [pc, #420]	; (8008d74 <HAL_RCC_OscConfig+0x4f4>)
 8008bce:	f043 0301 	orr.w	r3, r3, #1
 8008bd2:	6213      	str	r3, [r2, #32]
 8008bd4:	e00b      	b.n	8008bee <HAL_RCC_OscConfig+0x36e>
 8008bd6:	4b67      	ldr	r3, [pc, #412]	; (8008d74 <HAL_RCC_OscConfig+0x4f4>)
 8008bd8:	6a1b      	ldr	r3, [r3, #32]
 8008bda:	4a66      	ldr	r2, [pc, #408]	; (8008d74 <HAL_RCC_OscConfig+0x4f4>)
 8008bdc:	f023 0301 	bic.w	r3, r3, #1
 8008be0:	6213      	str	r3, [r2, #32]
 8008be2:	4b64      	ldr	r3, [pc, #400]	; (8008d74 <HAL_RCC_OscConfig+0x4f4>)
 8008be4:	6a1b      	ldr	r3, [r3, #32]
 8008be6:	4a63      	ldr	r2, [pc, #396]	; (8008d74 <HAL_RCC_OscConfig+0x4f4>)
 8008be8:	f023 0304 	bic.w	r3, r3, #4
 8008bec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d015      	beq.n	8008c22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008bf6:	f7ff fa37 	bl	8008068 <HAL_GetTick>
 8008bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008bfc:	e00a      	b.n	8008c14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bfe:	f7ff fa33 	bl	8008068 <HAL_GetTick>
 8008c02:	4602      	mov	r2, r0
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	1ad3      	subs	r3, r2, r3
 8008c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d901      	bls.n	8008c14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e0ab      	b.n	8008d6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c14:	4b57      	ldr	r3, [pc, #348]	; (8008d74 <HAL_RCC_OscConfig+0x4f4>)
 8008c16:	6a1b      	ldr	r3, [r3, #32]
 8008c18:	f003 0302 	and.w	r3, r3, #2
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d0ee      	beq.n	8008bfe <HAL_RCC_OscConfig+0x37e>
 8008c20:	e014      	b.n	8008c4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c22:	f7ff fa21 	bl	8008068 <HAL_GetTick>
 8008c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c28:	e00a      	b.n	8008c40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c2a:	f7ff fa1d 	bl	8008068 <HAL_GetTick>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	1ad3      	subs	r3, r2, r3
 8008c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d901      	bls.n	8008c40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008c3c:	2303      	movs	r3, #3
 8008c3e:	e095      	b.n	8008d6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c40:	4b4c      	ldr	r3, [pc, #304]	; (8008d74 <HAL_RCC_OscConfig+0x4f4>)
 8008c42:	6a1b      	ldr	r3, [r3, #32]
 8008c44:	f003 0302 	and.w	r3, r3, #2
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d1ee      	bne.n	8008c2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008c4c:	7dfb      	ldrb	r3, [r7, #23]
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d105      	bne.n	8008c5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c52:	4b48      	ldr	r3, [pc, #288]	; (8008d74 <HAL_RCC_OscConfig+0x4f4>)
 8008c54:	69db      	ldr	r3, [r3, #28]
 8008c56:	4a47      	ldr	r2, [pc, #284]	; (8008d74 <HAL_RCC_OscConfig+0x4f4>)
 8008c58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	69db      	ldr	r3, [r3, #28]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f000 8081 	beq.w	8008d6a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008c68:	4b42      	ldr	r3, [pc, #264]	; (8008d74 <HAL_RCC_OscConfig+0x4f4>)
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	f003 030c 	and.w	r3, r3, #12
 8008c70:	2b08      	cmp	r3, #8
 8008c72:	d061      	beq.n	8008d38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	69db      	ldr	r3, [r3, #28]
 8008c78:	2b02      	cmp	r3, #2
 8008c7a:	d146      	bne.n	8008d0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c7c:	4b3f      	ldr	r3, [pc, #252]	; (8008d7c <HAL_RCC_OscConfig+0x4fc>)
 8008c7e:	2200      	movs	r2, #0
 8008c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c82:	f7ff f9f1 	bl	8008068 <HAL_GetTick>
 8008c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008c88:	e008      	b.n	8008c9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c8a:	f7ff f9ed 	bl	8008068 <HAL_GetTick>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d901      	bls.n	8008c9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	e067      	b.n	8008d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008c9c:	4b35      	ldr	r3, [pc, #212]	; (8008d74 <HAL_RCC_OscConfig+0x4f4>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d1f0      	bne.n	8008c8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6a1b      	ldr	r3, [r3, #32]
 8008cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cb0:	d108      	bne.n	8008cc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008cb2:	4b30      	ldr	r3, [pc, #192]	; (8008d74 <HAL_RCC_OscConfig+0x4f4>)
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	492d      	ldr	r1, [pc, #180]	; (8008d74 <HAL_RCC_OscConfig+0x4f4>)
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008cc4:	4b2b      	ldr	r3, [pc, #172]	; (8008d74 <HAL_RCC_OscConfig+0x4f4>)
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a19      	ldr	r1, [r3, #32]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd4:	430b      	orrs	r3, r1
 8008cd6:	4927      	ldr	r1, [pc, #156]	; (8008d74 <HAL_RCC_OscConfig+0x4f4>)
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008cdc:	4b27      	ldr	r3, [pc, #156]	; (8008d7c <HAL_RCC_OscConfig+0x4fc>)
 8008cde:	2201      	movs	r2, #1
 8008ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ce2:	f7ff f9c1 	bl	8008068 <HAL_GetTick>
 8008ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008ce8:	e008      	b.n	8008cfc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cea:	f7ff f9bd 	bl	8008068 <HAL_GetTick>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	1ad3      	subs	r3, r2, r3
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d901      	bls.n	8008cfc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008cf8:	2303      	movs	r3, #3
 8008cfa:	e037      	b.n	8008d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008cfc:	4b1d      	ldr	r3, [pc, #116]	; (8008d74 <HAL_RCC_OscConfig+0x4f4>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d0f0      	beq.n	8008cea <HAL_RCC_OscConfig+0x46a>
 8008d08:	e02f      	b.n	8008d6a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d0a:	4b1c      	ldr	r3, [pc, #112]	; (8008d7c <HAL_RCC_OscConfig+0x4fc>)
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d10:	f7ff f9aa 	bl	8008068 <HAL_GetTick>
 8008d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008d16:	e008      	b.n	8008d2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d18:	f7ff f9a6 	bl	8008068 <HAL_GetTick>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	1ad3      	subs	r3, r2, r3
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d901      	bls.n	8008d2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008d26:	2303      	movs	r3, #3
 8008d28:	e020      	b.n	8008d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008d2a:	4b12      	ldr	r3, [pc, #72]	; (8008d74 <HAL_RCC_OscConfig+0x4f4>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d1f0      	bne.n	8008d18 <HAL_RCC_OscConfig+0x498>
 8008d36:	e018      	b.n	8008d6a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	69db      	ldr	r3, [r3, #28]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d101      	bne.n	8008d44 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	e013      	b.n	8008d6c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008d44:	4b0b      	ldr	r3, [pc, #44]	; (8008d74 <HAL_RCC_OscConfig+0x4f4>)
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a1b      	ldr	r3, [r3, #32]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d106      	bne.n	8008d66 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d001      	beq.n	8008d6a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	e000      	b.n	8008d6c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3718      	adds	r7, #24
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	40021000 	.word	0x40021000
 8008d78:	40007000 	.word	0x40007000
 8008d7c:	42420060 	.word	0x42420060

08008d80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d101      	bne.n	8008d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	e0d0      	b.n	8008f36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008d94:	4b6a      	ldr	r3, [pc, #424]	; (8008f40 <HAL_RCC_ClockConfig+0x1c0>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 0307 	and.w	r3, r3, #7
 8008d9c:	683a      	ldr	r2, [r7, #0]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d910      	bls.n	8008dc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008da2:	4b67      	ldr	r3, [pc, #412]	; (8008f40 <HAL_RCC_ClockConfig+0x1c0>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f023 0207 	bic.w	r2, r3, #7
 8008daa:	4965      	ldr	r1, [pc, #404]	; (8008f40 <HAL_RCC_ClockConfig+0x1c0>)
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008db2:	4b63      	ldr	r3, [pc, #396]	; (8008f40 <HAL_RCC_ClockConfig+0x1c0>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0307 	and.w	r3, r3, #7
 8008dba:	683a      	ldr	r2, [r7, #0]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d001      	beq.n	8008dc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e0b8      	b.n	8008f36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f003 0302 	and.w	r3, r3, #2
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d020      	beq.n	8008e12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f003 0304 	and.w	r3, r3, #4
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d005      	beq.n	8008de8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ddc:	4b59      	ldr	r3, [pc, #356]	; (8008f44 <HAL_RCC_ClockConfig+0x1c4>)
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	4a58      	ldr	r2, [pc, #352]	; (8008f44 <HAL_RCC_ClockConfig+0x1c4>)
 8008de2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008de6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f003 0308 	and.w	r3, r3, #8
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d005      	beq.n	8008e00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008df4:	4b53      	ldr	r3, [pc, #332]	; (8008f44 <HAL_RCC_ClockConfig+0x1c4>)
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	4a52      	ldr	r2, [pc, #328]	; (8008f44 <HAL_RCC_ClockConfig+0x1c4>)
 8008dfa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008dfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e00:	4b50      	ldr	r3, [pc, #320]	; (8008f44 <HAL_RCC_ClockConfig+0x1c4>)
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	494d      	ldr	r1, [pc, #308]	; (8008f44 <HAL_RCC_ClockConfig+0x1c4>)
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f003 0301 	and.w	r3, r3, #1
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d040      	beq.n	8008ea0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d107      	bne.n	8008e36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e26:	4b47      	ldr	r3, [pc, #284]	; (8008f44 <HAL_RCC_ClockConfig+0x1c4>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d115      	bne.n	8008e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	e07f      	b.n	8008f36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	d107      	bne.n	8008e4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e3e:	4b41      	ldr	r3, [pc, #260]	; (8008f44 <HAL_RCC_ClockConfig+0x1c4>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d109      	bne.n	8008e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e073      	b.n	8008f36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e4e:	4b3d      	ldr	r3, [pc, #244]	; (8008f44 <HAL_RCC_ClockConfig+0x1c4>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 0302 	and.w	r3, r3, #2
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d101      	bne.n	8008e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e06b      	b.n	8008f36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008e5e:	4b39      	ldr	r3, [pc, #228]	; (8008f44 <HAL_RCC_ClockConfig+0x1c4>)
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	f023 0203 	bic.w	r2, r3, #3
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	4936      	ldr	r1, [pc, #216]	; (8008f44 <HAL_RCC_ClockConfig+0x1c4>)
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008e70:	f7ff f8fa 	bl	8008068 <HAL_GetTick>
 8008e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e76:	e00a      	b.n	8008e8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e78:	f7ff f8f6 	bl	8008068 <HAL_GetTick>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d901      	bls.n	8008e8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	e053      	b.n	8008f36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e8e:	4b2d      	ldr	r3, [pc, #180]	; (8008f44 <HAL_RCC_ClockConfig+0x1c4>)
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	f003 020c 	and.w	r2, r3, #12
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d1eb      	bne.n	8008e78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008ea0:	4b27      	ldr	r3, [pc, #156]	; (8008f40 <HAL_RCC_ClockConfig+0x1c0>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 0307 	and.w	r3, r3, #7
 8008ea8:	683a      	ldr	r2, [r7, #0]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d210      	bcs.n	8008ed0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008eae:	4b24      	ldr	r3, [pc, #144]	; (8008f40 <HAL_RCC_ClockConfig+0x1c0>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f023 0207 	bic.w	r2, r3, #7
 8008eb6:	4922      	ldr	r1, [pc, #136]	; (8008f40 <HAL_RCC_ClockConfig+0x1c0>)
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ebe:	4b20      	ldr	r3, [pc, #128]	; (8008f40 <HAL_RCC_ClockConfig+0x1c0>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f003 0307 	and.w	r3, r3, #7
 8008ec6:	683a      	ldr	r2, [r7, #0]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d001      	beq.n	8008ed0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e032      	b.n	8008f36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 0304 	and.w	r3, r3, #4
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d008      	beq.n	8008eee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008edc:	4b19      	ldr	r3, [pc, #100]	; (8008f44 <HAL_RCC_ClockConfig+0x1c4>)
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	4916      	ldr	r1, [pc, #88]	; (8008f44 <HAL_RCC_ClockConfig+0x1c4>)
 8008eea:	4313      	orrs	r3, r2
 8008eec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 0308 	and.w	r3, r3, #8
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d009      	beq.n	8008f0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008efa:	4b12      	ldr	r3, [pc, #72]	; (8008f44 <HAL_RCC_ClockConfig+0x1c4>)
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	00db      	lsls	r3, r3, #3
 8008f08:	490e      	ldr	r1, [pc, #56]	; (8008f44 <HAL_RCC_ClockConfig+0x1c4>)
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008f0e:	f000 f821 	bl	8008f54 <HAL_RCC_GetSysClockFreq>
 8008f12:	4601      	mov	r1, r0
 8008f14:	4b0b      	ldr	r3, [pc, #44]	; (8008f44 <HAL_RCC_ClockConfig+0x1c4>)
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	091b      	lsrs	r3, r3, #4
 8008f1a:	f003 030f 	and.w	r3, r3, #15
 8008f1e:	4a0a      	ldr	r2, [pc, #40]	; (8008f48 <HAL_RCC_ClockConfig+0x1c8>)
 8008f20:	5cd3      	ldrb	r3, [r2, r3]
 8008f22:	fa21 f303 	lsr.w	r3, r1, r3
 8008f26:	4a09      	ldr	r2, [pc, #36]	; (8008f4c <HAL_RCC_ClockConfig+0x1cc>)
 8008f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008f2a:	4b09      	ldr	r3, [pc, #36]	; (8008f50 <HAL_RCC_ClockConfig+0x1d0>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7ff f858 	bl	8007fe4 <HAL_InitTick>

  return HAL_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3710      	adds	r7, #16
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	40022000 	.word	0x40022000
 8008f44:	40021000 	.word	0x40021000
 8008f48:	0800d29c 	.word	0x0800d29c
 8008f4c:	200003b4 	.word	0x200003b4
 8008f50:	200003b8 	.word	0x200003b8

08008f54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f54:	b490      	push	{r4, r7}
 8008f56:	b08a      	sub	sp, #40	; 0x28
 8008f58:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008f5a:	4b2a      	ldr	r3, [pc, #168]	; (8009004 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008f5c:	1d3c      	adds	r4, r7, #4
 8008f5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008f60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008f64:	4b28      	ldr	r3, [pc, #160]	; (8009008 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008f66:	881b      	ldrh	r3, [r3, #0]
 8008f68:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	61fb      	str	r3, [r7, #28]
 8008f6e:	2300      	movs	r3, #0
 8008f70:	61bb      	str	r3, [r7, #24]
 8008f72:	2300      	movs	r3, #0
 8008f74:	627b      	str	r3, [r7, #36]	; 0x24
 8008f76:	2300      	movs	r3, #0
 8008f78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008f7e:	4b23      	ldr	r3, [pc, #140]	; (800900c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	f003 030c 	and.w	r3, r3, #12
 8008f8a:	2b04      	cmp	r3, #4
 8008f8c:	d002      	beq.n	8008f94 <HAL_RCC_GetSysClockFreq+0x40>
 8008f8e:	2b08      	cmp	r3, #8
 8008f90:	d003      	beq.n	8008f9a <HAL_RCC_GetSysClockFreq+0x46>
 8008f92:	e02d      	b.n	8008ff0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008f94:	4b1e      	ldr	r3, [pc, #120]	; (8009010 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008f96:	623b      	str	r3, [r7, #32]
      break;
 8008f98:	e02d      	b.n	8008ff6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	0c9b      	lsrs	r3, r3, #18
 8008f9e:	f003 030f 	and.w	r3, r3, #15
 8008fa2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008fa6:	4413      	add	r3, r2
 8008fa8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008fac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d013      	beq.n	8008fe0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008fb8:	4b14      	ldr	r3, [pc, #80]	; (800900c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	0c5b      	lsrs	r3, r3, #17
 8008fbe:	f003 0301 	and.w	r3, r3, #1
 8008fc2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008fc6:	4413      	add	r3, r2
 8008fc8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008fcc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	4a0f      	ldr	r2, [pc, #60]	; (8009010 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008fd2:	fb02 f203 	mul.w	r2, r2, r3
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8008fde:	e004      	b.n	8008fea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	4a0c      	ldr	r2, [pc, #48]	; (8009014 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008fe4:	fb02 f303 	mul.w	r3, r2, r3
 8008fe8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8008fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fec:	623b      	str	r3, [r7, #32]
      break;
 8008fee:	e002      	b.n	8008ff6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008ff0:	4b07      	ldr	r3, [pc, #28]	; (8009010 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008ff2:	623b      	str	r3, [r7, #32]
      break;
 8008ff4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008ff6:	6a3b      	ldr	r3, [r7, #32]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3728      	adds	r7, #40	; 0x28
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bc90      	pop	{r4, r7}
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	0800bac8 	.word	0x0800bac8
 8009008:	0800bad8 	.word	0x0800bad8
 800900c:	40021000 	.word	0x40021000
 8009010:	007a1200 	.word	0x007a1200
 8009014:	003d0900 	.word	0x003d0900

08009018 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009018:	b480      	push	{r7}
 800901a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800901c:	4b02      	ldr	r3, [pc, #8]	; (8009028 <HAL_RCC_GetHCLKFreq+0x10>)
 800901e:	681b      	ldr	r3, [r3, #0]
}
 8009020:	4618      	mov	r0, r3
 8009022:	46bd      	mov	sp, r7
 8009024:	bc80      	pop	{r7}
 8009026:	4770      	bx	lr
 8009028:	200003b4 	.word	0x200003b4

0800902c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009030:	f7ff fff2 	bl	8009018 <HAL_RCC_GetHCLKFreq>
 8009034:	4601      	mov	r1, r0
 8009036:	4b05      	ldr	r3, [pc, #20]	; (800904c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	0a1b      	lsrs	r3, r3, #8
 800903c:	f003 0307 	and.w	r3, r3, #7
 8009040:	4a03      	ldr	r2, [pc, #12]	; (8009050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009042:	5cd3      	ldrb	r3, [r2, r3]
 8009044:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009048:	4618      	mov	r0, r3
 800904a:	bd80      	pop	{r7, pc}
 800904c:	40021000 	.word	0x40021000
 8009050:	0800d2ac 	.word	0x0800d2ac

08009054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009058:	f7ff ffde 	bl	8009018 <HAL_RCC_GetHCLKFreq>
 800905c:	4601      	mov	r1, r0
 800905e:	4b05      	ldr	r3, [pc, #20]	; (8009074 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	0adb      	lsrs	r3, r3, #11
 8009064:	f003 0307 	and.w	r3, r3, #7
 8009068:	4a03      	ldr	r2, [pc, #12]	; (8009078 <HAL_RCC_GetPCLK2Freq+0x24>)
 800906a:	5cd3      	ldrb	r3, [r2, r3]
 800906c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009070:	4618      	mov	r0, r3
 8009072:	bd80      	pop	{r7, pc}
 8009074:	40021000 	.word	0x40021000
 8009078:	0800d2ac 	.word	0x0800d2ac

0800907c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800907c:	b480      	push	{r7}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009084:	4b0a      	ldr	r3, [pc, #40]	; (80090b0 <RCC_Delay+0x34>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a0a      	ldr	r2, [pc, #40]	; (80090b4 <RCC_Delay+0x38>)
 800908a:	fba2 2303 	umull	r2, r3, r2, r3
 800908e:	0a5b      	lsrs	r3, r3, #9
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	fb02 f303 	mul.w	r3, r2, r3
 8009096:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009098:	bf00      	nop
  }
  while (Delay --);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	1e5a      	subs	r2, r3, #1
 800909e:	60fa      	str	r2, [r7, #12]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1f9      	bne.n	8009098 <RCC_Delay+0x1c>
}
 80090a4:	bf00      	nop
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bc80      	pop	{r7}
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	200003b4 	.word	0x200003b4
 80090b4:	10624dd3 	.word	0x10624dd3

080090b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d101      	bne.n	80090ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	e076      	b.n	80091b8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d108      	bne.n	80090e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090da:	d009      	beq.n	80090f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	61da      	str	r2, [r3, #28]
 80090e2:	e005      	b.n	80090f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d106      	bne.n	8009110 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f7fe fd22 	bl	8007b54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2202      	movs	r2, #2
 8009114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009126:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009138:	431a      	orrs	r2, r3
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009142:	431a      	orrs	r2, r3
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	691b      	ldr	r3, [r3, #16]
 8009148:	f003 0302 	and.w	r3, r3, #2
 800914c:	431a      	orrs	r2, r3
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	695b      	ldr	r3, [r3, #20]
 8009152:	f003 0301 	and.w	r3, r3, #1
 8009156:	431a      	orrs	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	699b      	ldr	r3, [r3, #24]
 800915c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009160:	431a      	orrs	r2, r3
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	69db      	ldr	r3, [r3, #28]
 8009166:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800916a:	431a      	orrs	r2, r3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6a1b      	ldr	r3, [r3, #32]
 8009170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009174:	ea42 0103 	orr.w	r1, r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800917c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	430a      	orrs	r2, r1
 8009186:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	699b      	ldr	r3, [r3, #24]
 800918c:	0c1a      	lsrs	r2, r3, #16
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f002 0204 	and.w	r2, r2, #4
 8009196:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	69da      	ldr	r2, [r3, #28]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80091a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2201      	movs	r2, #1
 80091b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80091b6:	2300      	movs	r3, #0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b08c      	sub	sp, #48	; 0x30
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
 80091cc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80091ce:	2301      	movs	r3, #1
 80091d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80091d2:	2300      	movs	r3, #0
 80091d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d101      	bne.n	80091e6 <HAL_SPI_TransmitReceive+0x26>
 80091e2:	2302      	movs	r3, #2
 80091e4:	e18a      	b.n	80094fc <HAL_SPI_TransmitReceive+0x33c>
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2201      	movs	r2, #1
 80091ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80091ee:	f7fe ff3b 	bl	8008068 <HAL_GetTick>
 80091f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009204:	887b      	ldrh	r3, [r7, #2]
 8009206:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009208:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800920c:	2b01      	cmp	r3, #1
 800920e:	d00f      	beq.n	8009230 <HAL_SPI_TransmitReceive+0x70>
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009216:	d107      	bne.n	8009228 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d103      	bne.n	8009228 <HAL_SPI_TransmitReceive+0x68>
 8009220:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009224:	2b04      	cmp	r3, #4
 8009226:	d003      	beq.n	8009230 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009228:	2302      	movs	r3, #2
 800922a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800922e:	e15b      	b.n	80094e8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d005      	beq.n	8009242 <HAL_SPI_TransmitReceive+0x82>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d002      	beq.n	8009242 <HAL_SPI_TransmitReceive+0x82>
 800923c:	887b      	ldrh	r3, [r7, #2]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d103      	bne.n	800924a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009248:	e14e      	b.n	80094e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009250:	b2db      	uxtb	r3, r3
 8009252:	2b04      	cmp	r3, #4
 8009254:	d003      	beq.n	800925e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2205      	movs	r2, #5
 800925a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2200      	movs	r2, #0
 8009262:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	887a      	ldrh	r2, [r7, #2]
 800926e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	887a      	ldrh	r2, [r7, #2]
 8009274:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	68ba      	ldr	r2, [r7, #8]
 800927a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	887a      	ldrh	r2, [r7, #2]
 8009280:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	887a      	ldrh	r2, [r7, #2]
 8009286:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2200      	movs	r2, #0
 800928c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2200      	movs	r2, #0
 8009292:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800929e:	2b40      	cmp	r3, #64	; 0x40
 80092a0:	d007      	beq.n	80092b2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092ba:	d178      	bne.n	80093ae <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d002      	beq.n	80092ca <HAL_SPI_TransmitReceive+0x10a>
 80092c4:	8b7b      	ldrh	r3, [r7, #26]
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d166      	bne.n	8009398 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ce:	881a      	ldrh	r2, [r3, #0]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092da:	1c9a      	adds	r2, r3, #2
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	3b01      	subs	r3, #1
 80092e8:	b29a      	uxth	r2, r3
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092ee:	e053      	b.n	8009398 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	f003 0302 	and.w	r3, r3, #2
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	d11b      	bne.n	8009336 <HAL_SPI_TransmitReceive+0x176>
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009302:	b29b      	uxth	r3, r3
 8009304:	2b00      	cmp	r3, #0
 8009306:	d016      	beq.n	8009336 <HAL_SPI_TransmitReceive+0x176>
 8009308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800930a:	2b01      	cmp	r3, #1
 800930c:	d113      	bne.n	8009336 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009312:	881a      	ldrh	r2, [r3, #0]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800931e:	1c9a      	adds	r2, r3, #2
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009328:	b29b      	uxth	r3, r3
 800932a:	3b01      	subs	r3, #1
 800932c:	b29a      	uxth	r2, r3
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009332:	2300      	movs	r3, #0
 8009334:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	f003 0301 	and.w	r3, r3, #1
 8009340:	2b01      	cmp	r3, #1
 8009342:	d119      	bne.n	8009378 <HAL_SPI_TransmitReceive+0x1b8>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009348:	b29b      	uxth	r3, r3
 800934a:	2b00      	cmp	r3, #0
 800934c:	d014      	beq.n	8009378 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68da      	ldr	r2, [r3, #12]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009358:	b292      	uxth	r2, r2
 800935a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009360:	1c9a      	adds	r2, r3, #2
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800936a:	b29b      	uxth	r3, r3
 800936c:	3b01      	subs	r3, #1
 800936e:	b29a      	uxth	r2, r3
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009374:	2301      	movs	r3, #1
 8009376:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009378:	f7fe fe76 	bl	8008068 <HAL_GetTick>
 800937c:	4602      	mov	r2, r0
 800937e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009380:	1ad3      	subs	r3, r2, r3
 8009382:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009384:	429a      	cmp	r2, r3
 8009386:	d807      	bhi.n	8009398 <HAL_SPI_TransmitReceive+0x1d8>
 8009388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800938e:	d003      	beq.n	8009398 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009390:	2303      	movs	r3, #3
 8009392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009396:	e0a7      	b.n	80094e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800939c:	b29b      	uxth	r3, r3
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1a6      	bne.n	80092f0 <HAL_SPI_TransmitReceive+0x130>
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d1a1      	bne.n	80092f0 <HAL_SPI_TransmitReceive+0x130>
 80093ac:	e07c      	b.n	80094a8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d002      	beq.n	80093bc <HAL_SPI_TransmitReceive+0x1fc>
 80093b6:	8b7b      	ldrh	r3, [r7, #26]
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d16b      	bne.n	8009494 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	330c      	adds	r3, #12
 80093c6:	7812      	ldrb	r2, [r2, #0]
 80093c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ce:	1c5a      	adds	r2, r3, #1
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093d8:	b29b      	uxth	r3, r3
 80093da:	3b01      	subs	r3, #1
 80093dc:	b29a      	uxth	r2, r3
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80093e2:	e057      	b.n	8009494 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	f003 0302 	and.w	r3, r3, #2
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	d11c      	bne.n	800942c <HAL_SPI_TransmitReceive+0x26c>
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d017      	beq.n	800942c <HAL_SPI_TransmitReceive+0x26c>
 80093fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d114      	bne.n	800942c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	330c      	adds	r3, #12
 800940c:	7812      	ldrb	r2, [r2, #0]
 800940e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009414:	1c5a      	adds	r2, r3, #1
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800941e:	b29b      	uxth	r3, r3
 8009420:	3b01      	subs	r3, #1
 8009422:	b29a      	uxth	r2, r3
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009428:	2300      	movs	r3, #0
 800942a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	f003 0301 	and.w	r3, r3, #1
 8009436:	2b01      	cmp	r3, #1
 8009438:	d119      	bne.n	800946e <HAL_SPI_TransmitReceive+0x2ae>
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800943e:	b29b      	uxth	r3, r3
 8009440:	2b00      	cmp	r3, #0
 8009442:	d014      	beq.n	800946e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68da      	ldr	r2, [r3, #12]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800944e:	b2d2      	uxtb	r2, r2
 8009450:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009456:	1c5a      	adds	r2, r3, #1
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009460:	b29b      	uxth	r3, r3
 8009462:	3b01      	subs	r3, #1
 8009464:	b29a      	uxth	r2, r3
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800946a:	2301      	movs	r3, #1
 800946c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800946e:	f7fe fdfb 	bl	8008068 <HAL_GetTick>
 8009472:	4602      	mov	r2, r0
 8009474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009476:	1ad3      	subs	r3, r2, r3
 8009478:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800947a:	429a      	cmp	r2, r3
 800947c:	d803      	bhi.n	8009486 <HAL_SPI_TransmitReceive+0x2c6>
 800947e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009484:	d102      	bne.n	800948c <HAL_SPI_TransmitReceive+0x2cc>
 8009486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009488:	2b00      	cmp	r3, #0
 800948a:	d103      	bne.n	8009494 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800948c:	2303      	movs	r3, #3
 800948e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009492:	e029      	b.n	80094e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009498:	b29b      	uxth	r3, r3
 800949a:	2b00      	cmp	r3, #0
 800949c:	d1a2      	bne.n	80093e4 <HAL_SPI_TransmitReceive+0x224>
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d19d      	bne.n	80093e4 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80094a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80094ac:	68f8      	ldr	r0, [r7, #12]
 80094ae:	f000 f9b7 	bl	8009820 <SPI_EndRxTxTransaction>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d006      	beq.n	80094c6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80094b8:	2301      	movs	r3, #1
 80094ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2220      	movs	r2, #32
 80094c2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80094c4:	e010      	b.n	80094e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d10b      	bne.n	80094e6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80094ce:	2300      	movs	r3, #0
 80094d0:	617b      	str	r3, [r7, #20]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	617b      	str	r3, [r7, #20]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	617b      	str	r3, [r7, #20]
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	e000      	b.n	80094e8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80094e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2200      	movs	r2, #0
 80094f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80094f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3730      	adds	r7, #48	; 0x30
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b088      	sub	sp, #32
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800951c:	69bb      	ldr	r3, [r7, #24]
 800951e:	099b      	lsrs	r3, r3, #6
 8009520:	f003 0301 	and.w	r3, r3, #1
 8009524:	2b00      	cmp	r3, #0
 8009526:	d10f      	bne.n	8009548 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00a      	beq.n	8009548 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	099b      	lsrs	r3, r3, #6
 8009536:	f003 0301 	and.w	r3, r3, #1
 800953a:	2b00      	cmp	r3, #0
 800953c:	d004      	beq.n	8009548 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	4798      	blx	r3
    return;
 8009546:	e0bf      	b.n	80096c8 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	085b      	lsrs	r3, r3, #1
 800954c:	f003 0301 	and.w	r3, r3, #1
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00a      	beq.n	800956a <HAL_SPI_IRQHandler+0x66>
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	09db      	lsrs	r3, r3, #7
 8009558:	f003 0301 	and.w	r3, r3, #1
 800955c:	2b00      	cmp	r3, #0
 800955e:	d004      	beq.n	800956a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	4798      	blx	r3
    return;
 8009568:	e0ae      	b.n	80096c8 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	095b      	lsrs	r3, r3, #5
 800956e:	f003 0301 	and.w	r3, r3, #1
 8009572:	2b00      	cmp	r3, #0
 8009574:	d106      	bne.n	8009584 <HAL_SPI_IRQHandler+0x80>
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	099b      	lsrs	r3, r3, #6
 800957a:	f003 0301 	and.w	r3, r3, #1
 800957e:	2b00      	cmp	r3, #0
 8009580:	f000 80a2 	beq.w	80096c8 <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009584:	69fb      	ldr	r3, [r7, #28]
 8009586:	095b      	lsrs	r3, r3, #5
 8009588:	f003 0301 	and.w	r3, r3, #1
 800958c:	2b00      	cmp	r3, #0
 800958e:	f000 809b 	beq.w	80096c8 <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009592:	69bb      	ldr	r3, [r7, #24]
 8009594:	099b      	lsrs	r3, r3, #6
 8009596:	f003 0301 	and.w	r3, r3, #1
 800959a:	2b00      	cmp	r3, #0
 800959c:	d023      	beq.n	80095e6 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	2b03      	cmp	r3, #3
 80095a8:	d011      	beq.n	80095ce <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ae:	f043 0204 	orr.w	r2, r3, #4
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095b6:	2300      	movs	r3, #0
 80095b8:	617b      	str	r3, [r7, #20]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	617b      	str	r3, [r7, #20]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	617b      	str	r3, [r7, #20]
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	e00b      	b.n	80095e6 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095ce:	2300      	movs	r3, #0
 80095d0:	613b      	str	r3, [r7, #16]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	613b      	str	r3, [r7, #16]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	613b      	str	r3, [r7, #16]
 80095e2:	693b      	ldr	r3, [r7, #16]
        return;
 80095e4:	e070      	b.n	80096c8 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	095b      	lsrs	r3, r3, #5
 80095ea:	f003 0301 	and.w	r3, r3, #1
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d014      	beq.n	800961c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095f6:	f043 0201 	orr.w	r2, r3, #1
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80095fe:	2300      	movs	r3, #0
 8009600:	60fb      	str	r3, [r7, #12]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	60fb      	str	r3, [r7, #12]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009618:	601a      	str	r2, [r3, #0]
 800961a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009620:	2b00      	cmp	r3, #0
 8009622:	d050      	beq.n	80096c6 <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	685a      	ldr	r2, [r3, #4]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009632:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	f003 0302 	and.w	r3, r3, #2
 8009642:	2b00      	cmp	r3, #0
 8009644:	d104      	bne.n	8009650 <HAL_SPI_IRQHandler+0x14c>
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	f003 0301 	and.w	r3, r3, #1
 800964c:	2b00      	cmp	r3, #0
 800964e:	d034      	beq.n	80096ba <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	685a      	ldr	r2, [r3, #4]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f022 0203 	bic.w	r2, r2, #3
 800965e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009664:	2b00      	cmp	r3, #0
 8009666:	d011      	beq.n	800968c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800966c:	4a18      	ldr	r2, [pc, #96]	; (80096d0 <HAL_SPI_IRQHandler+0x1cc>)
 800966e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009674:	4618      	mov	r0, r3
 8009676:	f7fe fe31 	bl	80082dc <HAL_DMA_Abort_IT>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d005      	beq.n	800968c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009684:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009690:	2b00      	cmp	r3, #0
 8009692:	d016      	beq.n	80096c2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009698:	4a0d      	ldr	r2, [pc, #52]	; (80096d0 <HAL_SPI_IRQHandler+0x1cc>)
 800969a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7fe fe1b 	bl	80082dc <HAL_DMA_Abort_IT>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d00a      	beq.n	80096c2 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80096b8:	e003      	b.n	80096c2 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 f80a 	bl	80096d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80096c0:	e000      	b.n	80096c4 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80096c2:	bf00      	nop
    return;
 80096c4:	bf00      	nop
 80096c6:	bf00      	nop
  }
}
 80096c8:	3720      	adds	r7, #32
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	080096e7 	.word	0x080096e7

080096d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80096dc:	bf00      	nop
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bc80      	pop	{r7}
 80096e4:	4770      	bx	lr

080096e6 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b084      	sub	sp, #16
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2200      	movs	r2, #0
 80096f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2200      	movs	r2, #0
 80096fe:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f7ff ffe7 	bl	80096d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009706:	bf00      	nop
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
	...

08009710 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b088      	sub	sp, #32
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	603b      	str	r3, [r7, #0]
 800971c:	4613      	mov	r3, r2
 800971e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009720:	f7fe fca2 	bl	8008068 <HAL_GetTick>
 8009724:	4602      	mov	r2, r0
 8009726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009728:	1a9b      	subs	r3, r3, r2
 800972a:	683a      	ldr	r2, [r7, #0]
 800972c:	4413      	add	r3, r2
 800972e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009730:	f7fe fc9a 	bl	8008068 <HAL_GetTick>
 8009734:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009736:	4b39      	ldr	r3, [pc, #228]	; (800981c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	015b      	lsls	r3, r3, #5
 800973c:	0d1b      	lsrs	r3, r3, #20
 800973e:	69fa      	ldr	r2, [r7, #28]
 8009740:	fb02 f303 	mul.w	r3, r2, r3
 8009744:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009746:	e054      	b.n	80097f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800974e:	d050      	beq.n	80097f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009750:	f7fe fc8a 	bl	8008068 <HAL_GetTick>
 8009754:	4602      	mov	r2, r0
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	1ad3      	subs	r3, r2, r3
 800975a:	69fa      	ldr	r2, [r7, #28]
 800975c:	429a      	cmp	r2, r3
 800975e:	d902      	bls.n	8009766 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d13d      	bne.n	80097e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	685a      	ldr	r2, [r3, #4]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009774:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800977e:	d111      	bne.n	80097a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009788:	d004      	beq.n	8009794 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009792:	d107      	bne.n	80097a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097ac:	d10f      	bne.n	80097ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80097bc:	601a      	str	r2, [r3, #0]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80097cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2201      	movs	r2, #1
 80097d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2200      	movs	r2, #0
 80097da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80097de:	2303      	movs	r3, #3
 80097e0:	e017      	b.n	8009812 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d101      	bne.n	80097ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80097e8:	2300      	movs	r3, #0
 80097ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	3b01      	subs	r3, #1
 80097f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	689a      	ldr	r2, [r3, #8]
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	4013      	ands	r3, r2
 80097fc:	68ba      	ldr	r2, [r7, #8]
 80097fe:	429a      	cmp	r2, r3
 8009800:	bf0c      	ite	eq
 8009802:	2301      	moveq	r3, #1
 8009804:	2300      	movne	r3, #0
 8009806:	b2db      	uxtb	r3, r3
 8009808:	461a      	mov	r2, r3
 800980a:	79fb      	ldrb	r3, [r7, #7]
 800980c:	429a      	cmp	r2, r3
 800980e:	d19b      	bne.n	8009748 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3720      	adds	r7, #32
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	200003b4 	.word	0x200003b4

08009820 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b086      	sub	sp, #24
 8009824:	af02      	add	r7, sp, #8
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	9300      	str	r3, [sp, #0]
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	2200      	movs	r2, #0
 8009834:	2180      	movs	r1, #128	; 0x80
 8009836:	68f8      	ldr	r0, [r7, #12]
 8009838:	f7ff ff6a 	bl	8009710 <SPI_WaitFlagStateUntilTimeout>
 800983c:	4603      	mov	r3, r0
 800983e:	2b00      	cmp	r3, #0
 8009840:	d007      	beq.n	8009852 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009846:	f043 0220 	orr.w	r2, r3, #32
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800984e:	2303      	movs	r3, #3
 8009850:	e000      	b.n	8009854 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8009852:	2300      	movs	r3, #0
}
 8009854:	4618      	mov	r0, r3
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b082      	sub	sp, #8
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d101      	bne.n	800986e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800986a:	2301      	movs	r3, #1
 800986c:	e03f      	b.n	80098ee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009874:	b2db      	uxtb	r3, r3
 8009876:	2b00      	cmp	r3, #0
 8009878:	d106      	bne.n	8009888 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f7fe fb0c 	bl	8007ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2224      	movs	r2, #36	; 0x24
 800988c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	68da      	ldr	r2, [r3, #12]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800989e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 fb83 	bl	8009fac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	691a      	ldr	r2, [r3, #16]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80098b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	695a      	ldr	r2, [r3, #20]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80098c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	68da      	ldr	r2, [r3, #12]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80098d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2220      	movs	r2, #32
 80098e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2220      	movs	r2, #32
 80098e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3708      	adds	r7, #8
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b08a      	sub	sp, #40	; 0x28
 80098fa:	af02      	add	r7, sp, #8
 80098fc:	60f8      	str	r0, [r7, #12]
 80098fe:	60b9      	str	r1, [r7, #8]
 8009900:	603b      	str	r3, [r7, #0]
 8009902:	4613      	mov	r3, r2
 8009904:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009906:	2300      	movs	r3, #0
 8009908:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009910:	b2db      	uxtb	r3, r3
 8009912:	2b20      	cmp	r3, #32
 8009914:	d17c      	bne.n	8009a10 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d002      	beq.n	8009922 <HAL_UART_Transmit+0x2c>
 800991c:	88fb      	ldrh	r3, [r7, #6]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d101      	bne.n	8009926 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	e075      	b.n	8009a12 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800992c:	2b01      	cmp	r3, #1
 800992e:	d101      	bne.n	8009934 <HAL_UART_Transmit+0x3e>
 8009930:	2302      	movs	r3, #2
 8009932:	e06e      	b.n	8009a12 <HAL_UART_Transmit+0x11c>
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2201      	movs	r2, #1
 8009938:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2200      	movs	r2, #0
 8009940:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2221      	movs	r2, #33	; 0x21
 8009946:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800994a:	f7fe fb8d 	bl	8008068 <HAL_GetTick>
 800994e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	88fa      	ldrh	r2, [r7, #6]
 8009954:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	88fa      	ldrh	r2, [r7, #6]
 800995a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009964:	d108      	bne.n	8009978 <HAL_UART_Transmit+0x82>
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	691b      	ldr	r3, [r3, #16]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d104      	bne.n	8009978 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800996e:	2300      	movs	r3, #0
 8009970:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	61bb      	str	r3, [r7, #24]
 8009976:	e003      	b.n	8009980 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800997c:	2300      	movs	r3, #0
 800997e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2200      	movs	r2, #0
 8009984:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8009988:	e02a      	b.n	80099e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	9300      	str	r3, [sp, #0]
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	2200      	movs	r2, #0
 8009992:	2180      	movs	r1, #128	; 0x80
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f000 f9a7 	bl	8009ce8 <UART_WaitOnFlagUntilTimeout>
 800999a:	4603      	mov	r3, r0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d001      	beq.n	80099a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80099a0:	2303      	movs	r3, #3
 80099a2:	e036      	b.n	8009a12 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80099a4:	69fb      	ldr	r3, [r7, #28]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d10b      	bne.n	80099c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	881b      	ldrh	r3, [r3, #0]
 80099ae:	461a      	mov	r2, r3
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	3302      	adds	r3, #2
 80099be:	61bb      	str	r3, [r7, #24]
 80099c0:	e007      	b.n	80099d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80099c2:	69fb      	ldr	r3, [r7, #28]
 80099c4:	781a      	ldrb	r2, [r3, #0]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	3301      	adds	r3, #1
 80099d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	3b01      	subs	r3, #1
 80099da:	b29a      	uxth	r2, r3
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d1cf      	bne.n	800998a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	9300      	str	r3, [sp, #0]
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	2200      	movs	r2, #0
 80099f2:	2140      	movs	r1, #64	; 0x40
 80099f4:	68f8      	ldr	r0, [r7, #12]
 80099f6:	f000 f977 	bl	8009ce8 <UART_WaitOnFlagUntilTimeout>
 80099fa:	4603      	mov	r3, r0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d001      	beq.n	8009a04 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009a00:	2303      	movs	r3, #3
 8009a02:	e006      	b.n	8009a12 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2220      	movs	r2, #32
 8009a08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	e000      	b.n	8009a12 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009a10:	2302      	movs	r3, #2
  }
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3720      	adds	r7, #32
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a1a:	b480      	push	{r7}
 8009a1c:	b085      	sub	sp, #20
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	60f8      	str	r0, [r7, #12]
 8009a22:	60b9      	str	r1, [r7, #8]
 8009a24:	4613      	mov	r3, r2
 8009a26:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	2b20      	cmp	r3, #32
 8009a32:	d140      	bne.n	8009ab6 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d002      	beq.n	8009a40 <HAL_UART_Receive_IT+0x26>
 8009a3a:	88fb      	ldrh	r3, [r7, #6]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d101      	bne.n	8009a44 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009a40:	2301      	movs	r3, #1
 8009a42:	e039      	b.n	8009ab8 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	d101      	bne.n	8009a52 <HAL_UART_Receive_IT+0x38>
 8009a4e:	2302      	movs	r3, #2
 8009a50:	e032      	b.n	8009ab8 <HAL_UART_Receive_IT+0x9e>
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2201      	movs	r2, #1
 8009a56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	68ba      	ldr	r2, [r7, #8]
 8009a5e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	88fa      	ldrh	r2, [r7, #6]
 8009a64:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	88fa      	ldrh	r2, [r7, #6]
 8009a6a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2222      	movs	r2, #34	; 0x22
 8009a76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	68da      	ldr	r2, [r3, #12]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a90:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	695a      	ldr	r2, [r3, #20]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f042 0201 	orr.w	r2, r2, #1
 8009aa0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	68da      	ldr	r2, [r3, #12]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f042 0220 	orr.w	r2, r2, #32
 8009ab0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	e000      	b.n	8009ab8 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8009ab6:	2302      	movs	r3, #2
  }
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3714      	adds	r7, #20
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bc80      	pop	{r7}
 8009ac0:	4770      	bx	lr
	...

08009ac4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b088      	sub	sp, #32
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	695b      	ldr	r3, [r3, #20]
 8009ae2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	f003 030f 	and.w	r3, r3, #15
 8009af2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d10d      	bne.n	8009b16 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	f003 0320 	and.w	r3, r3, #32
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d008      	beq.n	8009b16 <HAL_UART_IRQHandler+0x52>
 8009b04:	69bb      	ldr	r3, [r7, #24]
 8009b06:	f003 0320 	and.w	r3, r3, #32
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d003      	beq.n	8009b16 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 f9cc 	bl	8009eac <UART_Receive_IT>
      return;
 8009b14:	e0d1      	b.n	8009cba <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	f000 80b0 	beq.w	8009c7e <HAL_UART_IRQHandler+0x1ba>
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	f003 0301 	and.w	r3, r3, #1
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d105      	bne.n	8009b34 <HAL_UART_IRQHandler+0x70>
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	f000 80a5 	beq.w	8009c7e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	f003 0301 	and.w	r3, r3, #1
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d00a      	beq.n	8009b54 <HAL_UART_IRQHandler+0x90>
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d005      	beq.n	8009b54 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b4c:	f043 0201 	orr.w	r2, r3, #1
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	f003 0304 	and.w	r3, r3, #4
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00a      	beq.n	8009b74 <HAL_UART_IRQHandler+0xb0>
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	f003 0301 	and.w	r3, r3, #1
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d005      	beq.n	8009b74 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b6c:	f043 0202 	orr.w	r2, r3, #2
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	f003 0302 	and.w	r3, r3, #2
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d00a      	beq.n	8009b94 <HAL_UART_IRQHandler+0xd0>
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	f003 0301 	and.w	r3, r3, #1
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d005      	beq.n	8009b94 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b8c:	f043 0204 	orr.w	r2, r3, #4
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	f003 0308 	and.w	r3, r3, #8
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00f      	beq.n	8009bbe <HAL_UART_IRQHandler+0xfa>
 8009b9e:	69bb      	ldr	r3, [r7, #24]
 8009ba0:	f003 0320 	and.w	r3, r3, #32
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d104      	bne.n	8009bb2 <HAL_UART_IRQHandler+0xee>
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	f003 0301 	and.w	r3, r3, #1
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d005      	beq.n	8009bbe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bb6:	f043 0208 	orr.w	r2, r3, #8
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d078      	beq.n	8009cb8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	f003 0320 	and.w	r3, r3, #32
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d007      	beq.n	8009be0 <HAL_UART_IRQHandler+0x11c>
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	f003 0320 	and.w	r3, r3, #32
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d002      	beq.n	8009be0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 f966 	bl	8009eac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	695b      	ldr	r3, [r3, #20]
 8009be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	bf14      	ite	ne
 8009bee:	2301      	movne	r3, #1
 8009bf0:	2300      	moveq	r3, #0
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bfa:	f003 0308 	and.w	r3, r3, #8
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d102      	bne.n	8009c08 <HAL_UART_IRQHandler+0x144>
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d031      	beq.n	8009c6c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 f8b7 	bl	8009d7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	695b      	ldr	r3, [r3, #20]
 8009c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d023      	beq.n	8009c64 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	695a      	ldr	r2, [r3, #20]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c2a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d013      	beq.n	8009c5c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c38:	4a21      	ldr	r2, [pc, #132]	; (8009cc0 <HAL_UART_IRQHandler+0x1fc>)
 8009c3a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7fe fb4b 	bl	80082dc <HAL_DMA_Abort_IT>
 8009c46:	4603      	mov	r3, r0
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d016      	beq.n	8009c7a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009c56:	4610      	mov	r0, r2
 8009c58:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c5a:	e00e      	b.n	8009c7a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 f83a 	bl	8009cd6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c62:	e00a      	b.n	8009c7a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 f836 	bl	8009cd6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c6a:	e006      	b.n	8009c7a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 f832 	bl	8009cd6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8009c78:	e01e      	b.n	8009cb8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c7a:	bf00      	nop
    return;
 8009c7c:	e01c      	b.n	8009cb8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d008      	beq.n	8009c9a <HAL_UART_IRQHandler+0x1d6>
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d003      	beq.n	8009c9a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 f8a3 	bl	8009dde <UART_Transmit_IT>
    return;
 8009c98:	e00f      	b.n	8009cba <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d00a      	beq.n	8009cba <HAL_UART_IRQHandler+0x1f6>
 8009ca4:	69bb      	ldr	r3, [r7, #24]
 8009ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d005      	beq.n	8009cba <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 f8e4 	bl	8009e7c <UART_EndTransmit_IT>
    return;
 8009cb4:	bf00      	nop
 8009cb6:	e000      	b.n	8009cba <HAL_UART_IRQHandler+0x1f6>
    return;
 8009cb8:	bf00      	nop
  }
}
 8009cba:	3720      	adds	r7, #32
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	08009db7 	.word	0x08009db7

08009cc4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009ccc:	bf00      	nop
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bc80      	pop	{r7}
 8009cd4:	4770      	bx	lr

08009cd6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009cd6:	b480      	push	{r7}
 8009cd8:	b083      	sub	sp, #12
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009cde:	bf00      	nop
 8009ce0:	370c      	adds	r7, #12
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bc80      	pop	{r7}
 8009ce6:	4770      	bx	lr

08009ce8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	60b9      	str	r1, [r7, #8]
 8009cf2:	603b      	str	r3, [r7, #0]
 8009cf4:	4613      	mov	r3, r2
 8009cf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cf8:	e02c      	b.n	8009d54 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cfa:	69bb      	ldr	r3, [r7, #24]
 8009cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d00:	d028      	beq.n	8009d54 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d007      	beq.n	8009d18 <UART_WaitOnFlagUntilTimeout+0x30>
 8009d08:	f7fe f9ae 	bl	8008068 <HAL_GetTick>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	1ad3      	subs	r3, r2, r3
 8009d12:	69ba      	ldr	r2, [r7, #24]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d21d      	bcs.n	8009d54 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	68da      	ldr	r2, [r3, #12]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009d26:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	695a      	ldr	r2, [r3, #20]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f022 0201 	bic.w	r2, r2, #1
 8009d36:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2220      	movs	r2, #32
 8009d3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2220      	movs	r2, #32
 8009d44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8009d50:	2303      	movs	r3, #3
 8009d52:	e00f      	b.n	8009d74 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	4013      	ands	r3, r2
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	bf0c      	ite	eq
 8009d64:	2301      	moveq	r3, #1
 8009d66:	2300      	movne	r3, #0
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	79fb      	ldrb	r3, [r7, #7]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d0c3      	beq.n	8009cfa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3710      	adds	r7, #16
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	68da      	ldr	r2, [r3, #12]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009d92:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	695a      	ldr	r2, [r3, #20]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f022 0201 	bic.w	r2, r2, #1
 8009da2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2220      	movs	r2, #32
 8009da8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009dac:	bf00      	nop
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bc80      	pop	{r7}
 8009db4:	4770      	bx	lr

08009db6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b084      	sub	sp, #16
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	f7ff ff80 	bl	8009cd6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009dd6:	bf00      	nop
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009dde:	b480      	push	{r7}
 8009de0:	b085      	sub	sp, #20
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	2b21      	cmp	r3, #33	; 0x21
 8009df0:	d13e      	bne.n	8009e70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dfa:	d114      	bne.n	8009e26 <UART_Transmit_IT+0x48>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	691b      	ldr	r3, [r3, #16]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d110      	bne.n	8009e26 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6a1b      	ldr	r3, [r3, #32]
 8009e08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	881b      	ldrh	r3, [r3, #0]
 8009e0e:	461a      	mov	r2, r3
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6a1b      	ldr	r3, [r3, #32]
 8009e1e:	1c9a      	adds	r2, r3, #2
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	621a      	str	r2, [r3, #32]
 8009e24:	e008      	b.n	8009e38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6a1b      	ldr	r3, [r3, #32]
 8009e2a:	1c59      	adds	r1, r3, #1
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	6211      	str	r1, [r2, #32]
 8009e30:	781a      	ldrb	r2, [r3, #0]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	4619      	mov	r1, r3
 8009e46:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d10f      	bne.n	8009e6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	68da      	ldr	r2, [r3, #12]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	68da      	ldr	r2, [r3, #12]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	e000      	b.n	8009e72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009e70:	2302      	movs	r3, #2
  }
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3714      	adds	r7, #20
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bc80      	pop	{r7}
 8009e7a:	4770      	bx	lr

08009e7c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	68da      	ldr	r2, [r3, #12]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e92:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2220      	movs	r2, #32
 8009e98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f7ff ff11 	bl	8009cc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3708      	adds	r7, #8
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	2b22      	cmp	r3, #34	; 0x22
 8009ebe:	d170      	bne.n	8009fa2 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ec8:	d117      	bne.n	8009efa <UART_Receive_IT+0x4e>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	691b      	ldr	r3, [r3, #16]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d113      	bne.n	8009efa <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eda:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ee8:	b29a      	uxth	r2, r3
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef2:	1c9a      	adds	r2, r3, #2
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	629a      	str	r2, [r3, #40]	; 0x28
 8009ef8:	e026      	b.n	8009f48 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009efe:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8009f00:	2300      	movs	r3, #0
 8009f02:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f0c:	d007      	beq.n	8009f1e <UART_Receive_IT+0x72>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d10a      	bne.n	8009f2c <UART_Receive_IT+0x80>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	691b      	ldr	r3, [r3, #16]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d106      	bne.n	8009f2c <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	b2da      	uxtb	r2, r3
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	701a      	strb	r2, [r3, #0]
 8009f2a:	e008      	b.n	8009f3e <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f38:	b2da      	uxtb	r2, r3
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f42:	1c5a      	adds	r2, r3, #1
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	3b01      	subs	r3, #1
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	4619      	mov	r1, r3
 8009f56:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d120      	bne.n	8009f9e <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68da      	ldr	r2, [r3, #12]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f022 0220 	bic.w	r2, r2, #32
 8009f6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	68da      	ldr	r2, [r3, #12]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	695a      	ldr	r2, [r3, #20]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f022 0201 	bic.w	r2, r2, #1
 8009f8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2220      	movs	r2, #32
 8009f90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f7fc fe0d 	bl	8006bb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	e002      	b.n	8009fa4 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	e000      	b.n	8009fa4 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8009fa2:	2302      	movs	r3, #2
  }
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	691b      	ldr	r3, [r3, #16]
 8009fba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	68da      	ldr	r2, [r3, #12]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	430a      	orrs	r2, r1
 8009fc8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	689a      	ldr	r2, [r3, #8]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	431a      	orrs	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	695b      	ldr	r3, [r3, #20]
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009fe6:	f023 030c 	bic.w	r3, r3, #12
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	6812      	ldr	r2, [r2, #0]
 8009fee:	68b9      	ldr	r1, [r7, #8]
 8009ff0:	430b      	orrs	r3, r1
 8009ff2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	695b      	ldr	r3, [r3, #20]
 8009ffa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	699a      	ldr	r2, [r3, #24]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	430a      	orrs	r2, r1
 800a008:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a2c      	ldr	r2, [pc, #176]	; (800a0c0 <UART_SetConfig+0x114>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d103      	bne.n	800a01c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a014:	f7ff f81e 	bl	8009054 <HAL_RCC_GetPCLK2Freq>
 800a018:	60f8      	str	r0, [r7, #12]
 800a01a:	e002      	b.n	800a022 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a01c:	f7ff f806 	bl	800902c <HAL_RCC_GetPCLK1Freq>
 800a020:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a022:	68fa      	ldr	r2, [r7, #12]
 800a024:	4613      	mov	r3, r2
 800a026:	009b      	lsls	r3, r3, #2
 800a028:	4413      	add	r3, r2
 800a02a:	009a      	lsls	r2, r3, #2
 800a02c:	441a      	add	r2, r3
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	fbb2 f3f3 	udiv	r3, r2, r3
 800a038:	4a22      	ldr	r2, [pc, #136]	; (800a0c4 <UART_SetConfig+0x118>)
 800a03a:	fba2 2303 	umull	r2, r3, r2, r3
 800a03e:	095b      	lsrs	r3, r3, #5
 800a040:	0119      	lsls	r1, r3, #4
 800a042:	68fa      	ldr	r2, [r7, #12]
 800a044:	4613      	mov	r3, r2
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	4413      	add	r3, r2
 800a04a:	009a      	lsls	r2, r3, #2
 800a04c:	441a      	add	r2, r3
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	fbb2 f2f3 	udiv	r2, r2, r3
 800a058:	4b1a      	ldr	r3, [pc, #104]	; (800a0c4 <UART_SetConfig+0x118>)
 800a05a:	fba3 0302 	umull	r0, r3, r3, r2
 800a05e:	095b      	lsrs	r3, r3, #5
 800a060:	2064      	movs	r0, #100	; 0x64
 800a062:	fb00 f303 	mul.w	r3, r0, r3
 800a066:	1ad3      	subs	r3, r2, r3
 800a068:	011b      	lsls	r3, r3, #4
 800a06a:	3332      	adds	r3, #50	; 0x32
 800a06c:	4a15      	ldr	r2, [pc, #84]	; (800a0c4 <UART_SetConfig+0x118>)
 800a06e:	fba2 2303 	umull	r2, r3, r2, r3
 800a072:	095b      	lsrs	r3, r3, #5
 800a074:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a078:	4419      	add	r1, r3
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	4613      	mov	r3, r2
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	4413      	add	r3, r2
 800a082:	009a      	lsls	r2, r3, #2
 800a084:	441a      	add	r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a090:	4b0c      	ldr	r3, [pc, #48]	; (800a0c4 <UART_SetConfig+0x118>)
 800a092:	fba3 0302 	umull	r0, r3, r3, r2
 800a096:	095b      	lsrs	r3, r3, #5
 800a098:	2064      	movs	r0, #100	; 0x64
 800a09a:	fb00 f303 	mul.w	r3, r0, r3
 800a09e:	1ad3      	subs	r3, r2, r3
 800a0a0:	011b      	lsls	r3, r3, #4
 800a0a2:	3332      	adds	r3, #50	; 0x32
 800a0a4:	4a07      	ldr	r2, [pc, #28]	; (800a0c4 <UART_SetConfig+0x118>)
 800a0a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a0aa:	095b      	lsrs	r3, r3, #5
 800a0ac:	f003 020f 	and.w	r2, r3, #15
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	440a      	add	r2, r1
 800a0b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a0b8:	bf00      	nop
 800a0ba:	3710      	adds	r7, #16
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	40013800 	.word	0x40013800
 800a0c4:	51eb851f 	.word	0x51eb851f

0800a0c8 <atoi>:
 800a0c8:	220a      	movs	r2, #10
 800a0ca:	2100      	movs	r1, #0
 800a0cc:	f000 b966 	b.w	800a39c <strtol>

0800a0d0 <__errno>:
 800a0d0:	4b01      	ldr	r3, [pc, #4]	; (800a0d8 <__errno+0x8>)
 800a0d2:	6818      	ldr	r0, [r3, #0]
 800a0d4:	4770      	bx	lr
 800a0d6:	bf00      	nop
 800a0d8:	200003c0 	.word	0x200003c0

0800a0dc <__libc_init_array>:
 800a0dc:	b570      	push	{r4, r5, r6, lr}
 800a0de:	2500      	movs	r5, #0
 800a0e0:	4e0c      	ldr	r6, [pc, #48]	; (800a114 <__libc_init_array+0x38>)
 800a0e2:	4c0d      	ldr	r4, [pc, #52]	; (800a118 <__libc_init_array+0x3c>)
 800a0e4:	1ba4      	subs	r4, r4, r6
 800a0e6:	10a4      	asrs	r4, r4, #2
 800a0e8:	42a5      	cmp	r5, r4
 800a0ea:	d109      	bne.n	800a100 <__libc_init_array+0x24>
 800a0ec:	f001 fa3e 	bl	800b56c <_init>
 800a0f0:	2500      	movs	r5, #0
 800a0f2:	4e0a      	ldr	r6, [pc, #40]	; (800a11c <__libc_init_array+0x40>)
 800a0f4:	4c0a      	ldr	r4, [pc, #40]	; (800a120 <__libc_init_array+0x44>)
 800a0f6:	1ba4      	subs	r4, r4, r6
 800a0f8:	10a4      	asrs	r4, r4, #2
 800a0fa:	42a5      	cmp	r5, r4
 800a0fc:	d105      	bne.n	800a10a <__libc_init_array+0x2e>
 800a0fe:	bd70      	pop	{r4, r5, r6, pc}
 800a100:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a104:	4798      	blx	r3
 800a106:	3501      	adds	r5, #1
 800a108:	e7ee      	b.n	800a0e8 <__libc_init_array+0xc>
 800a10a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a10e:	4798      	blx	r3
 800a110:	3501      	adds	r5, #1
 800a112:	e7f2      	b.n	800a0fa <__libc_init_array+0x1e>
 800a114:	0800d458 	.word	0x0800d458
 800a118:	0800d458 	.word	0x0800d458
 800a11c:	0800d458 	.word	0x0800d458
 800a120:	0800d45c 	.word	0x0800d45c

0800a124 <memset>:
 800a124:	4603      	mov	r3, r0
 800a126:	4402      	add	r2, r0
 800a128:	4293      	cmp	r3, r2
 800a12a:	d100      	bne.n	800a12e <memset+0xa>
 800a12c:	4770      	bx	lr
 800a12e:	f803 1b01 	strb.w	r1, [r3], #1
 800a132:	e7f9      	b.n	800a128 <memset+0x4>

0800a134 <iprintf>:
 800a134:	b40f      	push	{r0, r1, r2, r3}
 800a136:	4b0a      	ldr	r3, [pc, #40]	; (800a160 <iprintf+0x2c>)
 800a138:	b513      	push	{r0, r1, r4, lr}
 800a13a:	681c      	ldr	r4, [r3, #0]
 800a13c:	b124      	cbz	r4, 800a148 <iprintf+0x14>
 800a13e:	69a3      	ldr	r3, [r4, #24]
 800a140:	b913      	cbnz	r3, 800a148 <iprintf+0x14>
 800a142:	4620      	mov	r0, r4
 800a144:	f000 faf0 	bl	800a728 <__sinit>
 800a148:	ab05      	add	r3, sp, #20
 800a14a:	9a04      	ldr	r2, [sp, #16]
 800a14c:	68a1      	ldr	r1, [r4, #8]
 800a14e:	4620      	mov	r0, r4
 800a150:	9301      	str	r3, [sp, #4]
 800a152:	f000 fe0d 	bl	800ad70 <_vfiprintf_r>
 800a156:	b002      	add	sp, #8
 800a158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a15c:	b004      	add	sp, #16
 800a15e:	4770      	bx	lr
 800a160:	200003c0 	.word	0x200003c0

0800a164 <putchar>:
 800a164:	b538      	push	{r3, r4, r5, lr}
 800a166:	4b08      	ldr	r3, [pc, #32]	; (800a188 <putchar+0x24>)
 800a168:	4605      	mov	r5, r0
 800a16a:	681c      	ldr	r4, [r3, #0]
 800a16c:	b124      	cbz	r4, 800a178 <putchar+0x14>
 800a16e:	69a3      	ldr	r3, [r4, #24]
 800a170:	b913      	cbnz	r3, 800a178 <putchar+0x14>
 800a172:	4620      	mov	r0, r4
 800a174:	f000 fad8 	bl	800a728 <__sinit>
 800a178:	68a2      	ldr	r2, [r4, #8]
 800a17a:	4629      	mov	r1, r5
 800a17c:	4620      	mov	r0, r4
 800a17e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a182:	f001 b893 	b.w	800b2ac <_putc_r>
 800a186:	bf00      	nop
 800a188:	200003c0 	.word	0x200003c0

0800a18c <_puts_r>:
 800a18c:	b570      	push	{r4, r5, r6, lr}
 800a18e:	460e      	mov	r6, r1
 800a190:	4605      	mov	r5, r0
 800a192:	b118      	cbz	r0, 800a19c <_puts_r+0x10>
 800a194:	6983      	ldr	r3, [r0, #24]
 800a196:	b90b      	cbnz	r3, 800a19c <_puts_r+0x10>
 800a198:	f000 fac6 	bl	800a728 <__sinit>
 800a19c:	69ab      	ldr	r3, [r5, #24]
 800a19e:	68ac      	ldr	r4, [r5, #8]
 800a1a0:	b913      	cbnz	r3, 800a1a8 <_puts_r+0x1c>
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	f000 fac0 	bl	800a728 <__sinit>
 800a1a8:	4b23      	ldr	r3, [pc, #140]	; (800a238 <_puts_r+0xac>)
 800a1aa:	429c      	cmp	r4, r3
 800a1ac:	d117      	bne.n	800a1de <_puts_r+0x52>
 800a1ae:	686c      	ldr	r4, [r5, #4]
 800a1b0:	89a3      	ldrh	r3, [r4, #12]
 800a1b2:	071b      	lsls	r3, r3, #28
 800a1b4:	d51d      	bpl.n	800a1f2 <_puts_r+0x66>
 800a1b6:	6923      	ldr	r3, [r4, #16]
 800a1b8:	b1db      	cbz	r3, 800a1f2 <_puts_r+0x66>
 800a1ba:	3e01      	subs	r6, #1
 800a1bc:	68a3      	ldr	r3, [r4, #8]
 800a1be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a1c2:	3b01      	subs	r3, #1
 800a1c4:	60a3      	str	r3, [r4, #8]
 800a1c6:	b9e9      	cbnz	r1, 800a204 <_puts_r+0x78>
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	da2e      	bge.n	800a22a <_puts_r+0x9e>
 800a1cc:	4622      	mov	r2, r4
 800a1ce:	210a      	movs	r1, #10
 800a1d0:	4628      	mov	r0, r5
 800a1d2:	f000 f8f9 	bl	800a3c8 <__swbuf_r>
 800a1d6:	3001      	adds	r0, #1
 800a1d8:	d011      	beq.n	800a1fe <_puts_r+0x72>
 800a1da:	200a      	movs	r0, #10
 800a1dc:	e011      	b.n	800a202 <_puts_r+0x76>
 800a1de:	4b17      	ldr	r3, [pc, #92]	; (800a23c <_puts_r+0xb0>)
 800a1e0:	429c      	cmp	r4, r3
 800a1e2:	d101      	bne.n	800a1e8 <_puts_r+0x5c>
 800a1e4:	68ac      	ldr	r4, [r5, #8]
 800a1e6:	e7e3      	b.n	800a1b0 <_puts_r+0x24>
 800a1e8:	4b15      	ldr	r3, [pc, #84]	; (800a240 <_puts_r+0xb4>)
 800a1ea:	429c      	cmp	r4, r3
 800a1ec:	bf08      	it	eq
 800a1ee:	68ec      	ldreq	r4, [r5, #12]
 800a1f0:	e7de      	b.n	800a1b0 <_puts_r+0x24>
 800a1f2:	4621      	mov	r1, r4
 800a1f4:	4628      	mov	r0, r5
 800a1f6:	f000 f939 	bl	800a46c <__swsetup_r>
 800a1fa:	2800      	cmp	r0, #0
 800a1fc:	d0dd      	beq.n	800a1ba <_puts_r+0x2e>
 800a1fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a202:	bd70      	pop	{r4, r5, r6, pc}
 800a204:	2b00      	cmp	r3, #0
 800a206:	da04      	bge.n	800a212 <_puts_r+0x86>
 800a208:	69a2      	ldr	r2, [r4, #24]
 800a20a:	429a      	cmp	r2, r3
 800a20c:	dc06      	bgt.n	800a21c <_puts_r+0x90>
 800a20e:	290a      	cmp	r1, #10
 800a210:	d004      	beq.n	800a21c <_puts_r+0x90>
 800a212:	6823      	ldr	r3, [r4, #0]
 800a214:	1c5a      	adds	r2, r3, #1
 800a216:	6022      	str	r2, [r4, #0]
 800a218:	7019      	strb	r1, [r3, #0]
 800a21a:	e7cf      	b.n	800a1bc <_puts_r+0x30>
 800a21c:	4622      	mov	r2, r4
 800a21e:	4628      	mov	r0, r5
 800a220:	f000 f8d2 	bl	800a3c8 <__swbuf_r>
 800a224:	3001      	adds	r0, #1
 800a226:	d1c9      	bne.n	800a1bc <_puts_r+0x30>
 800a228:	e7e9      	b.n	800a1fe <_puts_r+0x72>
 800a22a:	200a      	movs	r0, #10
 800a22c:	6823      	ldr	r3, [r4, #0]
 800a22e:	1c5a      	adds	r2, r3, #1
 800a230:	6022      	str	r2, [r4, #0]
 800a232:	7018      	strb	r0, [r3, #0]
 800a234:	e7e5      	b.n	800a202 <_puts_r+0x76>
 800a236:	bf00      	nop
 800a238:	0800d2d8 	.word	0x0800d2d8
 800a23c:	0800d2f8 	.word	0x0800d2f8
 800a240:	0800d2b8 	.word	0x0800d2b8

0800a244 <puts>:
 800a244:	4b02      	ldr	r3, [pc, #8]	; (800a250 <puts+0xc>)
 800a246:	4601      	mov	r1, r0
 800a248:	6818      	ldr	r0, [r3, #0]
 800a24a:	f7ff bf9f 	b.w	800a18c <_puts_r>
 800a24e:	bf00      	nop
 800a250:	200003c0 	.word	0x200003c0

0800a254 <siprintf>:
 800a254:	b40e      	push	{r1, r2, r3}
 800a256:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a25a:	b500      	push	{lr}
 800a25c:	b09c      	sub	sp, #112	; 0x70
 800a25e:	ab1d      	add	r3, sp, #116	; 0x74
 800a260:	9002      	str	r0, [sp, #8]
 800a262:	9006      	str	r0, [sp, #24]
 800a264:	9107      	str	r1, [sp, #28]
 800a266:	9104      	str	r1, [sp, #16]
 800a268:	4808      	ldr	r0, [pc, #32]	; (800a28c <siprintf+0x38>)
 800a26a:	4909      	ldr	r1, [pc, #36]	; (800a290 <siprintf+0x3c>)
 800a26c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a270:	9105      	str	r1, [sp, #20]
 800a272:	6800      	ldr	r0, [r0, #0]
 800a274:	a902      	add	r1, sp, #8
 800a276:	9301      	str	r3, [sp, #4]
 800a278:	f000 fc5a 	bl	800ab30 <_svfiprintf_r>
 800a27c:	2200      	movs	r2, #0
 800a27e:	9b02      	ldr	r3, [sp, #8]
 800a280:	701a      	strb	r2, [r3, #0]
 800a282:	b01c      	add	sp, #112	; 0x70
 800a284:	f85d eb04 	ldr.w	lr, [sp], #4
 800a288:	b003      	add	sp, #12
 800a28a:	4770      	bx	lr
 800a28c:	200003c0 	.word	0x200003c0
 800a290:	ffff0208 	.word	0xffff0208

0800a294 <strcpy>:
 800a294:	4603      	mov	r3, r0
 800a296:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a29a:	f803 2b01 	strb.w	r2, [r3], #1
 800a29e:	2a00      	cmp	r2, #0
 800a2a0:	d1f9      	bne.n	800a296 <strcpy+0x2>
 800a2a2:	4770      	bx	lr

0800a2a4 <_strtol_l.isra.0>:
 800a2a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2a8:	4680      	mov	r8, r0
 800a2aa:	4689      	mov	r9, r1
 800a2ac:	4692      	mov	sl, r2
 800a2ae:	461e      	mov	r6, r3
 800a2b0:	460f      	mov	r7, r1
 800a2b2:	463d      	mov	r5, r7
 800a2b4:	9808      	ldr	r0, [sp, #32]
 800a2b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a2ba:	f000 fabf 	bl	800a83c <__locale_ctype_ptr_l>
 800a2be:	4420      	add	r0, r4
 800a2c0:	7843      	ldrb	r3, [r0, #1]
 800a2c2:	f013 0308 	ands.w	r3, r3, #8
 800a2c6:	d132      	bne.n	800a32e <_strtol_l.isra.0+0x8a>
 800a2c8:	2c2d      	cmp	r4, #45	; 0x2d
 800a2ca:	d132      	bne.n	800a332 <_strtol_l.isra.0+0x8e>
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	787c      	ldrb	r4, [r7, #1]
 800a2d0:	1cbd      	adds	r5, r7, #2
 800a2d2:	2e00      	cmp	r6, #0
 800a2d4:	d05d      	beq.n	800a392 <_strtol_l.isra.0+0xee>
 800a2d6:	2e10      	cmp	r6, #16
 800a2d8:	d109      	bne.n	800a2ee <_strtol_l.isra.0+0x4a>
 800a2da:	2c30      	cmp	r4, #48	; 0x30
 800a2dc:	d107      	bne.n	800a2ee <_strtol_l.isra.0+0x4a>
 800a2de:	782b      	ldrb	r3, [r5, #0]
 800a2e0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a2e4:	2b58      	cmp	r3, #88	; 0x58
 800a2e6:	d14f      	bne.n	800a388 <_strtol_l.isra.0+0xe4>
 800a2e8:	2610      	movs	r6, #16
 800a2ea:	786c      	ldrb	r4, [r5, #1]
 800a2ec:	3502      	adds	r5, #2
 800a2ee:	2a00      	cmp	r2, #0
 800a2f0:	bf14      	ite	ne
 800a2f2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a2f6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a2fa:	2700      	movs	r7, #0
 800a2fc:	fbb1 fcf6 	udiv	ip, r1, r6
 800a300:	4638      	mov	r0, r7
 800a302:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a306:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a30a:	2b09      	cmp	r3, #9
 800a30c:	d817      	bhi.n	800a33e <_strtol_l.isra.0+0x9a>
 800a30e:	461c      	mov	r4, r3
 800a310:	42a6      	cmp	r6, r4
 800a312:	dd23      	ble.n	800a35c <_strtol_l.isra.0+0xb8>
 800a314:	1c7b      	adds	r3, r7, #1
 800a316:	d007      	beq.n	800a328 <_strtol_l.isra.0+0x84>
 800a318:	4584      	cmp	ip, r0
 800a31a:	d31c      	bcc.n	800a356 <_strtol_l.isra.0+0xb2>
 800a31c:	d101      	bne.n	800a322 <_strtol_l.isra.0+0x7e>
 800a31e:	45a6      	cmp	lr, r4
 800a320:	db19      	blt.n	800a356 <_strtol_l.isra.0+0xb2>
 800a322:	2701      	movs	r7, #1
 800a324:	fb00 4006 	mla	r0, r0, r6, r4
 800a328:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a32c:	e7eb      	b.n	800a306 <_strtol_l.isra.0+0x62>
 800a32e:	462f      	mov	r7, r5
 800a330:	e7bf      	b.n	800a2b2 <_strtol_l.isra.0+0xe>
 800a332:	2c2b      	cmp	r4, #43	; 0x2b
 800a334:	bf04      	itt	eq
 800a336:	1cbd      	addeq	r5, r7, #2
 800a338:	787c      	ldrbeq	r4, [r7, #1]
 800a33a:	461a      	mov	r2, r3
 800a33c:	e7c9      	b.n	800a2d2 <_strtol_l.isra.0+0x2e>
 800a33e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a342:	2b19      	cmp	r3, #25
 800a344:	d801      	bhi.n	800a34a <_strtol_l.isra.0+0xa6>
 800a346:	3c37      	subs	r4, #55	; 0x37
 800a348:	e7e2      	b.n	800a310 <_strtol_l.isra.0+0x6c>
 800a34a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a34e:	2b19      	cmp	r3, #25
 800a350:	d804      	bhi.n	800a35c <_strtol_l.isra.0+0xb8>
 800a352:	3c57      	subs	r4, #87	; 0x57
 800a354:	e7dc      	b.n	800a310 <_strtol_l.isra.0+0x6c>
 800a356:	f04f 37ff 	mov.w	r7, #4294967295
 800a35a:	e7e5      	b.n	800a328 <_strtol_l.isra.0+0x84>
 800a35c:	1c7b      	adds	r3, r7, #1
 800a35e:	d108      	bne.n	800a372 <_strtol_l.isra.0+0xce>
 800a360:	2322      	movs	r3, #34	; 0x22
 800a362:	4608      	mov	r0, r1
 800a364:	f8c8 3000 	str.w	r3, [r8]
 800a368:	f1ba 0f00 	cmp.w	sl, #0
 800a36c:	d107      	bne.n	800a37e <_strtol_l.isra.0+0xda>
 800a36e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a372:	b102      	cbz	r2, 800a376 <_strtol_l.isra.0+0xd2>
 800a374:	4240      	negs	r0, r0
 800a376:	f1ba 0f00 	cmp.w	sl, #0
 800a37a:	d0f8      	beq.n	800a36e <_strtol_l.isra.0+0xca>
 800a37c:	b10f      	cbz	r7, 800a382 <_strtol_l.isra.0+0xde>
 800a37e:	f105 39ff 	add.w	r9, r5, #4294967295
 800a382:	f8ca 9000 	str.w	r9, [sl]
 800a386:	e7f2      	b.n	800a36e <_strtol_l.isra.0+0xca>
 800a388:	2430      	movs	r4, #48	; 0x30
 800a38a:	2e00      	cmp	r6, #0
 800a38c:	d1af      	bne.n	800a2ee <_strtol_l.isra.0+0x4a>
 800a38e:	2608      	movs	r6, #8
 800a390:	e7ad      	b.n	800a2ee <_strtol_l.isra.0+0x4a>
 800a392:	2c30      	cmp	r4, #48	; 0x30
 800a394:	d0a3      	beq.n	800a2de <_strtol_l.isra.0+0x3a>
 800a396:	260a      	movs	r6, #10
 800a398:	e7a9      	b.n	800a2ee <_strtol_l.isra.0+0x4a>
	...

0800a39c <strtol>:
 800a39c:	4b08      	ldr	r3, [pc, #32]	; (800a3c0 <strtol+0x24>)
 800a39e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3a0:	681c      	ldr	r4, [r3, #0]
 800a3a2:	4d08      	ldr	r5, [pc, #32]	; (800a3c4 <strtol+0x28>)
 800a3a4:	6a23      	ldr	r3, [r4, #32]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	bf08      	it	eq
 800a3aa:	462b      	moveq	r3, r5
 800a3ac:	9300      	str	r3, [sp, #0]
 800a3ae:	4613      	mov	r3, r2
 800a3b0:	460a      	mov	r2, r1
 800a3b2:	4601      	mov	r1, r0
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	f7ff ff75 	bl	800a2a4 <_strtol_l.isra.0>
 800a3ba:	b003      	add	sp, #12
 800a3bc:	bd30      	pop	{r4, r5, pc}
 800a3be:	bf00      	nop
 800a3c0:	200003c0 	.word	0x200003c0
 800a3c4:	20000424 	.word	0x20000424

0800a3c8 <__swbuf_r>:
 800a3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ca:	460e      	mov	r6, r1
 800a3cc:	4614      	mov	r4, r2
 800a3ce:	4605      	mov	r5, r0
 800a3d0:	b118      	cbz	r0, 800a3da <__swbuf_r+0x12>
 800a3d2:	6983      	ldr	r3, [r0, #24]
 800a3d4:	b90b      	cbnz	r3, 800a3da <__swbuf_r+0x12>
 800a3d6:	f000 f9a7 	bl	800a728 <__sinit>
 800a3da:	4b21      	ldr	r3, [pc, #132]	; (800a460 <__swbuf_r+0x98>)
 800a3dc:	429c      	cmp	r4, r3
 800a3de:	d12a      	bne.n	800a436 <__swbuf_r+0x6e>
 800a3e0:	686c      	ldr	r4, [r5, #4]
 800a3e2:	69a3      	ldr	r3, [r4, #24]
 800a3e4:	60a3      	str	r3, [r4, #8]
 800a3e6:	89a3      	ldrh	r3, [r4, #12]
 800a3e8:	071a      	lsls	r2, r3, #28
 800a3ea:	d52e      	bpl.n	800a44a <__swbuf_r+0x82>
 800a3ec:	6923      	ldr	r3, [r4, #16]
 800a3ee:	b363      	cbz	r3, 800a44a <__swbuf_r+0x82>
 800a3f0:	6923      	ldr	r3, [r4, #16]
 800a3f2:	6820      	ldr	r0, [r4, #0]
 800a3f4:	b2f6      	uxtb	r6, r6
 800a3f6:	1ac0      	subs	r0, r0, r3
 800a3f8:	6963      	ldr	r3, [r4, #20]
 800a3fa:	4637      	mov	r7, r6
 800a3fc:	4283      	cmp	r3, r0
 800a3fe:	dc04      	bgt.n	800a40a <__swbuf_r+0x42>
 800a400:	4621      	mov	r1, r4
 800a402:	4628      	mov	r0, r5
 800a404:	f000 f926 	bl	800a654 <_fflush_r>
 800a408:	bb28      	cbnz	r0, 800a456 <__swbuf_r+0x8e>
 800a40a:	68a3      	ldr	r3, [r4, #8]
 800a40c:	3001      	adds	r0, #1
 800a40e:	3b01      	subs	r3, #1
 800a410:	60a3      	str	r3, [r4, #8]
 800a412:	6823      	ldr	r3, [r4, #0]
 800a414:	1c5a      	adds	r2, r3, #1
 800a416:	6022      	str	r2, [r4, #0]
 800a418:	701e      	strb	r6, [r3, #0]
 800a41a:	6963      	ldr	r3, [r4, #20]
 800a41c:	4283      	cmp	r3, r0
 800a41e:	d004      	beq.n	800a42a <__swbuf_r+0x62>
 800a420:	89a3      	ldrh	r3, [r4, #12]
 800a422:	07db      	lsls	r3, r3, #31
 800a424:	d519      	bpl.n	800a45a <__swbuf_r+0x92>
 800a426:	2e0a      	cmp	r6, #10
 800a428:	d117      	bne.n	800a45a <__swbuf_r+0x92>
 800a42a:	4621      	mov	r1, r4
 800a42c:	4628      	mov	r0, r5
 800a42e:	f000 f911 	bl	800a654 <_fflush_r>
 800a432:	b190      	cbz	r0, 800a45a <__swbuf_r+0x92>
 800a434:	e00f      	b.n	800a456 <__swbuf_r+0x8e>
 800a436:	4b0b      	ldr	r3, [pc, #44]	; (800a464 <__swbuf_r+0x9c>)
 800a438:	429c      	cmp	r4, r3
 800a43a:	d101      	bne.n	800a440 <__swbuf_r+0x78>
 800a43c:	68ac      	ldr	r4, [r5, #8]
 800a43e:	e7d0      	b.n	800a3e2 <__swbuf_r+0x1a>
 800a440:	4b09      	ldr	r3, [pc, #36]	; (800a468 <__swbuf_r+0xa0>)
 800a442:	429c      	cmp	r4, r3
 800a444:	bf08      	it	eq
 800a446:	68ec      	ldreq	r4, [r5, #12]
 800a448:	e7cb      	b.n	800a3e2 <__swbuf_r+0x1a>
 800a44a:	4621      	mov	r1, r4
 800a44c:	4628      	mov	r0, r5
 800a44e:	f000 f80d 	bl	800a46c <__swsetup_r>
 800a452:	2800      	cmp	r0, #0
 800a454:	d0cc      	beq.n	800a3f0 <__swbuf_r+0x28>
 800a456:	f04f 37ff 	mov.w	r7, #4294967295
 800a45a:	4638      	mov	r0, r7
 800a45c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a45e:	bf00      	nop
 800a460:	0800d2d8 	.word	0x0800d2d8
 800a464:	0800d2f8 	.word	0x0800d2f8
 800a468:	0800d2b8 	.word	0x0800d2b8

0800a46c <__swsetup_r>:
 800a46c:	4b32      	ldr	r3, [pc, #200]	; (800a538 <__swsetup_r+0xcc>)
 800a46e:	b570      	push	{r4, r5, r6, lr}
 800a470:	681d      	ldr	r5, [r3, #0]
 800a472:	4606      	mov	r6, r0
 800a474:	460c      	mov	r4, r1
 800a476:	b125      	cbz	r5, 800a482 <__swsetup_r+0x16>
 800a478:	69ab      	ldr	r3, [r5, #24]
 800a47a:	b913      	cbnz	r3, 800a482 <__swsetup_r+0x16>
 800a47c:	4628      	mov	r0, r5
 800a47e:	f000 f953 	bl	800a728 <__sinit>
 800a482:	4b2e      	ldr	r3, [pc, #184]	; (800a53c <__swsetup_r+0xd0>)
 800a484:	429c      	cmp	r4, r3
 800a486:	d10f      	bne.n	800a4a8 <__swsetup_r+0x3c>
 800a488:	686c      	ldr	r4, [r5, #4]
 800a48a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a48e:	b29a      	uxth	r2, r3
 800a490:	0715      	lsls	r5, r2, #28
 800a492:	d42c      	bmi.n	800a4ee <__swsetup_r+0x82>
 800a494:	06d0      	lsls	r0, r2, #27
 800a496:	d411      	bmi.n	800a4bc <__swsetup_r+0x50>
 800a498:	2209      	movs	r2, #9
 800a49a:	6032      	str	r2, [r6, #0]
 800a49c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4a0:	81a3      	strh	r3, [r4, #12]
 800a4a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a6:	e03e      	b.n	800a526 <__swsetup_r+0xba>
 800a4a8:	4b25      	ldr	r3, [pc, #148]	; (800a540 <__swsetup_r+0xd4>)
 800a4aa:	429c      	cmp	r4, r3
 800a4ac:	d101      	bne.n	800a4b2 <__swsetup_r+0x46>
 800a4ae:	68ac      	ldr	r4, [r5, #8]
 800a4b0:	e7eb      	b.n	800a48a <__swsetup_r+0x1e>
 800a4b2:	4b24      	ldr	r3, [pc, #144]	; (800a544 <__swsetup_r+0xd8>)
 800a4b4:	429c      	cmp	r4, r3
 800a4b6:	bf08      	it	eq
 800a4b8:	68ec      	ldreq	r4, [r5, #12]
 800a4ba:	e7e6      	b.n	800a48a <__swsetup_r+0x1e>
 800a4bc:	0751      	lsls	r1, r2, #29
 800a4be:	d512      	bpl.n	800a4e6 <__swsetup_r+0x7a>
 800a4c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4c2:	b141      	cbz	r1, 800a4d6 <__swsetup_r+0x6a>
 800a4c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4c8:	4299      	cmp	r1, r3
 800a4ca:	d002      	beq.n	800a4d2 <__swsetup_r+0x66>
 800a4cc:	4630      	mov	r0, r6
 800a4ce:	f000 fa2f 	bl	800a930 <_free_r>
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	6363      	str	r3, [r4, #52]	; 0x34
 800a4d6:	89a3      	ldrh	r3, [r4, #12]
 800a4d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a4dc:	81a3      	strh	r3, [r4, #12]
 800a4de:	2300      	movs	r3, #0
 800a4e0:	6063      	str	r3, [r4, #4]
 800a4e2:	6923      	ldr	r3, [r4, #16]
 800a4e4:	6023      	str	r3, [r4, #0]
 800a4e6:	89a3      	ldrh	r3, [r4, #12]
 800a4e8:	f043 0308 	orr.w	r3, r3, #8
 800a4ec:	81a3      	strh	r3, [r4, #12]
 800a4ee:	6923      	ldr	r3, [r4, #16]
 800a4f0:	b94b      	cbnz	r3, 800a506 <__swsetup_r+0x9a>
 800a4f2:	89a3      	ldrh	r3, [r4, #12]
 800a4f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a4f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4fc:	d003      	beq.n	800a506 <__swsetup_r+0x9a>
 800a4fe:	4621      	mov	r1, r4
 800a500:	4630      	mov	r0, r6
 800a502:	f000 f9c3 	bl	800a88c <__smakebuf_r>
 800a506:	89a2      	ldrh	r2, [r4, #12]
 800a508:	f012 0301 	ands.w	r3, r2, #1
 800a50c:	d00c      	beq.n	800a528 <__swsetup_r+0xbc>
 800a50e:	2300      	movs	r3, #0
 800a510:	60a3      	str	r3, [r4, #8]
 800a512:	6963      	ldr	r3, [r4, #20]
 800a514:	425b      	negs	r3, r3
 800a516:	61a3      	str	r3, [r4, #24]
 800a518:	6923      	ldr	r3, [r4, #16]
 800a51a:	b953      	cbnz	r3, 800a532 <__swsetup_r+0xc6>
 800a51c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a520:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a524:	d1ba      	bne.n	800a49c <__swsetup_r+0x30>
 800a526:	bd70      	pop	{r4, r5, r6, pc}
 800a528:	0792      	lsls	r2, r2, #30
 800a52a:	bf58      	it	pl
 800a52c:	6963      	ldrpl	r3, [r4, #20]
 800a52e:	60a3      	str	r3, [r4, #8]
 800a530:	e7f2      	b.n	800a518 <__swsetup_r+0xac>
 800a532:	2000      	movs	r0, #0
 800a534:	e7f7      	b.n	800a526 <__swsetup_r+0xba>
 800a536:	bf00      	nop
 800a538:	200003c0 	.word	0x200003c0
 800a53c:	0800d2d8 	.word	0x0800d2d8
 800a540:	0800d2f8 	.word	0x0800d2f8
 800a544:	0800d2b8 	.word	0x0800d2b8

0800a548 <__sflush_r>:
 800a548:	898a      	ldrh	r2, [r1, #12]
 800a54a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a54e:	4605      	mov	r5, r0
 800a550:	0710      	lsls	r0, r2, #28
 800a552:	460c      	mov	r4, r1
 800a554:	d458      	bmi.n	800a608 <__sflush_r+0xc0>
 800a556:	684b      	ldr	r3, [r1, #4]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	dc05      	bgt.n	800a568 <__sflush_r+0x20>
 800a55c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a55e:	2b00      	cmp	r3, #0
 800a560:	dc02      	bgt.n	800a568 <__sflush_r+0x20>
 800a562:	2000      	movs	r0, #0
 800a564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a568:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a56a:	2e00      	cmp	r6, #0
 800a56c:	d0f9      	beq.n	800a562 <__sflush_r+0x1a>
 800a56e:	2300      	movs	r3, #0
 800a570:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a574:	682f      	ldr	r7, [r5, #0]
 800a576:	6a21      	ldr	r1, [r4, #32]
 800a578:	602b      	str	r3, [r5, #0]
 800a57a:	d032      	beq.n	800a5e2 <__sflush_r+0x9a>
 800a57c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a57e:	89a3      	ldrh	r3, [r4, #12]
 800a580:	075a      	lsls	r2, r3, #29
 800a582:	d505      	bpl.n	800a590 <__sflush_r+0x48>
 800a584:	6863      	ldr	r3, [r4, #4]
 800a586:	1ac0      	subs	r0, r0, r3
 800a588:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a58a:	b10b      	cbz	r3, 800a590 <__sflush_r+0x48>
 800a58c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a58e:	1ac0      	subs	r0, r0, r3
 800a590:	2300      	movs	r3, #0
 800a592:	4602      	mov	r2, r0
 800a594:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a596:	6a21      	ldr	r1, [r4, #32]
 800a598:	4628      	mov	r0, r5
 800a59a:	47b0      	blx	r6
 800a59c:	1c43      	adds	r3, r0, #1
 800a59e:	89a3      	ldrh	r3, [r4, #12]
 800a5a0:	d106      	bne.n	800a5b0 <__sflush_r+0x68>
 800a5a2:	6829      	ldr	r1, [r5, #0]
 800a5a4:	291d      	cmp	r1, #29
 800a5a6:	d848      	bhi.n	800a63a <__sflush_r+0xf2>
 800a5a8:	4a29      	ldr	r2, [pc, #164]	; (800a650 <__sflush_r+0x108>)
 800a5aa:	40ca      	lsrs	r2, r1
 800a5ac:	07d6      	lsls	r6, r2, #31
 800a5ae:	d544      	bpl.n	800a63a <__sflush_r+0xf2>
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	6062      	str	r2, [r4, #4]
 800a5b4:	6922      	ldr	r2, [r4, #16]
 800a5b6:	04d9      	lsls	r1, r3, #19
 800a5b8:	6022      	str	r2, [r4, #0]
 800a5ba:	d504      	bpl.n	800a5c6 <__sflush_r+0x7e>
 800a5bc:	1c42      	adds	r2, r0, #1
 800a5be:	d101      	bne.n	800a5c4 <__sflush_r+0x7c>
 800a5c0:	682b      	ldr	r3, [r5, #0]
 800a5c2:	b903      	cbnz	r3, 800a5c6 <__sflush_r+0x7e>
 800a5c4:	6560      	str	r0, [r4, #84]	; 0x54
 800a5c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5c8:	602f      	str	r7, [r5, #0]
 800a5ca:	2900      	cmp	r1, #0
 800a5cc:	d0c9      	beq.n	800a562 <__sflush_r+0x1a>
 800a5ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5d2:	4299      	cmp	r1, r3
 800a5d4:	d002      	beq.n	800a5dc <__sflush_r+0x94>
 800a5d6:	4628      	mov	r0, r5
 800a5d8:	f000 f9aa 	bl	800a930 <_free_r>
 800a5dc:	2000      	movs	r0, #0
 800a5de:	6360      	str	r0, [r4, #52]	; 0x34
 800a5e0:	e7c0      	b.n	800a564 <__sflush_r+0x1c>
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	4628      	mov	r0, r5
 800a5e6:	47b0      	blx	r6
 800a5e8:	1c41      	adds	r1, r0, #1
 800a5ea:	d1c8      	bne.n	800a57e <__sflush_r+0x36>
 800a5ec:	682b      	ldr	r3, [r5, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d0c5      	beq.n	800a57e <__sflush_r+0x36>
 800a5f2:	2b1d      	cmp	r3, #29
 800a5f4:	d001      	beq.n	800a5fa <__sflush_r+0xb2>
 800a5f6:	2b16      	cmp	r3, #22
 800a5f8:	d101      	bne.n	800a5fe <__sflush_r+0xb6>
 800a5fa:	602f      	str	r7, [r5, #0]
 800a5fc:	e7b1      	b.n	800a562 <__sflush_r+0x1a>
 800a5fe:	89a3      	ldrh	r3, [r4, #12]
 800a600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a604:	81a3      	strh	r3, [r4, #12]
 800a606:	e7ad      	b.n	800a564 <__sflush_r+0x1c>
 800a608:	690f      	ldr	r7, [r1, #16]
 800a60a:	2f00      	cmp	r7, #0
 800a60c:	d0a9      	beq.n	800a562 <__sflush_r+0x1a>
 800a60e:	0793      	lsls	r3, r2, #30
 800a610:	bf18      	it	ne
 800a612:	2300      	movne	r3, #0
 800a614:	680e      	ldr	r6, [r1, #0]
 800a616:	bf08      	it	eq
 800a618:	694b      	ldreq	r3, [r1, #20]
 800a61a:	eba6 0807 	sub.w	r8, r6, r7
 800a61e:	600f      	str	r7, [r1, #0]
 800a620:	608b      	str	r3, [r1, #8]
 800a622:	f1b8 0f00 	cmp.w	r8, #0
 800a626:	dd9c      	ble.n	800a562 <__sflush_r+0x1a>
 800a628:	4643      	mov	r3, r8
 800a62a:	463a      	mov	r2, r7
 800a62c:	6a21      	ldr	r1, [r4, #32]
 800a62e:	4628      	mov	r0, r5
 800a630:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a632:	47b0      	blx	r6
 800a634:	2800      	cmp	r0, #0
 800a636:	dc06      	bgt.n	800a646 <__sflush_r+0xfe>
 800a638:	89a3      	ldrh	r3, [r4, #12]
 800a63a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a63e:	81a3      	strh	r3, [r4, #12]
 800a640:	f04f 30ff 	mov.w	r0, #4294967295
 800a644:	e78e      	b.n	800a564 <__sflush_r+0x1c>
 800a646:	4407      	add	r7, r0
 800a648:	eba8 0800 	sub.w	r8, r8, r0
 800a64c:	e7e9      	b.n	800a622 <__sflush_r+0xda>
 800a64e:	bf00      	nop
 800a650:	20400001 	.word	0x20400001

0800a654 <_fflush_r>:
 800a654:	b538      	push	{r3, r4, r5, lr}
 800a656:	690b      	ldr	r3, [r1, #16]
 800a658:	4605      	mov	r5, r0
 800a65a:	460c      	mov	r4, r1
 800a65c:	b1db      	cbz	r3, 800a696 <_fflush_r+0x42>
 800a65e:	b118      	cbz	r0, 800a668 <_fflush_r+0x14>
 800a660:	6983      	ldr	r3, [r0, #24]
 800a662:	b90b      	cbnz	r3, 800a668 <_fflush_r+0x14>
 800a664:	f000 f860 	bl	800a728 <__sinit>
 800a668:	4b0c      	ldr	r3, [pc, #48]	; (800a69c <_fflush_r+0x48>)
 800a66a:	429c      	cmp	r4, r3
 800a66c:	d109      	bne.n	800a682 <_fflush_r+0x2e>
 800a66e:	686c      	ldr	r4, [r5, #4]
 800a670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a674:	b17b      	cbz	r3, 800a696 <_fflush_r+0x42>
 800a676:	4621      	mov	r1, r4
 800a678:	4628      	mov	r0, r5
 800a67a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a67e:	f7ff bf63 	b.w	800a548 <__sflush_r>
 800a682:	4b07      	ldr	r3, [pc, #28]	; (800a6a0 <_fflush_r+0x4c>)
 800a684:	429c      	cmp	r4, r3
 800a686:	d101      	bne.n	800a68c <_fflush_r+0x38>
 800a688:	68ac      	ldr	r4, [r5, #8]
 800a68a:	e7f1      	b.n	800a670 <_fflush_r+0x1c>
 800a68c:	4b05      	ldr	r3, [pc, #20]	; (800a6a4 <_fflush_r+0x50>)
 800a68e:	429c      	cmp	r4, r3
 800a690:	bf08      	it	eq
 800a692:	68ec      	ldreq	r4, [r5, #12]
 800a694:	e7ec      	b.n	800a670 <_fflush_r+0x1c>
 800a696:	2000      	movs	r0, #0
 800a698:	bd38      	pop	{r3, r4, r5, pc}
 800a69a:	bf00      	nop
 800a69c:	0800d2d8 	.word	0x0800d2d8
 800a6a0:	0800d2f8 	.word	0x0800d2f8
 800a6a4:	0800d2b8 	.word	0x0800d2b8

0800a6a8 <std>:
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	b510      	push	{r4, lr}
 800a6ac:	4604      	mov	r4, r0
 800a6ae:	e9c0 3300 	strd	r3, r3, [r0]
 800a6b2:	6083      	str	r3, [r0, #8]
 800a6b4:	8181      	strh	r1, [r0, #12]
 800a6b6:	6643      	str	r3, [r0, #100]	; 0x64
 800a6b8:	81c2      	strh	r2, [r0, #14]
 800a6ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a6be:	6183      	str	r3, [r0, #24]
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	2208      	movs	r2, #8
 800a6c4:	305c      	adds	r0, #92	; 0x5c
 800a6c6:	f7ff fd2d 	bl	800a124 <memset>
 800a6ca:	4b05      	ldr	r3, [pc, #20]	; (800a6e0 <std+0x38>)
 800a6cc:	6224      	str	r4, [r4, #32]
 800a6ce:	6263      	str	r3, [r4, #36]	; 0x24
 800a6d0:	4b04      	ldr	r3, [pc, #16]	; (800a6e4 <std+0x3c>)
 800a6d2:	62a3      	str	r3, [r4, #40]	; 0x28
 800a6d4:	4b04      	ldr	r3, [pc, #16]	; (800a6e8 <std+0x40>)
 800a6d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a6d8:	4b04      	ldr	r3, [pc, #16]	; (800a6ec <std+0x44>)
 800a6da:	6323      	str	r3, [r4, #48]	; 0x30
 800a6dc:	bd10      	pop	{r4, pc}
 800a6de:	bf00      	nop
 800a6e0:	0800b339 	.word	0x0800b339
 800a6e4:	0800b35b 	.word	0x0800b35b
 800a6e8:	0800b393 	.word	0x0800b393
 800a6ec:	0800b3b7 	.word	0x0800b3b7

0800a6f0 <_cleanup_r>:
 800a6f0:	4901      	ldr	r1, [pc, #4]	; (800a6f8 <_cleanup_r+0x8>)
 800a6f2:	f000 b885 	b.w	800a800 <_fwalk_reent>
 800a6f6:	bf00      	nop
 800a6f8:	0800a655 	.word	0x0800a655

0800a6fc <__sfmoreglue>:
 800a6fc:	b570      	push	{r4, r5, r6, lr}
 800a6fe:	2568      	movs	r5, #104	; 0x68
 800a700:	1e4a      	subs	r2, r1, #1
 800a702:	4355      	muls	r5, r2
 800a704:	460e      	mov	r6, r1
 800a706:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a70a:	f000 f95d 	bl	800a9c8 <_malloc_r>
 800a70e:	4604      	mov	r4, r0
 800a710:	b140      	cbz	r0, 800a724 <__sfmoreglue+0x28>
 800a712:	2100      	movs	r1, #0
 800a714:	e9c0 1600 	strd	r1, r6, [r0]
 800a718:	300c      	adds	r0, #12
 800a71a:	60a0      	str	r0, [r4, #8]
 800a71c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a720:	f7ff fd00 	bl	800a124 <memset>
 800a724:	4620      	mov	r0, r4
 800a726:	bd70      	pop	{r4, r5, r6, pc}

0800a728 <__sinit>:
 800a728:	6983      	ldr	r3, [r0, #24]
 800a72a:	b510      	push	{r4, lr}
 800a72c:	4604      	mov	r4, r0
 800a72e:	bb33      	cbnz	r3, 800a77e <__sinit+0x56>
 800a730:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a734:	6503      	str	r3, [r0, #80]	; 0x50
 800a736:	4b12      	ldr	r3, [pc, #72]	; (800a780 <__sinit+0x58>)
 800a738:	4a12      	ldr	r2, [pc, #72]	; (800a784 <__sinit+0x5c>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	6282      	str	r2, [r0, #40]	; 0x28
 800a73e:	4298      	cmp	r0, r3
 800a740:	bf04      	itt	eq
 800a742:	2301      	moveq	r3, #1
 800a744:	6183      	streq	r3, [r0, #24]
 800a746:	f000 f81f 	bl	800a788 <__sfp>
 800a74a:	6060      	str	r0, [r4, #4]
 800a74c:	4620      	mov	r0, r4
 800a74e:	f000 f81b 	bl	800a788 <__sfp>
 800a752:	60a0      	str	r0, [r4, #8]
 800a754:	4620      	mov	r0, r4
 800a756:	f000 f817 	bl	800a788 <__sfp>
 800a75a:	2200      	movs	r2, #0
 800a75c:	60e0      	str	r0, [r4, #12]
 800a75e:	2104      	movs	r1, #4
 800a760:	6860      	ldr	r0, [r4, #4]
 800a762:	f7ff ffa1 	bl	800a6a8 <std>
 800a766:	2201      	movs	r2, #1
 800a768:	2109      	movs	r1, #9
 800a76a:	68a0      	ldr	r0, [r4, #8]
 800a76c:	f7ff ff9c 	bl	800a6a8 <std>
 800a770:	2202      	movs	r2, #2
 800a772:	2112      	movs	r1, #18
 800a774:	68e0      	ldr	r0, [r4, #12]
 800a776:	f7ff ff97 	bl	800a6a8 <std>
 800a77a:	2301      	movs	r3, #1
 800a77c:	61a3      	str	r3, [r4, #24]
 800a77e:	bd10      	pop	{r4, pc}
 800a780:	0800d2b4 	.word	0x0800d2b4
 800a784:	0800a6f1 	.word	0x0800a6f1

0800a788 <__sfp>:
 800a788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a78a:	4b1b      	ldr	r3, [pc, #108]	; (800a7f8 <__sfp+0x70>)
 800a78c:	4607      	mov	r7, r0
 800a78e:	681e      	ldr	r6, [r3, #0]
 800a790:	69b3      	ldr	r3, [r6, #24]
 800a792:	b913      	cbnz	r3, 800a79a <__sfp+0x12>
 800a794:	4630      	mov	r0, r6
 800a796:	f7ff ffc7 	bl	800a728 <__sinit>
 800a79a:	3648      	adds	r6, #72	; 0x48
 800a79c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a7a0:	3b01      	subs	r3, #1
 800a7a2:	d503      	bpl.n	800a7ac <__sfp+0x24>
 800a7a4:	6833      	ldr	r3, [r6, #0]
 800a7a6:	b133      	cbz	r3, 800a7b6 <__sfp+0x2e>
 800a7a8:	6836      	ldr	r6, [r6, #0]
 800a7aa:	e7f7      	b.n	800a79c <__sfp+0x14>
 800a7ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a7b0:	b16d      	cbz	r5, 800a7ce <__sfp+0x46>
 800a7b2:	3468      	adds	r4, #104	; 0x68
 800a7b4:	e7f4      	b.n	800a7a0 <__sfp+0x18>
 800a7b6:	2104      	movs	r1, #4
 800a7b8:	4638      	mov	r0, r7
 800a7ba:	f7ff ff9f 	bl	800a6fc <__sfmoreglue>
 800a7be:	6030      	str	r0, [r6, #0]
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	d1f1      	bne.n	800a7a8 <__sfp+0x20>
 800a7c4:	230c      	movs	r3, #12
 800a7c6:	4604      	mov	r4, r0
 800a7c8:	603b      	str	r3, [r7, #0]
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7ce:	4b0b      	ldr	r3, [pc, #44]	; (800a7fc <__sfp+0x74>)
 800a7d0:	6665      	str	r5, [r4, #100]	; 0x64
 800a7d2:	e9c4 5500 	strd	r5, r5, [r4]
 800a7d6:	60a5      	str	r5, [r4, #8]
 800a7d8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a7dc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a7e0:	2208      	movs	r2, #8
 800a7e2:	4629      	mov	r1, r5
 800a7e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a7e8:	f7ff fc9c 	bl	800a124 <memset>
 800a7ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a7f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a7f4:	e7e9      	b.n	800a7ca <__sfp+0x42>
 800a7f6:	bf00      	nop
 800a7f8:	0800d2b4 	.word	0x0800d2b4
 800a7fc:	ffff0001 	.word	0xffff0001

0800a800 <_fwalk_reent>:
 800a800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a804:	4680      	mov	r8, r0
 800a806:	4689      	mov	r9, r1
 800a808:	2600      	movs	r6, #0
 800a80a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a80e:	b914      	cbnz	r4, 800a816 <_fwalk_reent+0x16>
 800a810:	4630      	mov	r0, r6
 800a812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a816:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a81a:	3f01      	subs	r7, #1
 800a81c:	d501      	bpl.n	800a822 <_fwalk_reent+0x22>
 800a81e:	6824      	ldr	r4, [r4, #0]
 800a820:	e7f5      	b.n	800a80e <_fwalk_reent+0xe>
 800a822:	89ab      	ldrh	r3, [r5, #12]
 800a824:	2b01      	cmp	r3, #1
 800a826:	d907      	bls.n	800a838 <_fwalk_reent+0x38>
 800a828:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a82c:	3301      	adds	r3, #1
 800a82e:	d003      	beq.n	800a838 <_fwalk_reent+0x38>
 800a830:	4629      	mov	r1, r5
 800a832:	4640      	mov	r0, r8
 800a834:	47c8      	blx	r9
 800a836:	4306      	orrs	r6, r0
 800a838:	3568      	adds	r5, #104	; 0x68
 800a83a:	e7ee      	b.n	800a81a <_fwalk_reent+0x1a>

0800a83c <__locale_ctype_ptr_l>:
 800a83c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a840:	4770      	bx	lr

0800a842 <__swhatbuf_r>:
 800a842:	b570      	push	{r4, r5, r6, lr}
 800a844:	460e      	mov	r6, r1
 800a846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a84a:	b096      	sub	sp, #88	; 0x58
 800a84c:	2900      	cmp	r1, #0
 800a84e:	4614      	mov	r4, r2
 800a850:	461d      	mov	r5, r3
 800a852:	da07      	bge.n	800a864 <__swhatbuf_r+0x22>
 800a854:	2300      	movs	r3, #0
 800a856:	602b      	str	r3, [r5, #0]
 800a858:	89b3      	ldrh	r3, [r6, #12]
 800a85a:	061a      	lsls	r2, r3, #24
 800a85c:	d410      	bmi.n	800a880 <__swhatbuf_r+0x3e>
 800a85e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a862:	e00e      	b.n	800a882 <__swhatbuf_r+0x40>
 800a864:	466a      	mov	r2, sp
 800a866:	f000 fdd9 	bl	800b41c <_fstat_r>
 800a86a:	2800      	cmp	r0, #0
 800a86c:	dbf2      	blt.n	800a854 <__swhatbuf_r+0x12>
 800a86e:	9a01      	ldr	r2, [sp, #4]
 800a870:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a874:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a878:	425a      	negs	r2, r3
 800a87a:	415a      	adcs	r2, r3
 800a87c:	602a      	str	r2, [r5, #0]
 800a87e:	e7ee      	b.n	800a85e <__swhatbuf_r+0x1c>
 800a880:	2340      	movs	r3, #64	; 0x40
 800a882:	2000      	movs	r0, #0
 800a884:	6023      	str	r3, [r4, #0]
 800a886:	b016      	add	sp, #88	; 0x58
 800a888:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a88c <__smakebuf_r>:
 800a88c:	898b      	ldrh	r3, [r1, #12]
 800a88e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a890:	079d      	lsls	r5, r3, #30
 800a892:	4606      	mov	r6, r0
 800a894:	460c      	mov	r4, r1
 800a896:	d507      	bpl.n	800a8a8 <__smakebuf_r+0x1c>
 800a898:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a89c:	6023      	str	r3, [r4, #0]
 800a89e:	6123      	str	r3, [r4, #16]
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	6163      	str	r3, [r4, #20]
 800a8a4:	b002      	add	sp, #8
 800a8a6:	bd70      	pop	{r4, r5, r6, pc}
 800a8a8:	ab01      	add	r3, sp, #4
 800a8aa:	466a      	mov	r2, sp
 800a8ac:	f7ff ffc9 	bl	800a842 <__swhatbuf_r>
 800a8b0:	9900      	ldr	r1, [sp, #0]
 800a8b2:	4605      	mov	r5, r0
 800a8b4:	4630      	mov	r0, r6
 800a8b6:	f000 f887 	bl	800a9c8 <_malloc_r>
 800a8ba:	b948      	cbnz	r0, 800a8d0 <__smakebuf_r+0x44>
 800a8bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8c0:	059a      	lsls	r2, r3, #22
 800a8c2:	d4ef      	bmi.n	800a8a4 <__smakebuf_r+0x18>
 800a8c4:	f023 0303 	bic.w	r3, r3, #3
 800a8c8:	f043 0302 	orr.w	r3, r3, #2
 800a8cc:	81a3      	strh	r3, [r4, #12]
 800a8ce:	e7e3      	b.n	800a898 <__smakebuf_r+0xc>
 800a8d0:	4b0d      	ldr	r3, [pc, #52]	; (800a908 <__smakebuf_r+0x7c>)
 800a8d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a8d4:	89a3      	ldrh	r3, [r4, #12]
 800a8d6:	6020      	str	r0, [r4, #0]
 800a8d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8dc:	81a3      	strh	r3, [r4, #12]
 800a8de:	9b00      	ldr	r3, [sp, #0]
 800a8e0:	6120      	str	r0, [r4, #16]
 800a8e2:	6163      	str	r3, [r4, #20]
 800a8e4:	9b01      	ldr	r3, [sp, #4]
 800a8e6:	b15b      	cbz	r3, 800a900 <__smakebuf_r+0x74>
 800a8e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8ec:	4630      	mov	r0, r6
 800a8ee:	f000 fda7 	bl	800b440 <_isatty_r>
 800a8f2:	b128      	cbz	r0, 800a900 <__smakebuf_r+0x74>
 800a8f4:	89a3      	ldrh	r3, [r4, #12]
 800a8f6:	f023 0303 	bic.w	r3, r3, #3
 800a8fa:	f043 0301 	orr.w	r3, r3, #1
 800a8fe:	81a3      	strh	r3, [r4, #12]
 800a900:	89a3      	ldrh	r3, [r4, #12]
 800a902:	431d      	orrs	r5, r3
 800a904:	81a5      	strh	r5, [r4, #12]
 800a906:	e7cd      	b.n	800a8a4 <__smakebuf_r+0x18>
 800a908:	0800a6f1 	.word	0x0800a6f1

0800a90c <__ascii_mbtowc>:
 800a90c:	b082      	sub	sp, #8
 800a90e:	b901      	cbnz	r1, 800a912 <__ascii_mbtowc+0x6>
 800a910:	a901      	add	r1, sp, #4
 800a912:	b142      	cbz	r2, 800a926 <__ascii_mbtowc+0x1a>
 800a914:	b14b      	cbz	r3, 800a92a <__ascii_mbtowc+0x1e>
 800a916:	7813      	ldrb	r3, [r2, #0]
 800a918:	600b      	str	r3, [r1, #0]
 800a91a:	7812      	ldrb	r2, [r2, #0]
 800a91c:	1c10      	adds	r0, r2, #0
 800a91e:	bf18      	it	ne
 800a920:	2001      	movne	r0, #1
 800a922:	b002      	add	sp, #8
 800a924:	4770      	bx	lr
 800a926:	4610      	mov	r0, r2
 800a928:	e7fb      	b.n	800a922 <__ascii_mbtowc+0x16>
 800a92a:	f06f 0001 	mvn.w	r0, #1
 800a92e:	e7f8      	b.n	800a922 <__ascii_mbtowc+0x16>

0800a930 <_free_r>:
 800a930:	b538      	push	{r3, r4, r5, lr}
 800a932:	4605      	mov	r5, r0
 800a934:	2900      	cmp	r1, #0
 800a936:	d043      	beq.n	800a9c0 <_free_r+0x90>
 800a938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a93c:	1f0c      	subs	r4, r1, #4
 800a93e:	2b00      	cmp	r3, #0
 800a940:	bfb8      	it	lt
 800a942:	18e4      	addlt	r4, r4, r3
 800a944:	f000 fdd0 	bl	800b4e8 <__malloc_lock>
 800a948:	4a1e      	ldr	r2, [pc, #120]	; (800a9c4 <_free_r+0x94>)
 800a94a:	6813      	ldr	r3, [r2, #0]
 800a94c:	4610      	mov	r0, r2
 800a94e:	b933      	cbnz	r3, 800a95e <_free_r+0x2e>
 800a950:	6063      	str	r3, [r4, #4]
 800a952:	6014      	str	r4, [r2, #0]
 800a954:	4628      	mov	r0, r5
 800a956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a95a:	f000 bdc6 	b.w	800b4ea <__malloc_unlock>
 800a95e:	42a3      	cmp	r3, r4
 800a960:	d90b      	bls.n	800a97a <_free_r+0x4a>
 800a962:	6821      	ldr	r1, [r4, #0]
 800a964:	1862      	adds	r2, r4, r1
 800a966:	4293      	cmp	r3, r2
 800a968:	bf01      	itttt	eq
 800a96a:	681a      	ldreq	r2, [r3, #0]
 800a96c:	685b      	ldreq	r3, [r3, #4]
 800a96e:	1852      	addeq	r2, r2, r1
 800a970:	6022      	streq	r2, [r4, #0]
 800a972:	6063      	str	r3, [r4, #4]
 800a974:	6004      	str	r4, [r0, #0]
 800a976:	e7ed      	b.n	800a954 <_free_r+0x24>
 800a978:	4613      	mov	r3, r2
 800a97a:	685a      	ldr	r2, [r3, #4]
 800a97c:	b10a      	cbz	r2, 800a982 <_free_r+0x52>
 800a97e:	42a2      	cmp	r2, r4
 800a980:	d9fa      	bls.n	800a978 <_free_r+0x48>
 800a982:	6819      	ldr	r1, [r3, #0]
 800a984:	1858      	adds	r0, r3, r1
 800a986:	42a0      	cmp	r0, r4
 800a988:	d10b      	bne.n	800a9a2 <_free_r+0x72>
 800a98a:	6820      	ldr	r0, [r4, #0]
 800a98c:	4401      	add	r1, r0
 800a98e:	1858      	adds	r0, r3, r1
 800a990:	4282      	cmp	r2, r0
 800a992:	6019      	str	r1, [r3, #0]
 800a994:	d1de      	bne.n	800a954 <_free_r+0x24>
 800a996:	6810      	ldr	r0, [r2, #0]
 800a998:	6852      	ldr	r2, [r2, #4]
 800a99a:	4401      	add	r1, r0
 800a99c:	6019      	str	r1, [r3, #0]
 800a99e:	605a      	str	r2, [r3, #4]
 800a9a0:	e7d8      	b.n	800a954 <_free_r+0x24>
 800a9a2:	d902      	bls.n	800a9aa <_free_r+0x7a>
 800a9a4:	230c      	movs	r3, #12
 800a9a6:	602b      	str	r3, [r5, #0]
 800a9a8:	e7d4      	b.n	800a954 <_free_r+0x24>
 800a9aa:	6820      	ldr	r0, [r4, #0]
 800a9ac:	1821      	adds	r1, r4, r0
 800a9ae:	428a      	cmp	r2, r1
 800a9b0:	bf01      	itttt	eq
 800a9b2:	6811      	ldreq	r1, [r2, #0]
 800a9b4:	6852      	ldreq	r2, [r2, #4]
 800a9b6:	1809      	addeq	r1, r1, r0
 800a9b8:	6021      	streq	r1, [r4, #0]
 800a9ba:	6062      	str	r2, [r4, #4]
 800a9bc:	605c      	str	r4, [r3, #4]
 800a9be:	e7c9      	b.n	800a954 <_free_r+0x24>
 800a9c0:	bd38      	pop	{r3, r4, r5, pc}
 800a9c2:	bf00      	nop
 800a9c4:	200005cc 	.word	0x200005cc

0800a9c8 <_malloc_r>:
 800a9c8:	b570      	push	{r4, r5, r6, lr}
 800a9ca:	1ccd      	adds	r5, r1, #3
 800a9cc:	f025 0503 	bic.w	r5, r5, #3
 800a9d0:	3508      	adds	r5, #8
 800a9d2:	2d0c      	cmp	r5, #12
 800a9d4:	bf38      	it	cc
 800a9d6:	250c      	movcc	r5, #12
 800a9d8:	2d00      	cmp	r5, #0
 800a9da:	4606      	mov	r6, r0
 800a9dc:	db01      	blt.n	800a9e2 <_malloc_r+0x1a>
 800a9de:	42a9      	cmp	r1, r5
 800a9e0:	d903      	bls.n	800a9ea <_malloc_r+0x22>
 800a9e2:	230c      	movs	r3, #12
 800a9e4:	6033      	str	r3, [r6, #0]
 800a9e6:	2000      	movs	r0, #0
 800a9e8:	bd70      	pop	{r4, r5, r6, pc}
 800a9ea:	f000 fd7d 	bl	800b4e8 <__malloc_lock>
 800a9ee:	4a21      	ldr	r2, [pc, #132]	; (800aa74 <_malloc_r+0xac>)
 800a9f0:	6814      	ldr	r4, [r2, #0]
 800a9f2:	4621      	mov	r1, r4
 800a9f4:	b991      	cbnz	r1, 800aa1c <_malloc_r+0x54>
 800a9f6:	4c20      	ldr	r4, [pc, #128]	; (800aa78 <_malloc_r+0xb0>)
 800a9f8:	6823      	ldr	r3, [r4, #0]
 800a9fa:	b91b      	cbnz	r3, 800aa04 <_malloc_r+0x3c>
 800a9fc:	4630      	mov	r0, r6
 800a9fe:	f000 fc8b 	bl	800b318 <_sbrk_r>
 800aa02:	6020      	str	r0, [r4, #0]
 800aa04:	4629      	mov	r1, r5
 800aa06:	4630      	mov	r0, r6
 800aa08:	f000 fc86 	bl	800b318 <_sbrk_r>
 800aa0c:	1c43      	adds	r3, r0, #1
 800aa0e:	d124      	bne.n	800aa5a <_malloc_r+0x92>
 800aa10:	230c      	movs	r3, #12
 800aa12:	4630      	mov	r0, r6
 800aa14:	6033      	str	r3, [r6, #0]
 800aa16:	f000 fd68 	bl	800b4ea <__malloc_unlock>
 800aa1a:	e7e4      	b.n	800a9e6 <_malloc_r+0x1e>
 800aa1c:	680b      	ldr	r3, [r1, #0]
 800aa1e:	1b5b      	subs	r3, r3, r5
 800aa20:	d418      	bmi.n	800aa54 <_malloc_r+0x8c>
 800aa22:	2b0b      	cmp	r3, #11
 800aa24:	d90f      	bls.n	800aa46 <_malloc_r+0x7e>
 800aa26:	600b      	str	r3, [r1, #0]
 800aa28:	18cc      	adds	r4, r1, r3
 800aa2a:	50cd      	str	r5, [r1, r3]
 800aa2c:	4630      	mov	r0, r6
 800aa2e:	f000 fd5c 	bl	800b4ea <__malloc_unlock>
 800aa32:	f104 000b 	add.w	r0, r4, #11
 800aa36:	1d23      	adds	r3, r4, #4
 800aa38:	f020 0007 	bic.w	r0, r0, #7
 800aa3c:	1ac3      	subs	r3, r0, r3
 800aa3e:	d0d3      	beq.n	800a9e8 <_malloc_r+0x20>
 800aa40:	425a      	negs	r2, r3
 800aa42:	50e2      	str	r2, [r4, r3]
 800aa44:	e7d0      	b.n	800a9e8 <_malloc_r+0x20>
 800aa46:	684b      	ldr	r3, [r1, #4]
 800aa48:	428c      	cmp	r4, r1
 800aa4a:	bf16      	itet	ne
 800aa4c:	6063      	strne	r3, [r4, #4]
 800aa4e:	6013      	streq	r3, [r2, #0]
 800aa50:	460c      	movne	r4, r1
 800aa52:	e7eb      	b.n	800aa2c <_malloc_r+0x64>
 800aa54:	460c      	mov	r4, r1
 800aa56:	6849      	ldr	r1, [r1, #4]
 800aa58:	e7cc      	b.n	800a9f4 <_malloc_r+0x2c>
 800aa5a:	1cc4      	adds	r4, r0, #3
 800aa5c:	f024 0403 	bic.w	r4, r4, #3
 800aa60:	42a0      	cmp	r0, r4
 800aa62:	d005      	beq.n	800aa70 <_malloc_r+0xa8>
 800aa64:	1a21      	subs	r1, r4, r0
 800aa66:	4630      	mov	r0, r6
 800aa68:	f000 fc56 	bl	800b318 <_sbrk_r>
 800aa6c:	3001      	adds	r0, #1
 800aa6e:	d0cf      	beq.n	800aa10 <_malloc_r+0x48>
 800aa70:	6025      	str	r5, [r4, #0]
 800aa72:	e7db      	b.n	800aa2c <_malloc_r+0x64>
 800aa74:	200005cc 	.word	0x200005cc
 800aa78:	200005d0 	.word	0x200005d0

0800aa7c <__ssputs_r>:
 800aa7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa80:	688e      	ldr	r6, [r1, #8]
 800aa82:	4682      	mov	sl, r0
 800aa84:	429e      	cmp	r6, r3
 800aa86:	460c      	mov	r4, r1
 800aa88:	4690      	mov	r8, r2
 800aa8a:	4699      	mov	r9, r3
 800aa8c:	d837      	bhi.n	800aafe <__ssputs_r+0x82>
 800aa8e:	898a      	ldrh	r2, [r1, #12]
 800aa90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa94:	d031      	beq.n	800aafa <__ssputs_r+0x7e>
 800aa96:	2302      	movs	r3, #2
 800aa98:	6825      	ldr	r5, [r4, #0]
 800aa9a:	6909      	ldr	r1, [r1, #16]
 800aa9c:	1a6f      	subs	r7, r5, r1
 800aa9e:	6965      	ldr	r5, [r4, #20]
 800aaa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aaa4:	fb95 f5f3 	sdiv	r5, r5, r3
 800aaa8:	f109 0301 	add.w	r3, r9, #1
 800aaac:	443b      	add	r3, r7
 800aaae:	429d      	cmp	r5, r3
 800aab0:	bf38      	it	cc
 800aab2:	461d      	movcc	r5, r3
 800aab4:	0553      	lsls	r3, r2, #21
 800aab6:	d530      	bpl.n	800ab1a <__ssputs_r+0x9e>
 800aab8:	4629      	mov	r1, r5
 800aaba:	f7ff ff85 	bl	800a9c8 <_malloc_r>
 800aabe:	4606      	mov	r6, r0
 800aac0:	b950      	cbnz	r0, 800aad8 <__ssputs_r+0x5c>
 800aac2:	230c      	movs	r3, #12
 800aac4:	f04f 30ff 	mov.w	r0, #4294967295
 800aac8:	f8ca 3000 	str.w	r3, [sl]
 800aacc:	89a3      	ldrh	r3, [r4, #12]
 800aace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aad2:	81a3      	strh	r3, [r4, #12]
 800aad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aad8:	463a      	mov	r2, r7
 800aada:	6921      	ldr	r1, [r4, #16]
 800aadc:	f000 fce0 	bl	800b4a0 <memcpy>
 800aae0:	89a3      	ldrh	r3, [r4, #12]
 800aae2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaea:	81a3      	strh	r3, [r4, #12]
 800aaec:	6126      	str	r6, [r4, #16]
 800aaee:	443e      	add	r6, r7
 800aaf0:	6026      	str	r6, [r4, #0]
 800aaf2:	464e      	mov	r6, r9
 800aaf4:	6165      	str	r5, [r4, #20]
 800aaf6:	1bed      	subs	r5, r5, r7
 800aaf8:	60a5      	str	r5, [r4, #8]
 800aafa:	454e      	cmp	r6, r9
 800aafc:	d900      	bls.n	800ab00 <__ssputs_r+0x84>
 800aafe:	464e      	mov	r6, r9
 800ab00:	4632      	mov	r2, r6
 800ab02:	4641      	mov	r1, r8
 800ab04:	6820      	ldr	r0, [r4, #0]
 800ab06:	f000 fcd6 	bl	800b4b6 <memmove>
 800ab0a:	68a3      	ldr	r3, [r4, #8]
 800ab0c:	2000      	movs	r0, #0
 800ab0e:	1b9b      	subs	r3, r3, r6
 800ab10:	60a3      	str	r3, [r4, #8]
 800ab12:	6823      	ldr	r3, [r4, #0]
 800ab14:	441e      	add	r6, r3
 800ab16:	6026      	str	r6, [r4, #0]
 800ab18:	e7dc      	b.n	800aad4 <__ssputs_r+0x58>
 800ab1a:	462a      	mov	r2, r5
 800ab1c:	f000 fce6 	bl	800b4ec <_realloc_r>
 800ab20:	4606      	mov	r6, r0
 800ab22:	2800      	cmp	r0, #0
 800ab24:	d1e2      	bne.n	800aaec <__ssputs_r+0x70>
 800ab26:	6921      	ldr	r1, [r4, #16]
 800ab28:	4650      	mov	r0, sl
 800ab2a:	f7ff ff01 	bl	800a930 <_free_r>
 800ab2e:	e7c8      	b.n	800aac2 <__ssputs_r+0x46>

0800ab30 <_svfiprintf_r>:
 800ab30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab34:	461d      	mov	r5, r3
 800ab36:	898b      	ldrh	r3, [r1, #12]
 800ab38:	b09d      	sub	sp, #116	; 0x74
 800ab3a:	061f      	lsls	r7, r3, #24
 800ab3c:	4680      	mov	r8, r0
 800ab3e:	460c      	mov	r4, r1
 800ab40:	4616      	mov	r6, r2
 800ab42:	d50f      	bpl.n	800ab64 <_svfiprintf_r+0x34>
 800ab44:	690b      	ldr	r3, [r1, #16]
 800ab46:	b96b      	cbnz	r3, 800ab64 <_svfiprintf_r+0x34>
 800ab48:	2140      	movs	r1, #64	; 0x40
 800ab4a:	f7ff ff3d 	bl	800a9c8 <_malloc_r>
 800ab4e:	6020      	str	r0, [r4, #0]
 800ab50:	6120      	str	r0, [r4, #16]
 800ab52:	b928      	cbnz	r0, 800ab60 <_svfiprintf_r+0x30>
 800ab54:	230c      	movs	r3, #12
 800ab56:	f8c8 3000 	str.w	r3, [r8]
 800ab5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab5e:	e0c8      	b.n	800acf2 <_svfiprintf_r+0x1c2>
 800ab60:	2340      	movs	r3, #64	; 0x40
 800ab62:	6163      	str	r3, [r4, #20]
 800ab64:	2300      	movs	r3, #0
 800ab66:	9309      	str	r3, [sp, #36]	; 0x24
 800ab68:	2320      	movs	r3, #32
 800ab6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab6e:	2330      	movs	r3, #48	; 0x30
 800ab70:	f04f 0b01 	mov.w	fp, #1
 800ab74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab78:	9503      	str	r5, [sp, #12]
 800ab7a:	4637      	mov	r7, r6
 800ab7c:	463d      	mov	r5, r7
 800ab7e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ab82:	b10b      	cbz	r3, 800ab88 <_svfiprintf_r+0x58>
 800ab84:	2b25      	cmp	r3, #37	; 0x25
 800ab86:	d13e      	bne.n	800ac06 <_svfiprintf_r+0xd6>
 800ab88:	ebb7 0a06 	subs.w	sl, r7, r6
 800ab8c:	d00b      	beq.n	800aba6 <_svfiprintf_r+0x76>
 800ab8e:	4653      	mov	r3, sl
 800ab90:	4632      	mov	r2, r6
 800ab92:	4621      	mov	r1, r4
 800ab94:	4640      	mov	r0, r8
 800ab96:	f7ff ff71 	bl	800aa7c <__ssputs_r>
 800ab9a:	3001      	adds	r0, #1
 800ab9c:	f000 80a4 	beq.w	800ace8 <_svfiprintf_r+0x1b8>
 800aba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aba2:	4453      	add	r3, sl
 800aba4:	9309      	str	r3, [sp, #36]	; 0x24
 800aba6:	783b      	ldrb	r3, [r7, #0]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	f000 809d 	beq.w	800ace8 <_svfiprintf_r+0x1b8>
 800abae:	2300      	movs	r3, #0
 800abb0:	f04f 32ff 	mov.w	r2, #4294967295
 800abb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abb8:	9304      	str	r3, [sp, #16]
 800abba:	9307      	str	r3, [sp, #28]
 800abbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abc0:	931a      	str	r3, [sp, #104]	; 0x68
 800abc2:	462f      	mov	r7, r5
 800abc4:	2205      	movs	r2, #5
 800abc6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800abca:	4850      	ldr	r0, [pc, #320]	; (800ad0c <_svfiprintf_r+0x1dc>)
 800abcc:	f000 fc5a 	bl	800b484 <memchr>
 800abd0:	9b04      	ldr	r3, [sp, #16]
 800abd2:	b9d0      	cbnz	r0, 800ac0a <_svfiprintf_r+0xda>
 800abd4:	06d9      	lsls	r1, r3, #27
 800abd6:	bf44      	itt	mi
 800abd8:	2220      	movmi	r2, #32
 800abda:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800abde:	071a      	lsls	r2, r3, #28
 800abe0:	bf44      	itt	mi
 800abe2:	222b      	movmi	r2, #43	; 0x2b
 800abe4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800abe8:	782a      	ldrb	r2, [r5, #0]
 800abea:	2a2a      	cmp	r2, #42	; 0x2a
 800abec:	d015      	beq.n	800ac1a <_svfiprintf_r+0xea>
 800abee:	462f      	mov	r7, r5
 800abf0:	2000      	movs	r0, #0
 800abf2:	250a      	movs	r5, #10
 800abf4:	9a07      	ldr	r2, [sp, #28]
 800abf6:	4639      	mov	r1, r7
 800abf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abfc:	3b30      	subs	r3, #48	; 0x30
 800abfe:	2b09      	cmp	r3, #9
 800ac00:	d94d      	bls.n	800ac9e <_svfiprintf_r+0x16e>
 800ac02:	b1b8      	cbz	r0, 800ac34 <_svfiprintf_r+0x104>
 800ac04:	e00f      	b.n	800ac26 <_svfiprintf_r+0xf6>
 800ac06:	462f      	mov	r7, r5
 800ac08:	e7b8      	b.n	800ab7c <_svfiprintf_r+0x4c>
 800ac0a:	4a40      	ldr	r2, [pc, #256]	; (800ad0c <_svfiprintf_r+0x1dc>)
 800ac0c:	463d      	mov	r5, r7
 800ac0e:	1a80      	subs	r0, r0, r2
 800ac10:	fa0b f000 	lsl.w	r0, fp, r0
 800ac14:	4318      	orrs	r0, r3
 800ac16:	9004      	str	r0, [sp, #16]
 800ac18:	e7d3      	b.n	800abc2 <_svfiprintf_r+0x92>
 800ac1a:	9a03      	ldr	r2, [sp, #12]
 800ac1c:	1d11      	adds	r1, r2, #4
 800ac1e:	6812      	ldr	r2, [r2, #0]
 800ac20:	9103      	str	r1, [sp, #12]
 800ac22:	2a00      	cmp	r2, #0
 800ac24:	db01      	blt.n	800ac2a <_svfiprintf_r+0xfa>
 800ac26:	9207      	str	r2, [sp, #28]
 800ac28:	e004      	b.n	800ac34 <_svfiprintf_r+0x104>
 800ac2a:	4252      	negs	r2, r2
 800ac2c:	f043 0302 	orr.w	r3, r3, #2
 800ac30:	9207      	str	r2, [sp, #28]
 800ac32:	9304      	str	r3, [sp, #16]
 800ac34:	783b      	ldrb	r3, [r7, #0]
 800ac36:	2b2e      	cmp	r3, #46	; 0x2e
 800ac38:	d10c      	bne.n	800ac54 <_svfiprintf_r+0x124>
 800ac3a:	787b      	ldrb	r3, [r7, #1]
 800ac3c:	2b2a      	cmp	r3, #42	; 0x2a
 800ac3e:	d133      	bne.n	800aca8 <_svfiprintf_r+0x178>
 800ac40:	9b03      	ldr	r3, [sp, #12]
 800ac42:	3702      	adds	r7, #2
 800ac44:	1d1a      	adds	r2, r3, #4
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	9203      	str	r2, [sp, #12]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	bfb8      	it	lt
 800ac4e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac52:	9305      	str	r3, [sp, #20]
 800ac54:	4d2e      	ldr	r5, [pc, #184]	; (800ad10 <_svfiprintf_r+0x1e0>)
 800ac56:	2203      	movs	r2, #3
 800ac58:	7839      	ldrb	r1, [r7, #0]
 800ac5a:	4628      	mov	r0, r5
 800ac5c:	f000 fc12 	bl	800b484 <memchr>
 800ac60:	b138      	cbz	r0, 800ac72 <_svfiprintf_r+0x142>
 800ac62:	2340      	movs	r3, #64	; 0x40
 800ac64:	1b40      	subs	r0, r0, r5
 800ac66:	fa03 f000 	lsl.w	r0, r3, r0
 800ac6a:	9b04      	ldr	r3, [sp, #16]
 800ac6c:	3701      	adds	r7, #1
 800ac6e:	4303      	orrs	r3, r0
 800ac70:	9304      	str	r3, [sp, #16]
 800ac72:	7839      	ldrb	r1, [r7, #0]
 800ac74:	2206      	movs	r2, #6
 800ac76:	4827      	ldr	r0, [pc, #156]	; (800ad14 <_svfiprintf_r+0x1e4>)
 800ac78:	1c7e      	adds	r6, r7, #1
 800ac7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac7e:	f000 fc01 	bl	800b484 <memchr>
 800ac82:	2800      	cmp	r0, #0
 800ac84:	d038      	beq.n	800acf8 <_svfiprintf_r+0x1c8>
 800ac86:	4b24      	ldr	r3, [pc, #144]	; (800ad18 <_svfiprintf_r+0x1e8>)
 800ac88:	bb13      	cbnz	r3, 800acd0 <_svfiprintf_r+0x1a0>
 800ac8a:	9b03      	ldr	r3, [sp, #12]
 800ac8c:	3307      	adds	r3, #7
 800ac8e:	f023 0307 	bic.w	r3, r3, #7
 800ac92:	3308      	adds	r3, #8
 800ac94:	9303      	str	r3, [sp, #12]
 800ac96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac98:	444b      	add	r3, r9
 800ac9a:	9309      	str	r3, [sp, #36]	; 0x24
 800ac9c:	e76d      	b.n	800ab7a <_svfiprintf_r+0x4a>
 800ac9e:	fb05 3202 	mla	r2, r5, r2, r3
 800aca2:	2001      	movs	r0, #1
 800aca4:	460f      	mov	r7, r1
 800aca6:	e7a6      	b.n	800abf6 <_svfiprintf_r+0xc6>
 800aca8:	2300      	movs	r3, #0
 800acaa:	250a      	movs	r5, #10
 800acac:	4619      	mov	r1, r3
 800acae:	3701      	adds	r7, #1
 800acb0:	9305      	str	r3, [sp, #20]
 800acb2:	4638      	mov	r0, r7
 800acb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acb8:	3a30      	subs	r2, #48	; 0x30
 800acba:	2a09      	cmp	r2, #9
 800acbc:	d903      	bls.n	800acc6 <_svfiprintf_r+0x196>
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d0c8      	beq.n	800ac54 <_svfiprintf_r+0x124>
 800acc2:	9105      	str	r1, [sp, #20]
 800acc4:	e7c6      	b.n	800ac54 <_svfiprintf_r+0x124>
 800acc6:	fb05 2101 	mla	r1, r5, r1, r2
 800acca:	2301      	movs	r3, #1
 800accc:	4607      	mov	r7, r0
 800acce:	e7f0      	b.n	800acb2 <_svfiprintf_r+0x182>
 800acd0:	ab03      	add	r3, sp, #12
 800acd2:	9300      	str	r3, [sp, #0]
 800acd4:	4622      	mov	r2, r4
 800acd6:	4b11      	ldr	r3, [pc, #68]	; (800ad1c <_svfiprintf_r+0x1ec>)
 800acd8:	a904      	add	r1, sp, #16
 800acda:	4640      	mov	r0, r8
 800acdc:	f3af 8000 	nop.w
 800ace0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ace4:	4681      	mov	r9, r0
 800ace6:	d1d6      	bne.n	800ac96 <_svfiprintf_r+0x166>
 800ace8:	89a3      	ldrh	r3, [r4, #12]
 800acea:	065b      	lsls	r3, r3, #25
 800acec:	f53f af35 	bmi.w	800ab5a <_svfiprintf_r+0x2a>
 800acf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acf2:	b01d      	add	sp, #116	; 0x74
 800acf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acf8:	ab03      	add	r3, sp, #12
 800acfa:	9300      	str	r3, [sp, #0]
 800acfc:	4622      	mov	r2, r4
 800acfe:	4b07      	ldr	r3, [pc, #28]	; (800ad1c <_svfiprintf_r+0x1ec>)
 800ad00:	a904      	add	r1, sp, #16
 800ad02:	4640      	mov	r0, r8
 800ad04:	f000 f9c0 	bl	800b088 <_printf_i>
 800ad08:	e7ea      	b.n	800ace0 <_svfiprintf_r+0x1b0>
 800ad0a:	bf00      	nop
 800ad0c:	0800d322 	.word	0x0800d322
 800ad10:	0800d328 	.word	0x0800d328
 800ad14:	0800d32c 	.word	0x0800d32c
 800ad18:	00000000 	.word	0x00000000
 800ad1c:	0800aa7d 	.word	0x0800aa7d

0800ad20 <__sfputc_r>:
 800ad20:	6893      	ldr	r3, [r2, #8]
 800ad22:	b410      	push	{r4}
 800ad24:	3b01      	subs	r3, #1
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	6093      	str	r3, [r2, #8]
 800ad2a:	da07      	bge.n	800ad3c <__sfputc_r+0x1c>
 800ad2c:	6994      	ldr	r4, [r2, #24]
 800ad2e:	42a3      	cmp	r3, r4
 800ad30:	db01      	blt.n	800ad36 <__sfputc_r+0x16>
 800ad32:	290a      	cmp	r1, #10
 800ad34:	d102      	bne.n	800ad3c <__sfputc_r+0x1c>
 800ad36:	bc10      	pop	{r4}
 800ad38:	f7ff bb46 	b.w	800a3c8 <__swbuf_r>
 800ad3c:	6813      	ldr	r3, [r2, #0]
 800ad3e:	1c58      	adds	r0, r3, #1
 800ad40:	6010      	str	r0, [r2, #0]
 800ad42:	7019      	strb	r1, [r3, #0]
 800ad44:	4608      	mov	r0, r1
 800ad46:	bc10      	pop	{r4}
 800ad48:	4770      	bx	lr

0800ad4a <__sfputs_r>:
 800ad4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad4c:	4606      	mov	r6, r0
 800ad4e:	460f      	mov	r7, r1
 800ad50:	4614      	mov	r4, r2
 800ad52:	18d5      	adds	r5, r2, r3
 800ad54:	42ac      	cmp	r4, r5
 800ad56:	d101      	bne.n	800ad5c <__sfputs_r+0x12>
 800ad58:	2000      	movs	r0, #0
 800ad5a:	e007      	b.n	800ad6c <__sfputs_r+0x22>
 800ad5c:	463a      	mov	r2, r7
 800ad5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad62:	4630      	mov	r0, r6
 800ad64:	f7ff ffdc 	bl	800ad20 <__sfputc_r>
 800ad68:	1c43      	adds	r3, r0, #1
 800ad6a:	d1f3      	bne.n	800ad54 <__sfputs_r+0xa>
 800ad6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad70 <_vfiprintf_r>:
 800ad70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad74:	460c      	mov	r4, r1
 800ad76:	b09d      	sub	sp, #116	; 0x74
 800ad78:	4617      	mov	r7, r2
 800ad7a:	461d      	mov	r5, r3
 800ad7c:	4606      	mov	r6, r0
 800ad7e:	b118      	cbz	r0, 800ad88 <_vfiprintf_r+0x18>
 800ad80:	6983      	ldr	r3, [r0, #24]
 800ad82:	b90b      	cbnz	r3, 800ad88 <_vfiprintf_r+0x18>
 800ad84:	f7ff fcd0 	bl	800a728 <__sinit>
 800ad88:	4b7c      	ldr	r3, [pc, #496]	; (800af7c <_vfiprintf_r+0x20c>)
 800ad8a:	429c      	cmp	r4, r3
 800ad8c:	d158      	bne.n	800ae40 <_vfiprintf_r+0xd0>
 800ad8e:	6874      	ldr	r4, [r6, #4]
 800ad90:	89a3      	ldrh	r3, [r4, #12]
 800ad92:	0718      	lsls	r0, r3, #28
 800ad94:	d55e      	bpl.n	800ae54 <_vfiprintf_r+0xe4>
 800ad96:	6923      	ldr	r3, [r4, #16]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d05b      	beq.n	800ae54 <_vfiprintf_r+0xe4>
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	9309      	str	r3, [sp, #36]	; 0x24
 800ada0:	2320      	movs	r3, #32
 800ada2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ada6:	2330      	movs	r3, #48	; 0x30
 800ada8:	f04f 0b01 	mov.w	fp, #1
 800adac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adb0:	9503      	str	r5, [sp, #12]
 800adb2:	46b8      	mov	r8, r7
 800adb4:	4645      	mov	r5, r8
 800adb6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800adba:	b10b      	cbz	r3, 800adc0 <_vfiprintf_r+0x50>
 800adbc:	2b25      	cmp	r3, #37	; 0x25
 800adbe:	d154      	bne.n	800ae6a <_vfiprintf_r+0xfa>
 800adc0:	ebb8 0a07 	subs.w	sl, r8, r7
 800adc4:	d00b      	beq.n	800adde <_vfiprintf_r+0x6e>
 800adc6:	4653      	mov	r3, sl
 800adc8:	463a      	mov	r2, r7
 800adca:	4621      	mov	r1, r4
 800adcc:	4630      	mov	r0, r6
 800adce:	f7ff ffbc 	bl	800ad4a <__sfputs_r>
 800add2:	3001      	adds	r0, #1
 800add4:	f000 80c2 	beq.w	800af5c <_vfiprintf_r+0x1ec>
 800add8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adda:	4453      	add	r3, sl
 800addc:	9309      	str	r3, [sp, #36]	; 0x24
 800adde:	f898 3000 	ldrb.w	r3, [r8]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	f000 80ba 	beq.w	800af5c <_vfiprintf_r+0x1ec>
 800ade8:	2300      	movs	r3, #0
 800adea:	f04f 32ff 	mov.w	r2, #4294967295
 800adee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adf2:	9304      	str	r3, [sp, #16]
 800adf4:	9307      	str	r3, [sp, #28]
 800adf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adfa:	931a      	str	r3, [sp, #104]	; 0x68
 800adfc:	46a8      	mov	r8, r5
 800adfe:	2205      	movs	r2, #5
 800ae00:	f818 1b01 	ldrb.w	r1, [r8], #1
 800ae04:	485e      	ldr	r0, [pc, #376]	; (800af80 <_vfiprintf_r+0x210>)
 800ae06:	f000 fb3d 	bl	800b484 <memchr>
 800ae0a:	9b04      	ldr	r3, [sp, #16]
 800ae0c:	bb78      	cbnz	r0, 800ae6e <_vfiprintf_r+0xfe>
 800ae0e:	06d9      	lsls	r1, r3, #27
 800ae10:	bf44      	itt	mi
 800ae12:	2220      	movmi	r2, #32
 800ae14:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ae18:	071a      	lsls	r2, r3, #28
 800ae1a:	bf44      	itt	mi
 800ae1c:	222b      	movmi	r2, #43	; 0x2b
 800ae1e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ae22:	782a      	ldrb	r2, [r5, #0]
 800ae24:	2a2a      	cmp	r2, #42	; 0x2a
 800ae26:	d02a      	beq.n	800ae7e <_vfiprintf_r+0x10e>
 800ae28:	46a8      	mov	r8, r5
 800ae2a:	2000      	movs	r0, #0
 800ae2c:	250a      	movs	r5, #10
 800ae2e:	9a07      	ldr	r2, [sp, #28]
 800ae30:	4641      	mov	r1, r8
 800ae32:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae36:	3b30      	subs	r3, #48	; 0x30
 800ae38:	2b09      	cmp	r3, #9
 800ae3a:	d969      	bls.n	800af10 <_vfiprintf_r+0x1a0>
 800ae3c:	b360      	cbz	r0, 800ae98 <_vfiprintf_r+0x128>
 800ae3e:	e024      	b.n	800ae8a <_vfiprintf_r+0x11a>
 800ae40:	4b50      	ldr	r3, [pc, #320]	; (800af84 <_vfiprintf_r+0x214>)
 800ae42:	429c      	cmp	r4, r3
 800ae44:	d101      	bne.n	800ae4a <_vfiprintf_r+0xda>
 800ae46:	68b4      	ldr	r4, [r6, #8]
 800ae48:	e7a2      	b.n	800ad90 <_vfiprintf_r+0x20>
 800ae4a:	4b4f      	ldr	r3, [pc, #316]	; (800af88 <_vfiprintf_r+0x218>)
 800ae4c:	429c      	cmp	r4, r3
 800ae4e:	bf08      	it	eq
 800ae50:	68f4      	ldreq	r4, [r6, #12]
 800ae52:	e79d      	b.n	800ad90 <_vfiprintf_r+0x20>
 800ae54:	4621      	mov	r1, r4
 800ae56:	4630      	mov	r0, r6
 800ae58:	f7ff fb08 	bl	800a46c <__swsetup_r>
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	d09d      	beq.n	800ad9c <_vfiprintf_r+0x2c>
 800ae60:	f04f 30ff 	mov.w	r0, #4294967295
 800ae64:	b01d      	add	sp, #116	; 0x74
 800ae66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae6a:	46a8      	mov	r8, r5
 800ae6c:	e7a2      	b.n	800adb4 <_vfiprintf_r+0x44>
 800ae6e:	4a44      	ldr	r2, [pc, #272]	; (800af80 <_vfiprintf_r+0x210>)
 800ae70:	4645      	mov	r5, r8
 800ae72:	1a80      	subs	r0, r0, r2
 800ae74:	fa0b f000 	lsl.w	r0, fp, r0
 800ae78:	4318      	orrs	r0, r3
 800ae7a:	9004      	str	r0, [sp, #16]
 800ae7c:	e7be      	b.n	800adfc <_vfiprintf_r+0x8c>
 800ae7e:	9a03      	ldr	r2, [sp, #12]
 800ae80:	1d11      	adds	r1, r2, #4
 800ae82:	6812      	ldr	r2, [r2, #0]
 800ae84:	9103      	str	r1, [sp, #12]
 800ae86:	2a00      	cmp	r2, #0
 800ae88:	db01      	blt.n	800ae8e <_vfiprintf_r+0x11e>
 800ae8a:	9207      	str	r2, [sp, #28]
 800ae8c:	e004      	b.n	800ae98 <_vfiprintf_r+0x128>
 800ae8e:	4252      	negs	r2, r2
 800ae90:	f043 0302 	orr.w	r3, r3, #2
 800ae94:	9207      	str	r2, [sp, #28]
 800ae96:	9304      	str	r3, [sp, #16]
 800ae98:	f898 3000 	ldrb.w	r3, [r8]
 800ae9c:	2b2e      	cmp	r3, #46	; 0x2e
 800ae9e:	d10e      	bne.n	800aebe <_vfiprintf_r+0x14e>
 800aea0:	f898 3001 	ldrb.w	r3, [r8, #1]
 800aea4:	2b2a      	cmp	r3, #42	; 0x2a
 800aea6:	d138      	bne.n	800af1a <_vfiprintf_r+0x1aa>
 800aea8:	9b03      	ldr	r3, [sp, #12]
 800aeaa:	f108 0802 	add.w	r8, r8, #2
 800aeae:	1d1a      	adds	r2, r3, #4
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	9203      	str	r2, [sp, #12]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	bfb8      	it	lt
 800aeb8:	f04f 33ff 	movlt.w	r3, #4294967295
 800aebc:	9305      	str	r3, [sp, #20]
 800aebe:	4d33      	ldr	r5, [pc, #204]	; (800af8c <_vfiprintf_r+0x21c>)
 800aec0:	2203      	movs	r2, #3
 800aec2:	f898 1000 	ldrb.w	r1, [r8]
 800aec6:	4628      	mov	r0, r5
 800aec8:	f000 fadc 	bl	800b484 <memchr>
 800aecc:	b140      	cbz	r0, 800aee0 <_vfiprintf_r+0x170>
 800aece:	2340      	movs	r3, #64	; 0x40
 800aed0:	1b40      	subs	r0, r0, r5
 800aed2:	fa03 f000 	lsl.w	r0, r3, r0
 800aed6:	9b04      	ldr	r3, [sp, #16]
 800aed8:	f108 0801 	add.w	r8, r8, #1
 800aedc:	4303      	orrs	r3, r0
 800aede:	9304      	str	r3, [sp, #16]
 800aee0:	f898 1000 	ldrb.w	r1, [r8]
 800aee4:	2206      	movs	r2, #6
 800aee6:	482a      	ldr	r0, [pc, #168]	; (800af90 <_vfiprintf_r+0x220>)
 800aee8:	f108 0701 	add.w	r7, r8, #1
 800aeec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aef0:	f000 fac8 	bl	800b484 <memchr>
 800aef4:	2800      	cmp	r0, #0
 800aef6:	d037      	beq.n	800af68 <_vfiprintf_r+0x1f8>
 800aef8:	4b26      	ldr	r3, [pc, #152]	; (800af94 <_vfiprintf_r+0x224>)
 800aefa:	bb1b      	cbnz	r3, 800af44 <_vfiprintf_r+0x1d4>
 800aefc:	9b03      	ldr	r3, [sp, #12]
 800aefe:	3307      	adds	r3, #7
 800af00:	f023 0307 	bic.w	r3, r3, #7
 800af04:	3308      	adds	r3, #8
 800af06:	9303      	str	r3, [sp, #12]
 800af08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af0a:	444b      	add	r3, r9
 800af0c:	9309      	str	r3, [sp, #36]	; 0x24
 800af0e:	e750      	b.n	800adb2 <_vfiprintf_r+0x42>
 800af10:	fb05 3202 	mla	r2, r5, r2, r3
 800af14:	2001      	movs	r0, #1
 800af16:	4688      	mov	r8, r1
 800af18:	e78a      	b.n	800ae30 <_vfiprintf_r+0xc0>
 800af1a:	2300      	movs	r3, #0
 800af1c:	250a      	movs	r5, #10
 800af1e:	4619      	mov	r1, r3
 800af20:	f108 0801 	add.w	r8, r8, #1
 800af24:	9305      	str	r3, [sp, #20]
 800af26:	4640      	mov	r0, r8
 800af28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af2c:	3a30      	subs	r2, #48	; 0x30
 800af2e:	2a09      	cmp	r2, #9
 800af30:	d903      	bls.n	800af3a <_vfiprintf_r+0x1ca>
 800af32:	2b00      	cmp	r3, #0
 800af34:	d0c3      	beq.n	800aebe <_vfiprintf_r+0x14e>
 800af36:	9105      	str	r1, [sp, #20]
 800af38:	e7c1      	b.n	800aebe <_vfiprintf_r+0x14e>
 800af3a:	fb05 2101 	mla	r1, r5, r1, r2
 800af3e:	2301      	movs	r3, #1
 800af40:	4680      	mov	r8, r0
 800af42:	e7f0      	b.n	800af26 <_vfiprintf_r+0x1b6>
 800af44:	ab03      	add	r3, sp, #12
 800af46:	9300      	str	r3, [sp, #0]
 800af48:	4622      	mov	r2, r4
 800af4a:	4b13      	ldr	r3, [pc, #76]	; (800af98 <_vfiprintf_r+0x228>)
 800af4c:	a904      	add	r1, sp, #16
 800af4e:	4630      	mov	r0, r6
 800af50:	f3af 8000 	nop.w
 800af54:	f1b0 3fff 	cmp.w	r0, #4294967295
 800af58:	4681      	mov	r9, r0
 800af5a:	d1d5      	bne.n	800af08 <_vfiprintf_r+0x198>
 800af5c:	89a3      	ldrh	r3, [r4, #12]
 800af5e:	065b      	lsls	r3, r3, #25
 800af60:	f53f af7e 	bmi.w	800ae60 <_vfiprintf_r+0xf0>
 800af64:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af66:	e77d      	b.n	800ae64 <_vfiprintf_r+0xf4>
 800af68:	ab03      	add	r3, sp, #12
 800af6a:	9300      	str	r3, [sp, #0]
 800af6c:	4622      	mov	r2, r4
 800af6e:	4b0a      	ldr	r3, [pc, #40]	; (800af98 <_vfiprintf_r+0x228>)
 800af70:	a904      	add	r1, sp, #16
 800af72:	4630      	mov	r0, r6
 800af74:	f000 f888 	bl	800b088 <_printf_i>
 800af78:	e7ec      	b.n	800af54 <_vfiprintf_r+0x1e4>
 800af7a:	bf00      	nop
 800af7c:	0800d2d8 	.word	0x0800d2d8
 800af80:	0800d322 	.word	0x0800d322
 800af84:	0800d2f8 	.word	0x0800d2f8
 800af88:	0800d2b8 	.word	0x0800d2b8
 800af8c:	0800d328 	.word	0x0800d328
 800af90:	0800d32c 	.word	0x0800d32c
 800af94:	00000000 	.word	0x00000000
 800af98:	0800ad4b 	.word	0x0800ad4b

0800af9c <_printf_common>:
 800af9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afa0:	4691      	mov	r9, r2
 800afa2:	461f      	mov	r7, r3
 800afa4:	688a      	ldr	r2, [r1, #8]
 800afa6:	690b      	ldr	r3, [r1, #16]
 800afa8:	4606      	mov	r6, r0
 800afaa:	4293      	cmp	r3, r2
 800afac:	bfb8      	it	lt
 800afae:	4613      	movlt	r3, r2
 800afb0:	f8c9 3000 	str.w	r3, [r9]
 800afb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800afb8:	460c      	mov	r4, r1
 800afba:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800afbe:	b112      	cbz	r2, 800afc6 <_printf_common+0x2a>
 800afc0:	3301      	adds	r3, #1
 800afc2:	f8c9 3000 	str.w	r3, [r9]
 800afc6:	6823      	ldr	r3, [r4, #0]
 800afc8:	0699      	lsls	r1, r3, #26
 800afca:	bf42      	ittt	mi
 800afcc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800afd0:	3302      	addmi	r3, #2
 800afd2:	f8c9 3000 	strmi.w	r3, [r9]
 800afd6:	6825      	ldr	r5, [r4, #0]
 800afd8:	f015 0506 	ands.w	r5, r5, #6
 800afdc:	d107      	bne.n	800afee <_printf_common+0x52>
 800afde:	f104 0a19 	add.w	sl, r4, #25
 800afe2:	68e3      	ldr	r3, [r4, #12]
 800afe4:	f8d9 2000 	ldr.w	r2, [r9]
 800afe8:	1a9b      	subs	r3, r3, r2
 800afea:	42ab      	cmp	r3, r5
 800afec:	dc29      	bgt.n	800b042 <_printf_common+0xa6>
 800afee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800aff2:	6822      	ldr	r2, [r4, #0]
 800aff4:	3300      	adds	r3, #0
 800aff6:	bf18      	it	ne
 800aff8:	2301      	movne	r3, #1
 800affa:	0692      	lsls	r2, r2, #26
 800affc:	d42e      	bmi.n	800b05c <_printf_common+0xc0>
 800affe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b002:	4639      	mov	r1, r7
 800b004:	4630      	mov	r0, r6
 800b006:	47c0      	blx	r8
 800b008:	3001      	adds	r0, #1
 800b00a:	d021      	beq.n	800b050 <_printf_common+0xb4>
 800b00c:	6823      	ldr	r3, [r4, #0]
 800b00e:	68e5      	ldr	r5, [r4, #12]
 800b010:	f003 0306 	and.w	r3, r3, #6
 800b014:	2b04      	cmp	r3, #4
 800b016:	bf18      	it	ne
 800b018:	2500      	movne	r5, #0
 800b01a:	f8d9 2000 	ldr.w	r2, [r9]
 800b01e:	f04f 0900 	mov.w	r9, #0
 800b022:	bf08      	it	eq
 800b024:	1aad      	subeq	r5, r5, r2
 800b026:	68a3      	ldr	r3, [r4, #8]
 800b028:	6922      	ldr	r2, [r4, #16]
 800b02a:	bf08      	it	eq
 800b02c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b030:	4293      	cmp	r3, r2
 800b032:	bfc4      	itt	gt
 800b034:	1a9b      	subgt	r3, r3, r2
 800b036:	18ed      	addgt	r5, r5, r3
 800b038:	341a      	adds	r4, #26
 800b03a:	454d      	cmp	r5, r9
 800b03c:	d11a      	bne.n	800b074 <_printf_common+0xd8>
 800b03e:	2000      	movs	r0, #0
 800b040:	e008      	b.n	800b054 <_printf_common+0xb8>
 800b042:	2301      	movs	r3, #1
 800b044:	4652      	mov	r2, sl
 800b046:	4639      	mov	r1, r7
 800b048:	4630      	mov	r0, r6
 800b04a:	47c0      	blx	r8
 800b04c:	3001      	adds	r0, #1
 800b04e:	d103      	bne.n	800b058 <_printf_common+0xbc>
 800b050:	f04f 30ff 	mov.w	r0, #4294967295
 800b054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b058:	3501      	adds	r5, #1
 800b05a:	e7c2      	b.n	800afe2 <_printf_common+0x46>
 800b05c:	2030      	movs	r0, #48	; 0x30
 800b05e:	18e1      	adds	r1, r4, r3
 800b060:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b064:	1c5a      	adds	r2, r3, #1
 800b066:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b06a:	4422      	add	r2, r4
 800b06c:	3302      	adds	r3, #2
 800b06e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b072:	e7c4      	b.n	800affe <_printf_common+0x62>
 800b074:	2301      	movs	r3, #1
 800b076:	4622      	mov	r2, r4
 800b078:	4639      	mov	r1, r7
 800b07a:	4630      	mov	r0, r6
 800b07c:	47c0      	blx	r8
 800b07e:	3001      	adds	r0, #1
 800b080:	d0e6      	beq.n	800b050 <_printf_common+0xb4>
 800b082:	f109 0901 	add.w	r9, r9, #1
 800b086:	e7d8      	b.n	800b03a <_printf_common+0x9e>

0800b088 <_printf_i>:
 800b088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b08c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b090:	460c      	mov	r4, r1
 800b092:	7e09      	ldrb	r1, [r1, #24]
 800b094:	b085      	sub	sp, #20
 800b096:	296e      	cmp	r1, #110	; 0x6e
 800b098:	4617      	mov	r7, r2
 800b09a:	4606      	mov	r6, r0
 800b09c:	4698      	mov	r8, r3
 800b09e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0a0:	f000 80b3 	beq.w	800b20a <_printf_i+0x182>
 800b0a4:	d822      	bhi.n	800b0ec <_printf_i+0x64>
 800b0a6:	2963      	cmp	r1, #99	; 0x63
 800b0a8:	d036      	beq.n	800b118 <_printf_i+0x90>
 800b0aa:	d80a      	bhi.n	800b0c2 <_printf_i+0x3a>
 800b0ac:	2900      	cmp	r1, #0
 800b0ae:	f000 80b9 	beq.w	800b224 <_printf_i+0x19c>
 800b0b2:	2958      	cmp	r1, #88	; 0x58
 800b0b4:	f000 8083 	beq.w	800b1be <_printf_i+0x136>
 800b0b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b0c0:	e032      	b.n	800b128 <_printf_i+0xa0>
 800b0c2:	2964      	cmp	r1, #100	; 0x64
 800b0c4:	d001      	beq.n	800b0ca <_printf_i+0x42>
 800b0c6:	2969      	cmp	r1, #105	; 0x69
 800b0c8:	d1f6      	bne.n	800b0b8 <_printf_i+0x30>
 800b0ca:	6820      	ldr	r0, [r4, #0]
 800b0cc:	6813      	ldr	r3, [r2, #0]
 800b0ce:	0605      	lsls	r5, r0, #24
 800b0d0:	f103 0104 	add.w	r1, r3, #4
 800b0d4:	d52a      	bpl.n	800b12c <_printf_i+0xa4>
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	6011      	str	r1, [r2, #0]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	da03      	bge.n	800b0e6 <_printf_i+0x5e>
 800b0de:	222d      	movs	r2, #45	; 0x2d
 800b0e0:	425b      	negs	r3, r3
 800b0e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b0e6:	486f      	ldr	r0, [pc, #444]	; (800b2a4 <_printf_i+0x21c>)
 800b0e8:	220a      	movs	r2, #10
 800b0ea:	e039      	b.n	800b160 <_printf_i+0xd8>
 800b0ec:	2973      	cmp	r1, #115	; 0x73
 800b0ee:	f000 809d 	beq.w	800b22c <_printf_i+0x1a4>
 800b0f2:	d808      	bhi.n	800b106 <_printf_i+0x7e>
 800b0f4:	296f      	cmp	r1, #111	; 0x6f
 800b0f6:	d020      	beq.n	800b13a <_printf_i+0xb2>
 800b0f8:	2970      	cmp	r1, #112	; 0x70
 800b0fa:	d1dd      	bne.n	800b0b8 <_printf_i+0x30>
 800b0fc:	6823      	ldr	r3, [r4, #0]
 800b0fe:	f043 0320 	orr.w	r3, r3, #32
 800b102:	6023      	str	r3, [r4, #0]
 800b104:	e003      	b.n	800b10e <_printf_i+0x86>
 800b106:	2975      	cmp	r1, #117	; 0x75
 800b108:	d017      	beq.n	800b13a <_printf_i+0xb2>
 800b10a:	2978      	cmp	r1, #120	; 0x78
 800b10c:	d1d4      	bne.n	800b0b8 <_printf_i+0x30>
 800b10e:	2378      	movs	r3, #120	; 0x78
 800b110:	4865      	ldr	r0, [pc, #404]	; (800b2a8 <_printf_i+0x220>)
 800b112:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b116:	e055      	b.n	800b1c4 <_printf_i+0x13c>
 800b118:	6813      	ldr	r3, [r2, #0]
 800b11a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b11e:	1d19      	adds	r1, r3, #4
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	6011      	str	r1, [r2, #0]
 800b124:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b128:	2301      	movs	r3, #1
 800b12a:	e08c      	b.n	800b246 <_printf_i+0x1be>
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b132:	6011      	str	r1, [r2, #0]
 800b134:	bf18      	it	ne
 800b136:	b21b      	sxthne	r3, r3
 800b138:	e7cf      	b.n	800b0da <_printf_i+0x52>
 800b13a:	6813      	ldr	r3, [r2, #0]
 800b13c:	6825      	ldr	r5, [r4, #0]
 800b13e:	1d18      	adds	r0, r3, #4
 800b140:	6010      	str	r0, [r2, #0]
 800b142:	0628      	lsls	r0, r5, #24
 800b144:	d501      	bpl.n	800b14a <_printf_i+0xc2>
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	e002      	b.n	800b150 <_printf_i+0xc8>
 800b14a:	0668      	lsls	r0, r5, #25
 800b14c:	d5fb      	bpl.n	800b146 <_printf_i+0xbe>
 800b14e:	881b      	ldrh	r3, [r3, #0]
 800b150:	296f      	cmp	r1, #111	; 0x6f
 800b152:	bf14      	ite	ne
 800b154:	220a      	movne	r2, #10
 800b156:	2208      	moveq	r2, #8
 800b158:	4852      	ldr	r0, [pc, #328]	; (800b2a4 <_printf_i+0x21c>)
 800b15a:	2100      	movs	r1, #0
 800b15c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b160:	6865      	ldr	r5, [r4, #4]
 800b162:	2d00      	cmp	r5, #0
 800b164:	60a5      	str	r5, [r4, #8]
 800b166:	f2c0 8095 	blt.w	800b294 <_printf_i+0x20c>
 800b16a:	6821      	ldr	r1, [r4, #0]
 800b16c:	f021 0104 	bic.w	r1, r1, #4
 800b170:	6021      	str	r1, [r4, #0]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d13d      	bne.n	800b1f2 <_printf_i+0x16a>
 800b176:	2d00      	cmp	r5, #0
 800b178:	f040 808e 	bne.w	800b298 <_printf_i+0x210>
 800b17c:	4665      	mov	r5, ip
 800b17e:	2a08      	cmp	r2, #8
 800b180:	d10b      	bne.n	800b19a <_printf_i+0x112>
 800b182:	6823      	ldr	r3, [r4, #0]
 800b184:	07db      	lsls	r3, r3, #31
 800b186:	d508      	bpl.n	800b19a <_printf_i+0x112>
 800b188:	6923      	ldr	r3, [r4, #16]
 800b18a:	6862      	ldr	r2, [r4, #4]
 800b18c:	429a      	cmp	r2, r3
 800b18e:	bfde      	ittt	le
 800b190:	2330      	movle	r3, #48	; 0x30
 800b192:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b196:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b19a:	ebac 0305 	sub.w	r3, ip, r5
 800b19e:	6123      	str	r3, [r4, #16]
 800b1a0:	f8cd 8000 	str.w	r8, [sp]
 800b1a4:	463b      	mov	r3, r7
 800b1a6:	aa03      	add	r2, sp, #12
 800b1a8:	4621      	mov	r1, r4
 800b1aa:	4630      	mov	r0, r6
 800b1ac:	f7ff fef6 	bl	800af9c <_printf_common>
 800b1b0:	3001      	adds	r0, #1
 800b1b2:	d14d      	bne.n	800b250 <_printf_i+0x1c8>
 800b1b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1b8:	b005      	add	sp, #20
 800b1ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1be:	4839      	ldr	r0, [pc, #228]	; (800b2a4 <_printf_i+0x21c>)
 800b1c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b1c4:	6813      	ldr	r3, [r2, #0]
 800b1c6:	6821      	ldr	r1, [r4, #0]
 800b1c8:	1d1d      	adds	r5, r3, #4
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	6015      	str	r5, [r2, #0]
 800b1ce:	060a      	lsls	r2, r1, #24
 800b1d0:	d50b      	bpl.n	800b1ea <_printf_i+0x162>
 800b1d2:	07ca      	lsls	r2, r1, #31
 800b1d4:	bf44      	itt	mi
 800b1d6:	f041 0120 	orrmi.w	r1, r1, #32
 800b1da:	6021      	strmi	r1, [r4, #0]
 800b1dc:	b91b      	cbnz	r3, 800b1e6 <_printf_i+0x15e>
 800b1de:	6822      	ldr	r2, [r4, #0]
 800b1e0:	f022 0220 	bic.w	r2, r2, #32
 800b1e4:	6022      	str	r2, [r4, #0]
 800b1e6:	2210      	movs	r2, #16
 800b1e8:	e7b7      	b.n	800b15a <_printf_i+0xd2>
 800b1ea:	064d      	lsls	r5, r1, #25
 800b1ec:	bf48      	it	mi
 800b1ee:	b29b      	uxthmi	r3, r3
 800b1f0:	e7ef      	b.n	800b1d2 <_printf_i+0x14a>
 800b1f2:	4665      	mov	r5, ip
 800b1f4:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1f8:	fb02 3311 	mls	r3, r2, r1, r3
 800b1fc:	5cc3      	ldrb	r3, [r0, r3]
 800b1fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b202:	460b      	mov	r3, r1
 800b204:	2900      	cmp	r1, #0
 800b206:	d1f5      	bne.n	800b1f4 <_printf_i+0x16c>
 800b208:	e7b9      	b.n	800b17e <_printf_i+0xf6>
 800b20a:	6813      	ldr	r3, [r2, #0]
 800b20c:	6825      	ldr	r5, [r4, #0]
 800b20e:	1d18      	adds	r0, r3, #4
 800b210:	6961      	ldr	r1, [r4, #20]
 800b212:	6010      	str	r0, [r2, #0]
 800b214:	0628      	lsls	r0, r5, #24
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	d501      	bpl.n	800b21e <_printf_i+0x196>
 800b21a:	6019      	str	r1, [r3, #0]
 800b21c:	e002      	b.n	800b224 <_printf_i+0x19c>
 800b21e:	066a      	lsls	r2, r5, #25
 800b220:	d5fb      	bpl.n	800b21a <_printf_i+0x192>
 800b222:	8019      	strh	r1, [r3, #0]
 800b224:	2300      	movs	r3, #0
 800b226:	4665      	mov	r5, ip
 800b228:	6123      	str	r3, [r4, #16]
 800b22a:	e7b9      	b.n	800b1a0 <_printf_i+0x118>
 800b22c:	6813      	ldr	r3, [r2, #0]
 800b22e:	1d19      	adds	r1, r3, #4
 800b230:	6011      	str	r1, [r2, #0]
 800b232:	681d      	ldr	r5, [r3, #0]
 800b234:	6862      	ldr	r2, [r4, #4]
 800b236:	2100      	movs	r1, #0
 800b238:	4628      	mov	r0, r5
 800b23a:	f000 f923 	bl	800b484 <memchr>
 800b23e:	b108      	cbz	r0, 800b244 <_printf_i+0x1bc>
 800b240:	1b40      	subs	r0, r0, r5
 800b242:	6060      	str	r0, [r4, #4]
 800b244:	6863      	ldr	r3, [r4, #4]
 800b246:	6123      	str	r3, [r4, #16]
 800b248:	2300      	movs	r3, #0
 800b24a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b24e:	e7a7      	b.n	800b1a0 <_printf_i+0x118>
 800b250:	6923      	ldr	r3, [r4, #16]
 800b252:	462a      	mov	r2, r5
 800b254:	4639      	mov	r1, r7
 800b256:	4630      	mov	r0, r6
 800b258:	47c0      	blx	r8
 800b25a:	3001      	adds	r0, #1
 800b25c:	d0aa      	beq.n	800b1b4 <_printf_i+0x12c>
 800b25e:	6823      	ldr	r3, [r4, #0]
 800b260:	079b      	lsls	r3, r3, #30
 800b262:	d413      	bmi.n	800b28c <_printf_i+0x204>
 800b264:	68e0      	ldr	r0, [r4, #12]
 800b266:	9b03      	ldr	r3, [sp, #12]
 800b268:	4298      	cmp	r0, r3
 800b26a:	bfb8      	it	lt
 800b26c:	4618      	movlt	r0, r3
 800b26e:	e7a3      	b.n	800b1b8 <_printf_i+0x130>
 800b270:	2301      	movs	r3, #1
 800b272:	464a      	mov	r2, r9
 800b274:	4639      	mov	r1, r7
 800b276:	4630      	mov	r0, r6
 800b278:	47c0      	blx	r8
 800b27a:	3001      	adds	r0, #1
 800b27c:	d09a      	beq.n	800b1b4 <_printf_i+0x12c>
 800b27e:	3501      	adds	r5, #1
 800b280:	68e3      	ldr	r3, [r4, #12]
 800b282:	9a03      	ldr	r2, [sp, #12]
 800b284:	1a9b      	subs	r3, r3, r2
 800b286:	42ab      	cmp	r3, r5
 800b288:	dcf2      	bgt.n	800b270 <_printf_i+0x1e8>
 800b28a:	e7eb      	b.n	800b264 <_printf_i+0x1dc>
 800b28c:	2500      	movs	r5, #0
 800b28e:	f104 0919 	add.w	r9, r4, #25
 800b292:	e7f5      	b.n	800b280 <_printf_i+0x1f8>
 800b294:	2b00      	cmp	r3, #0
 800b296:	d1ac      	bne.n	800b1f2 <_printf_i+0x16a>
 800b298:	7803      	ldrb	r3, [r0, #0]
 800b29a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b29e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b2a2:	e76c      	b.n	800b17e <_printf_i+0xf6>
 800b2a4:	0800d333 	.word	0x0800d333
 800b2a8:	0800d344 	.word	0x0800d344

0800b2ac <_putc_r>:
 800b2ac:	b570      	push	{r4, r5, r6, lr}
 800b2ae:	460d      	mov	r5, r1
 800b2b0:	4614      	mov	r4, r2
 800b2b2:	4606      	mov	r6, r0
 800b2b4:	b118      	cbz	r0, 800b2be <_putc_r+0x12>
 800b2b6:	6983      	ldr	r3, [r0, #24]
 800b2b8:	b90b      	cbnz	r3, 800b2be <_putc_r+0x12>
 800b2ba:	f7ff fa35 	bl	800a728 <__sinit>
 800b2be:	4b13      	ldr	r3, [pc, #76]	; (800b30c <_putc_r+0x60>)
 800b2c0:	429c      	cmp	r4, r3
 800b2c2:	d112      	bne.n	800b2ea <_putc_r+0x3e>
 800b2c4:	6874      	ldr	r4, [r6, #4]
 800b2c6:	68a3      	ldr	r3, [r4, #8]
 800b2c8:	3b01      	subs	r3, #1
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	60a3      	str	r3, [r4, #8]
 800b2ce:	da16      	bge.n	800b2fe <_putc_r+0x52>
 800b2d0:	69a2      	ldr	r2, [r4, #24]
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	db02      	blt.n	800b2dc <_putc_r+0x30>
 800b2d6:	b2eb      	uxtb	r3, r5
 800b2d8:	2b0a      	cmp	r3, #10
 800b2da:	d110      	bne.n	800b2fe <_putc_r+0x52>
 800b2dc:	4622      	mov	r2, r4
 800b2de:	4629      	mov	r1, r5
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b2e6:	f7ff b86f 	b.w	800a3c8 <__swbuf_r>
 800b2ea:	4b09      	ldr	r3, [pc, #36]	; (800b310 <_putc_r+0x64>)
 800b2ec:	429c      	cmp	r4, r3
 800b2ee:	d101      	bne.n	800b2f4 <_putc_r+0x48>
 800b2f0:	68b4      	ldr	r4, [r6, #8]
 800b2f2:	e7e8      	b.n	800b2c6 <_putc_r+0x1a>
 800b2f4:	4b07      	ldr	r3, [pc, #28]	; (800b314 <_putc_r+0x68>)
 800b2f6:	429c      	cmp	r4, r3
 800b2f8:	bf08      	it	eq
 800b2fa:	68f4      	ldreq	r4, [r6, #12]
 800b2fc:	e7e3      	b.n	800b2c6 <_putc_r+0x1a>
 800b2fe:	6823      	ldr	r3, [r4, #0]
 800b300:	b2e8      	uxtb	r0, r5
 800b302:	1c5a      	adds	r2, r3, #1
 800b304:	6022      	str	r2, [r4, #0]
 800b306:	701d      	strb	r5, [r3, #0]
 800b308:	bd70      	pop	{r4, r5, r6, pc}
 800b30a:	bf00      	nop
 800b30c:	0800d2d8 	.word	0x0800d2d8
 800b310:	0800d2f8 	.word	0x0800d2f8
 800b314:	0800d2b8 	.word	0x0800d2b8

0800b318 <_sbrk_r>:
 800b318:	b538      	push	{r3, r4, r5, lr}
 800b31a:	2300      	movs	r3, #0
 800b31c:	4c05      	ldr	r4, [pc, #20]	; (800b334 <_sbrk_r+0x1c>)
 800b31e:	4605      	mov	r5, r0
 800b320:	4608      	mov	r0, r1
 800b322:	6023      	str	r3, [r4, #0]
 800b324:	f7fc fd60 	bl	8007de8 <_sbrk>
 800b328:	1c43      	adds	r3, r0, #1
 800b32a:	d102      	bne.n	800b332 <_sbrk_r+0x1a>
 800b32c:	6823      	ldr	r3, [r4, #0]
 800b32e:	b103      	cbz	r3, 800b332 <_sbrk_r+0x1a>
 800b330:	602b      	str	r3, [r5, #0]
 800b332:	bd38      	pop	{r3, r4, r5, pc}
 800b334:	20001130 	.word	0x20001130

0800b338 <__sread>:
 800b338:	b510      	push	{r4, lr}
 800b33a:	460c      	mov	r4, r1
 800b33c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b340:	f000 f8fa 	bl	800b538 <_read_r>
 800b344:	2800      	cmp	r0, #0
 800b346:	bfab      	itete	ge
 800b348:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b34a:	89a3      	ldrhlt	r3, [r4, #12]
 800b34c:	181b      	addge	r3, r3, r0
 800b34e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b352:	bfac      	ite	ge
 800b354:	6563      	strge	r3, [r4, #84]	; 0x54
 800b356:	81a3      	strhlt	r3, [r4, #12]
 800b358:	bd10      	pop	{r4, pc}

0800b35a <__swrite>:
 800b35a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b35e:	461f      	mov	r7, r3
 800b360:	898b      	ldrh	r3, [r1, #12]
 800b362:	4605      	mov	r5, r0
 800b364:	05db      	lsls	r3, r3, #23
 800b366:	460c      	mov	r4, r1
 800b368:	4616      	mov	r6, r2
 800b36a:	d505      	bpl.n	800b378 <__swrite+0x1e>
 800b36c:	2302      	movs	r3, #2
 800b36e:	2200      	movs	r2, #0
 800b370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b374:	f000 f874 	bl	800b460 <_lseek_r>
 800b378:	89a3      	ldrh	r3, [r4, #12]
 800b37a:	4632      	mov	r2, r6
 800b37c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b380:	81a3      	strh	r3, [r4, #12]
 800b382:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b386:	463b      	mov	r3, r7
 800b388:	4628      	mov	r0, r5
 800b38a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b38e:	f000 b823 	b.w	800b3d8 <_write_r>

0800b392 <__sseek>:
 800b392:	b510      	push	{r4, lr}
 800b394:	460c      	mov	r4, r1
 800b396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b39a:	f000 f861 	bl	800b460 <_lseek_r>
 800b39e:	1c43      	adds	r3, r0, #1
 800b3a0:	89a3      	ldrh	r3, [r4, #12]
 800b3a2:	bf15      	itete	ne
 800b3a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b3a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b3aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b3ae:	81a3      	strheq	r3, [r4, #12]
 800b3b0:	bf18      	it	ne
 800b3b2:	81a3      	strhne	r3, [r4, #12]
 800b3b4:	bd10      	pop	{r4, pc}

0800b3b6 <__sclose>:
 800b3b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3ba:	f000 b81f 	b.w	800b3fc <_close_r>

0800b3be <__ascii_wctomb>:
 800b3be:	b149      	cbz	r1, 800b3d4 <__ascii_wctomb+0x16>
 800b3c0:	2aff      	cmp	r2, #255	; 0xff
 800b3c2:	bf8b      	itete	hi
 800b3c4:	238a      	movhi	r3, #138	; 0x8a
 800b3c6:	700a      	strbls	r2, [r1, #0]
 800b3c8:	6003      	strhi	r3, [r0, #0]
 800b3ca:	2001      	movls	r0, #1
 800b3cc:	bf88      	it	hi
 800b3ce:	f04f 30ff 	movhi.w	r0, #4294967295
 800b3d2:	4770      	bx	lr
 800b3d4:	4608      	mov	r0, r1
 800b3d6:	4770      	bx	lr

0800b3d8 <_write_r>:
 800b3d8:	b538      	push	{r3, r4, r5, lr}
 800b3da:	4605      	mov	r5, r0
 800b3dc:	4608      	mov	r0, r1
 800b3de:	4611      	mov	r1, r2
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	4c05      	ldr	r4, [pc, #20]	; (800b3f8 <_write_r+0x20>)
 800b3e4:	6022      	str	r2, [r4, #0]
 800b3e6:	461a      	mov	r2, r3
 800b3e8:	f7fc fcb1 	bl	8007d4e <_write>
 800b3ec:	1c43      	adds	r3, r0, #1
 800b3ee:	d102      	bne.n	800b3f6 <_write_r+0x1e>
 800b3f0:	6823      	ldr	r3, [r4, #0]
 800b3f2:	b103      	cbz	r3, 800b3f6 <_write_r+0x1e>
 800b3f4:	602b      	str	r3, [r5, #0]
 800b3f6:	bd38      	pop	{r3, r4, r5, pc}
 800b3f8:	20001130 	.word	0x20001130

0800b3fc <_close_r>:
 800b3fc:	b538      	push	{r3, r4, r5, lr}
 800b3fe:	2300      	movs	r3, #0
 800b400:	4c05      	ldr	r4, [pc, #20]	; (800b418 <_close_r+0x1c>)
 800b402:	4605      	mov	r5, r0
 800b404:	4608      	mov	r0, r1
 800b406:	6023      	str	r3, [r4, #0]
 800b408:	f7fc fcbd 	bl	8007d86 <_close>
 800b40c:	1c43      	adds	r3, r0, #1
 800b40e:	d102      	bne.n	800b416 <_close_r+0x1a>
 800b410:	6823      	ldr	r3, [r4, #0]
 800b412:	b103      	cbz	r3, 800b416 <_close_r+0x1a>
 800b414:	602b      	str	r3, [r5, #0]
 800b416:	bd38      	pop	{r3, r4, r5, pc}
 800b418:	20001130 	.word	0x20001130

0800b41c <_fstat_r>:
 800b41c:	b538      	push	{r3, r4, r5, lr}
 800b41e:	2300      	movs	r3, #0
 800b420:	4c06      	ldr	r4, [pc, #24]	; (800b43c <_fstat_r+0x20>)
 800b422:	4605      	mov	r5, r0
 800b424:	4608      	mov	r0, r1
 800b426:	4611      	mov	r1, r2
 800b428:	6023      	str	r3, [r4, #0]
 800b42a:	f7fc fcb7 	bl	8007d9c <_fstat>
 800b42e:	1c43      	adds	r3, r0, #1
 800b430:	d102      	bne.n	800b438 <_fstat_r+0x1c>
 800b432:	6823      	ldr	r3, [r4, #0]
 800b434:	b103      	cbz	r3, 800b438 <_fstat_r+0x1c>
 800b436:	602b      	str	r3, [r5, #0]
 800b438:	bd38      	pop	{r3, r4, r5, pc}
 800b43a:	bf00      	nop
 800b43c:	20001130 	.word	0x20001130

0800b440 <_isatty_r>:
 800b440:	b538      	push	{r3, r4, r5, lr}
 800b442:	2300      	movs	r3, #0
 800b444:	4c05      	ldr	r4, [pc, #20]	; (800b45c <_isatty_r+0x1c>)
 800b446:	4605      	mov	r5, r0
 800b448:	4608      	mov	r0, r1
 800b44a:	6023      	str	r3, [r4, #0]
 800b44c:	f7fc fcb5 	bl	8007dba <_isatty>
 800b450:	1c43      	adds	r3, r0, #1
 800b452:	d102      	bne.n	800b45a <_isatty_r+0x1a>
 800b454:	6823      	ldr	r3, [r4, #0]
 800b456:	b103      	cbz	r3, 800b45a <_isatty_r+0x1a>
 800b458:	602b      	str	r3, [r5, #0]
 800b45a:	bd38      	pop	{r3, r4, r5, pc}
 800b45c:	20001130 	.word	0x20001130

0800b460 <_lseek_r>:
 800b460:	b538      	push	{r3, r4, r5, lr}
 800b462:	4605      	mov	r5, r0
 800b464:	4608      	mov	r0, r1
 800b466:	4611      	mov	r1, r2
 800b468:	2200      	movs	r2, #0
 800b46a:	4c05      	ldr	r4, [pc, #20]	; (800b480 <_lseek_r+0x20>)
 800b46c:	6022      	str	r2, [r4, #0]
 800b46e:	461a      	mov	r2, r3
 800b470:	f7fc fcad 	bl	8007dce <_lseek>
 800b474:	1c43      	adds	r3, r0, #1
 800b476:	d102      	bne.n	800b47e <_lseek_r+0x1e>
 800b478:	6823      	ldr	r3, [r4, #0]
 800b47a:	b103      	cbz	r3, 800b47e <_lseek_r+0x1e>
 800b47c:	602b      	str	r3, [r5, #0]
 800b47e:	bd38      	pop	{r3, r4, r5, pc}
 800b480:	20001130 	.word	0x20001130

0800b484 <memchr>:
 800b484:	b510      	push	{r4, lr}
 800b486:	b2c9      	uxtb	r1, r1
 800b488:	4402      	add	r2, r0
 800b48a:	4290      	cmp	r0, r2
 800b48c:	4603      	mov	r3, r0
 800b48e:	d101      	bne.n	800b494 <memchr+0x10>
 800b490:	2300      	movs	r3, #0
 800b492:	e003      	b.n	800b49c <memchr+0x18>
 800b494:	781c      	ldrb	r4, [r3, #0]
 800b496:	3001      	adds	r0, #1
 800b498:	428c      	cmp	r4, r1
 800b49a:	d1f6      	bne.n	800b48a <memchr+0x6>
 800b49c:	4618      	mov	r0, r3
 800b49e:	bd10      	pop	{r4, pc}

0800b4a0 <memcpy>:
 800b4a0:	b510      	push	{r4, lr}
 800b4a2:	1e43      	subs	r3, r0, #1
 800b4a4:	440a      	add	r2, r1
 800b4a6:	4291      	cmp	r1, r2
 800b4a8:	d100      	bne.n	800b4ac <memcpy+0xc>
 800b4aa:	bd10      	pop	{r4, pc}
 800b4ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4b4:	e7f7      	b.n	800b4a6 <memcpy+0x6>

0800b4b6 <memmove>:
 800b4b6:	4288      	cmp	r0, r1
 800b4b8:	b510      	push	{r4, lr}
 800b4ba:	eb01 0302 	add.w	r3, r1, r2
 800b4be:	d807      	bhi.n	800b4d0 <memmove+0x1a>
 800b4c0:	1e42      	subs	r2, r0, #1
 800b4c2:	4299      	cmp	r1, r3
 800b4c4:	d00a      	beq.n	800b4dc <memmove+0x26>
 800b4c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4ca:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b4ce:	e7f8      	b.n	800b4c2 <memmove+0xc>
 800b4d0:	4283      	cmp	r3, r0
 800b4d2:	d9f5      	bls.n	800b4c0 <memmove+0xa>
 800b4d4:	1881      	adds	r1, r0, r2
 800b4d6:	1ad2      	subs	r2, r2, r3
 800b4d8:	42d3      	cmn	r3, r2
 800b4da:	d100      	bne.n	800b4de <memmove+0x28>
 800b4dc:	bd10      	pop	{r4, pc}
 800b4de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4e2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b4e6:	e7f7      	b.n	800b4d8 <memmove+0x22>

0800b4e8 <__malloc_lock>:
 800b4e8:	4770      	bx	lr

0800b4ea <__malloc_unlock>:
 800b4ea:	4770      	bx	lr

0800b4ec <_realloc_r>:
 800b4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ee:	4607      	mov	r7, r0
 800b4f0:	4614      	mov	r4, r2
 800b4f2:	460e      	mov	r6, r1
 800b4f4:	b921      	cbnz	r1, 800b500 <_realloc_r+0x14>
 800b4f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b4fa:	4611      	mov	r1, r2
 800b4fc:	f7ff ba64 	b.w	800a9c8 <_malloc_r>
 800b500:	b922      	cbnz	r2, 800b50c <_realloc_r+0x20>
 800b502:	f7ff fa15 	bl	800a930 <_free_r>
 800b506:	4625      	mov	r5, r4
 800b508:	4628      	mov	r0, r5
 800b50a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b50c:	f000 f826 	bl	800b55c <_malloc_usable_size_r>
 800b510:	42a0      	cmp	r0, r4
 800b512:	d20f      	bcs.n	800b534 <_realloc_r+0x48>
 800b514:	4621      	mov	r1, r4
 800b516:	4638      	mov	r0, r7
 800b518:	f7ff fa56 	bl	800a9c8 <_malloc_r>
 800b51c:	4605      	mov	r5, r0
 800b51e:	2800      	cmp	r0, #0
 800b520:	d0f2      	beq.n	800b508 <_realloc_r+0x1c>
 800b522:	4631      	mov	r1, r6
 800b524:	4622      	mov	r2, r4
 800b526:	f7ff ffbb 	bl	800b4a0 <memcpy>
 800b52a:	4631      	mov	r1, r6
 800b52c:	4638      	mov	r0, r7
 800b52e:	f7ff f9ff 	bl	800a930 <_free_r>
 800b532:	e7e9      	b.n	800b508 <_realloc_r+0x1c>
 800b534:	4635      	mov	r5, r6
 800b536:	e7e7      	b.n	800b508 <_realloc_r+0x1c>

0800b538 <_read_r>:
 800b538:	b538      	push	{r3, r4, r5, lr}
 800b53a:	4605      	mov	r5, r0
 800b53c:	4608      	mov	r0, r1
 800b53e:	4611      	mov	r1, r2
 800b540:	2200      	movs	r2, #0
 800b542:	4c05      	ldr	r4, [pc, #20]	; (800b558 <_read_r+0x20>)
 800b544:	6022      	str	r2, [r4, #0]
 800b546:	461a      	mov	r2, r3
 800b548:	f7fc fbe4 	bl	8007d14 <_read>
 800b54c:	1c43      	adds	r3, r0, #1
 800b54e:	d102      	bne.n	800b556 <_read_r+0x1e>
 800b550:	6823      	ldr	r3, [r4, #0]
 800b552:	b103      	cbz	r3, 800b556 <_read_r+0x1e>
 800b554:	602b      	str	r3, [r5, #0]
 800b556:	bd38      	pop	{r3, r4, r5, pc}
 800b558:	20001130 	.word	0x20001130

0800b55c <_malloc_usable_size_r>:
 800b55c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b560:	1f18      	subs	r0, r3, #4
 800b562:	2b00      	cmp	r3, #0
 800b564:	bfbc      	itt	lt
 800b566:	580b      	ldrlt	r3, [r1, r0]
 800b568:	18c0      	addlt	r0, r0, r3
 800b56a:	4770      	bx	lr

0800b56c <_init>:
 800b56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b56e:	bf00      	nop
 800b570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b572:	bc08      	pop	{r3}
 800b574:	469e      	mov	lr, r3
 800b576:	4770      	bx	lr

0800b578 <_fini>:
 800b578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b57a:	bf00      	nop
 800b57c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b57e:	bc08      	pop	{r3}
 800b580:	469e      	mov	lr, r3
 800b582:	4770      	bx	lr
